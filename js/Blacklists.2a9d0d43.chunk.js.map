{"version":3,"sources":["views/Blacklists.tsx","hooks/useModalManager/useModalManager.ts","contexts/ModalManagerContext/ModalManagerContext.tsx","components/InfoModal/InfoModal.tsx","components/InfoModal/OpenInfoModalButton.tsx","components/PageHeader/PageHeader.tsx","contexts/ModalManagerContext/index.ts"],"names":["Container","styled","div","Blacklists","title","useModalManager","key","modals","useContext","ModalManagerStateContext","setModals","ModalManagerSetContext","openModal","useCallback","data","closeModal","modalData","React","createContext","ModalManagerProvider","children","defaultModals","useState","Provider","value","InfoModal","modalKey","size","type","OpenInfoModalButton","buttonText","onClick","PageHeader","alignItems","pb","mr","py"],"mappings":"mTAKA,MAAMA,EAAYC,UAAOC,IAAV,KAcAC,UAV6B,IAExC,cAAC,IAAD,UACE,cAACH,EAAD,UACE,cAAC,IAAD,CAAYI,MAAM,oB,8FCqBXC,MA5ByBC,IAEtC,MAAMC,EAASC,qBACbC,KAGIC,EAAYF,qBAAWG,KAEvBC,EAAYC,uBAChB,CAACC,EAAkB,MACjBJ,GAAWH,GAAD,YAAC,eAAiBA,GAAlB,IAA0B,CAACD,GAAMQ,QAE7C,CAACR,EAAKI,IAGFK,EAAaF,uBAAY,KAC7BD,EAAU,QACT,CAACA,IAIJ,MAAO,CACLI,UAHgBT,EAAOD,GAIvBM,YACAG,gB,yKC5BG,MAAMN,EAA2BQ,IAAMC,cAAc,IAE/CP,EAAyBM,IAAMC,eAE1C,SAMWC,EAAuD,EAClEC,WACAC,gBAAgB,OACX,MAAD,EACwBC,mBAA8BD,GADtD,mBACGd,EADH,KACWG,EADX,KAEJ,OACE,cAACD,EAAyBc,SAA1B,CAAmCC,MAAOjB,EAA1C,SACE,cAACI,EAAuBY,SAAxB,CAAiCC,MAAOd,EAAxC,SACGU,Q,uICQMK,MAlBmC,EAChDC,WACAtB,QACAgB,eACK,MAAD,EAC8Bf,YAAgBqB,GAA1CV,EADJ,EACIA,UAAWD,EADf,EACeA,WAEnB,OAAKC,EAKH,cAAC,QAAD,CAAOW,KAAK,QAAQC,KAAK,UAAUxB,MAAOA,EAAOW,WAAYA,EAA7D,SACGK,IALI,M,6JCYIS,MAlB6C,EAC1DH,WACAI,aAAa,iBACR,MACGlB,EAAcP,YAAgBqB,GAA9Bd,UAER,OACE,eAAC,gBAAD,CAAemB,QAAS,IAAMnB,IAA9B,UACE,oBAKCkB,O,qGCJQE,MAXoC,EAAG5B,QAAOsB,cAC3D,eAAC,OAAD,CAAMO,WAAW,SAASC,GAAI,EAA9B,UACE,cAAC,MAAD,CAAKC,GAAI,EAAT,SACE,cAAC,MAAD,CAAKC,GAAI,EAAT,SACE,cAAC,iBAAD,UAAiBhC,QAGpBsB,GAAY,cAAC,IAAD,CAAqBA,SAAUA,Q,iCCjBhD","file":"static/js/Blacklists.2a9d0d43.chunk.js","sourcesContent":["import React from 'react';\nimport styled from 'styled-components';\nimport { ModalManagerProvider } from 'contexts/ModalManagerContext';\nimport PageHeader from 'components/PageHeader';\n\nconst Container = styled.div`\n  height: calc(100vh - 120px);\n`;\n\nconst Blacklists: React.FunctionComponent = () => {\n  return (\n    <ModalManagerProvider>\n      <Container>\n        <PageHeader title=\"Blacklists\"></PageHeader>\n      </Container>\n    </ModalManagerProvider>\n  );\n};\n\nexport default Blacklists;\n","import {\n  ModalManagerStateContext,\n  ModalManagerSetContext,\n} from 'contexts/ModalManagerContext/ModalManagerContext';\nimport { useContext, useCallback } from 'react';\n\nconst useModalManager = <T extends any>(key: string) => {\n  type ModalData = T | null | undefined;\n  const modals = useContext<Record<string, ModalData>>(\n    ModalManagerStateContext\n  );\n\n  const setModals = useContext(ModalManagerSetContext);\n\n  const openModal = useCallback(\n    (data: ModalData = {} as T) => {\n      setModals((modals) => ({ ...modals, [key]: data }));\n    },\n    [key, setModals]\n  );\n\n  const closeModal = useCallback(() => {\n    openModal(null);\n  }, [openModal]);\n\n  const modalData = modals[key];\n\n  return {\n    modalData: modalData as T,\n    openModal,\n    closeModal,\n  };\n};\n\nexport default useModalManager;\n","import React, { useState } from 'react';\n\nexport const ModalManagerStateContext = React.createContext({});\n\nexport const ModalManagerSetContext = React.createContext<\n  React.Dispatch<React.SetStateAction<{}>>\n>(() => {});\n\ninterface Props {\n  defaultModals?: Record<string, any>;\n}\n\nexport const ModalManagerProvider: React.FunctionComponent<Props> = ({\n  children,\n  defaultModals = {},\n}) => {\n  const [modals, setModals] = useState<Record<string, any>>(defaultModals);\n  return (\n    <ModalManagerStateContext.Provider value={modals}>\n      <ModalManagerSetContext.Provider value={setModals}>\n        {children}\n      </ModalManagerSetContext.Provider>\n    </ModalManagerStateContext.Provider>\n  );\n};\n","import React from 'react';\nimport useModalManager from 'hooks/useModalManager';\nimport { Modals } from 'types/enums/modals';\nimport { Modal } from '@cko/primitives';\n\ninterface Props {\n  modalKey: Modals;\n  title: string;\n}\n\nconst InfoModal: React.FunctionComponent<Props> = ({\n  modalKey,\n  title,\n  children,\n}) => {\n  const { modalData, closeModal } = useModalManager(modalKey);\n\n  if (!modalData) {\n    return null;\n  }\n\n  return (\n    <Modal size=\"large\" type=\"success\" title={title} closeModal={closeModal}>\n      {children}\n    </Modal>\n  );\n};\n\nexport default InfoModal;\n","import React from 'react';\nimport { OutlineButton } from '@cko/primitives';\nimport { IconActionInfo } from '@cko/icons';\nimport useModalManager from 'hooks/useModalManager';\nimport { Modals } from 'types/enums/modals';\nimport 'styled-components/macro';\n\ninterface Props {\n  modalKey: Modals;\n  buttonText?: string;\n}\n\nconst OpenInfoModalButton: React.FunctionComponent<Props> = ({\n  modalKey,\n  buttonText = 'Learn more',\n}) => {\n  const { openModal } = useModalManager(modalKey);\n\n  return (\n    <OutlineButton onClick={() => openModal()}>\n      <IconActionInfo\n        css={`\n          margin-right: 6px;\n        `}\n      />\n      {buttonText}\n    </OutlineButton>\n  );\n};\n\nexport default OpenInfoModalButton;\n","import React from 'react';\nimport { Box, TextHeadingOne, Flex } from '@cko/primitives';\nimport { OpenInfoModalButton } from 'components/InfoModal';\nimport { Modals } from 'types/enums/modals';\n\ninterface Props {\n  title: string;\n  modalKey?: Modals;\n}\n\nconst PageHeader: React.FunctionComponent<Props> = ({ title, modalKey }) => (\n  <Flex alignItems=\"center\" pb={2}>\n    <Box mr={2}>\n      <Box py={3}>\n        <TextHeadingOne>{title}</TextHeadingOne>\n      </Box>\n    </Box>\n    {modalKey && <OpenInfoModalButton modalKey={modalKey} />}\n  </Flex>\n);\n\nexport default PageHeader;\n","export {\n  ModalManagerProvider,\n  ModalManagerStateContext,\n  ModalManagerSetContext,\n} from './ModalManagerContext';\n"],"sourceRoot":""}