{"version":3,"sources":["components/Layouts/MasterDetailLayout.tsx","components/Ellipsis/Ellipsis.tsx","components/SidebarLinks/SidebarLinks.tsx","forms/AddListForm/AddListValidator.ts","forms/AddListForm/AddListForm.tsx","containers/AddListContainer/AddListContainer.tsx","hooks/api/lists/useAddList.ts","hooks/api/lists/useUpdateList.ts","containers/ListsMasterContainer/ListsMasterContainer.tsx","containers/ListsMasterDetailsHeaderContainer/ListsMasterDetailsHeaderContainer.tsx","hooks/useDebounce/useDebounce.ts","hooks/useMasterDetailsControls/useMasterDetailsControls.ts","forms/AddListEntryForm/AddListValidator.ts","forms/AddListEntryForm/AddListEntryForm.tsx","containers/AddListsEntryContainer/AddListsEntryContainer.tsx","containers/DeleteCustomListContainer/DeleteCustomListContainer.tsx","containers/DeleteListEntryContainer/DeleteListEntryContainer.tsx","containers/ListsDetailsContainer/ListsDetailsContainer.tsx","containers/ListsDetailsContainer/ListsInfoModalContainer.tsx","views/Lists.tsx","features/RulesBuilder/RulesBuilderHelpContext/RulesBuilderHelpContext.tsx","features/RulesBuilder/RulesEditorContext/RulesEditorContext.tsx","features/RulesBuilder/RulesBuilderForm/useRuleValidator.ts","features/RulesBuilder/RulesBuilderContext/RulesBuilderContext.tsx","features/RulesBuilder/RuleBuilderContent/index.ts","features/RulesBuilder/RuleBuilderContent/example-combinations.ts","features/RulesBuilder/RuleBuilderContent/available-properties.ts","features/RulesBuilder/RuleBuilderContent/operators.ts","features/RulesBuilder/RuleBuilderContent/editor.ts","features/RulesBuilder/RuleBuilderContent/velocity-wizard.ts","hooks/api/lists/useAddListEntry.ts","hooks/api/lists/useDeleteList.ts","hooks/api/lists/useDeleteListEntry.ts","hooks/api/lists/useListItemsData.ts","hooks/api/lists/useListsData.ts","hooks/api/lists/index.ts","hooks/useMlScoreEnabled/useMlScoreEnabled.ts","features/RulesBuilder/RulesEditor/RulesExample.tsx","hooks/useScrollSpy/useScrollSpy.tsx","features/RulesBuilder/RulesEditor/SyntaxHighlightEditable.tsx","utils/dates/dateFormatter.ts","components/Highlighted/Highlighted.tsx","hooks/useSyntaxHighlighting/useSyntaxHighlighting.tsx","Prism.PredicateParser/PredicateLexer.ts","features/RulesBuilder/RulesEditor/antlrUtils.ts","components/DataTable/DataTable.tsx"],"names":["MasterDetailLayout","styled","Grid","Ellipsis","div","layout","Count","span","SidebarLinks","links","cyTag","data-cy","map","link","data-testid","Link","to","display","justifyContent","maxWidth","label","Number","count","toLocaleString","listValidator","createValidator","name","required","maxLength","expectedCharacters","alias","description","pattern","AddListForm","onSubmit","onCancel","data","useState","hasSubmissionError","setHasSubmissionError","initial","buttonText","mode","FormMode","Add","initialValues","values","actions","a","response","status","setSubmitting","validate","validateOnChange","isSubmitting","submitCount","setFieldValue","TextField","onChange","e","target","value","match","x","toLowerCase","join","toSnakeCase","mb","disabled","SpacedButtonGroup","variant","type","onClick","InlineAlert","AddListContainer","useModalManager","Modals","ADD_LIST","modalData","closeModal","history","useHistory","showAlert","useAlerts","handleSuccess","_","variables","queryCache","invalidateQueries","endpoints","lists","push","onSuccess","useAddUpdateMutation","addList","useUpdateList","updateList","title","path","ListsMasterContainer","location","useLocation","hasWritePermssions","hasPermission","usePermissions","useListsData","loading","openModal","useEffect","pathname","firstlistItem","summaries","replace","listLinks","useMemo","length","list","total_count","as","px","mt","borderBottom","fontSize","AddIcon","IconActionAdd","ListsMasterDetailsHeaderContainer","searchTerm","setSearchTerm","totalCount","handleAddEntry","canAddEntry","MasterDetailsHeader","useDebounce","delay","debouncedValue","setDebouncedValue","handler","setTimeout","clearTimeout","useMasterDetailsControls","matchParam","skip","setSkip","limit","setLimit","searchQuery","setSearchQuery","debouncedSearchTerm","slug","setSlug","encodedQuery","encodeURIComponent","addListValidator","AddListEntryForm","Flex","alignItems","p","pl","AddListsEntryContainer","paginationVariables","ADD_LISTS_ENTRY","useAddListEntry","refetchListsQueries","addEntry","DeleteCustomlistContainer","submissionErrorMessage","setLoading","DELETE_CUSTOM_LIST","handleClose","useDeleteList","exact","deleteList","DeleteConfirmationModal","itemType","itemName","onDelete","DeleteListEntryContainer","DELETE_LIST_ENTRY","useDeleteListEntry","deleteEntry","id","ListsDetailsContainer","useParams","openAddEntryModal","openDeleteListEntryModal","openDeleteCustomListModal","openEditListModal","resource","useListItemsData","resolvedData","hasListWritePermission","mr","fontFamily","lineHeight","Edit","gridTemplateRows","DataTable","items","item","created_at","stringToDateDisplayValue","itemsToDisplay","onDeleteEntry","entry","canDeleteEntry","tableHeaders","itemCount","DeleteCustomListContainer","ListsInfoModalContainer","InfoModal","modalKey","LIST_INFO","Section","predicate","availableProperties","Container","Lists","PageHeader","height","component","RulesBuilderHelpContext","createContext","undefined","RulesBuilderHelpProvider","children","RulebuilderContent","exampleCombinations","default","helpKey","helpContentKey","setHelpContentKey","Provider","useRulesBuilderHelp","context","useContext","Error","removePlaceholderNodes","editor","nodes","Editor","at","n","HistoryEditor","withoutSaving","Transforms","removeNodes","RulesEditorContextProvider","selection","setSelection","fragment","setFragment","readOnly","setReadOnly","withReact","withHistory","createEditor","captureSelection","useCallback","Node","restoreSelection","editorEnd","end","Point","isAfter","Range","select","removePlaceholder","insertFragment","insertPredicate","ReactEditor","focus","insertText","collapse","edge","insertPlaceholder","placeholderPredicate","repeat","insertNodes","text","useRulesEditor","errorCodeMap","1000","5000","6000","6001","6002","6003","6004","6005","7000","9000","useRuleEvaluator","get","useGetRequest","rule","rules","params","result","is_valid","errors","errorCode","error_code","sourceText","source_context","offending_text","errorMessage","nameValidators","useRuleValidator","evaluateRule","isExpressionValid","error","mlScoreEnabled","useMlScoreEnabled","mlScoreEnabledValidation","mlScoreDisabledValidation","regexMatch","RulesBuilderContext","RulesBuilderProvider","initalFormValues","handleSubmit","useAvailablePropertiesData","rulesData","availablePropertiesStatus","enabledSelectedMerchantMlScore","listsData","listsStatus","submissionError","setSubmissionError","ruleValidator","properties","availableLists","filter","availableProperty","Loader","size","RulesEditorContext","keys","useRulesBuilder","content","amountAndCurrency","fraudScoreAndReference","addresses","cardDetails","cardholderDetails","verficationResults","velocity","operators","IN","CONTAINS","IS_MISSING","EXISTS","NOT","checkRule","velocityWizard","transactionCount","example","relative","useDeleteMutation","removeQueries","req","usePaginatedQuery","useQuery","useMerchants","selectedMerchant","ml_score_enabled","RuleExample","useSyntaxHighlighting","getLeafRenderer","renderElement","renderLeaf","tabIndex","contentEditable","spellCheck","tokensToSkip","tokenize","RulesExampleContainer","React","memo","ScrollSpyContext","ScrollSpyProvider","isInView","setIsInView","refs","reduce","acc","curr","ref","createRef","observer","IntersectionObserver","prev","isIntersecting","Object","forEach","current","observe","disconnect","scrollTo","key","opts","root","window","obj","top","offsetTop","behavior","useScrollSpy","getRoot","SyntaxHighlightEditable","rest","decorate","node","ranges","Text","isText","tokens","start","token","includes","anchor","offset","API_FORMAT","date","dateFormater","format","dateString","Date","getUTCFullYear","getUTCMonth","getUTCDate","getUTCHours","getUTCMinutes","getUTCSeconds","formatDate","formatDateRange","dateRange","fromDate","toDate","from","booleanTypes","booleanOperatorTypes","arithmeticOperatorTypes","tokenStyle","css","Output","theme","isOperator","isBoolean","isRuntimeBoolean","colors","base","baseLight","isNumber","isRuntimeNumber","warningDark","warningLight","isString","isRuntimeString","successDark","successLight","isMetadata","dangerDark","dangerLight","isList","isPlaceholder","Highlighted","getRuntimeType","attributes","leaf","runtimeType","setRuntimeType","useRef","child","firstElementChild","attr","getNamedItem","style","padding","find","props","PredicateLexer","Lexer","VOCABULARY","constructor","input","super","this","_interp","LexerATNSimulator","_ATN","ruleNames","_serializedATN","channelNames","modeNames","__ATN","ATNDeserializer","deserialize","Utils","Not","IsMissing","Exists","GreaterThan","GreaterThanEqual","LessThan","LessThanEqual","Equal","NotEqual","In","Or","And","True","False","String","OpenParen","CloseParen","OpenBracket","CloseBracket","Property","Metadata","DefinedList","Comma","WHITESPACE","OTHERS","_LITERAL_NAMES","_SYMBOLIC_NAMES","VocabularyImpl","chars","ANTLRInputStream","lexer","CommonTokenStream","fill","getTokens","t","vocabulary","getSymbolicName","normaliseTokens","TableWrapper","EmptyTableCell","TableCell","onInteraction","tableContent","colSpan","i","k","cursor","width","DeleteButton","tableHeaderContent","headers","header","index"],"mappings":"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","file":"static/js/Lists.da613db1.chunk.js","sourcesContent":["import styled from 'styled-components';\nimport Grid from 'components/Grid';\n\nconst MasterDetailLayout = styled(Grid)`\n  grid-template-columns: 220px auto;\n  grid-gap: 12px;\n`;\n\nexport { MasterDetailLayout };\n","import styled from 'styled-components';\nimport { layout, LayoutProps } from 'styled-system';\n\nconst Ellipsis = styled.div<LayoutProps>`\n  ${layout}\n  text-overflow: ellipsis;\n  overflow: hidden;\n`;\nexport default Ellipsis;\n","import React from 'react';\nimport Link from 'components/PrimaryNav/Link';\nimport styled from 'styled-components';\nimport { Flex } from '@cko/primitives';\n\nimport Ellipsis from 'components/Ellipsis';\n\ninterface ILink {\n  to: string;\n  label: string;\n  count: number;\n}\n\ninterface Props {\n  links: ILink[];\n  cyTag: string;\n}\n\nconst Count = styled.span`\n  float: right;\n`;\n\nconst SidebarLinks: React.FunctionComponent<Props> = ({ links, cyTag }) => (\n  <ul data-cy={cyTag}>\n    {links.map((link) => {\n      return (\n        <li key={link.to} data-testid=\"sidebar-links\">\n          <Link to={link.to} display=\"block\">\n            <Flex justifyContent=\"space-between\">\n              <Ellipsis maxWidth=\"140px\">{link.label}</Ellipsis>\n              <Count>{Number(link.count).toLocaleString()}</Count>\n            </Flex>\n          </Link>\n        </li>\n      );\n    })}\n  </ul>\n);\n\nexport default SidebarLinks;\n","import {\n  createValidator,\n  required,\n  maxLength,\n  expectedCharacters,\n} from 'utils/validator';\nimport { FormValues } from './AddListForm';\n\nconst listValidator = createValidator<FormValues>({\n  name: [\n    required('Name is required'),\n    maxLength(50),\n    expectedCharacters(/^[0-9a-zA-Z()[\\]\\-_\\\\/\\s]+$/),\n  ],\n  alias: [required('Alias is required')],\n  description: [maxLength(280)],\n});\n\nexport default listValidator;\n","import React, { useState } from 'react';\nimport { Form, Formik } from 'formik';\nimport { PrimaryButton, OutlineButton } from '@cko/primitives';\nimport TextField from 'components/TextField';\nimport listValidator from './AddListValidator';\nimport InlineAlert from 'components/InlineAlert';\nimport SpacedButtonGroup from 'components/SpacedButtonGroup';\nimport { ModalData } from 'containers/AddListContainer/AddListContainer';\nimport { FormMode } from 'types/models';\n\nexport interface FormValues {\n  name: string;\n  alias: string;\n  description?: string;\n}\n\nconst pattern = /[A-Z]{2,}(?=[A-Z][a-z]+[0-9]*|\\b)|[A-Z]?[a-z]+[0-9]*|[A-Z0-9]+/g;\n\nconst toSnakeCase = (value: string) => {\n  const match = value.match(pattern);\n  return match && match.map((x) => x.toLowerCase()).join('_');\n};\n\nexport interface Props {\n  onSubmit: (data: FormValues) => Promise<any>;\n  onCancel: () => void;\n  data: ModalData;\n}\n\nconst AddListForm: React.FunctionComponent<Props> = ({\n  onSubmit,\n  onCancel,\n  data,\n}) => {\n  const [hasSubmissionError, setHasSubmissionError] = useState<string | null>(\n    null\n  );\n\n  const initial = {\n    name: data.name || '',\n    alias: data.alias || '',\n    description: data.description || '',\n  };\n\n  const buttonText = data.mode === FormMode.Add ? 'Create' : 'Update';\n\n  return (\n    <Formik\n      initialValues={initial}\n      onSubmit={async (values, actions) => {\n        try {\n          setHasSubmissionError(null);\n          await onSubmit(values);\n        } catch (e) {\n          if (e.response?.status === 409) {\n            setHasSubmissionError(\n              ` A list named \"${values.name}\" already exists`\n            );\n          } else {\n            setHasSubmissionError('Technical error. Please try again later.');\n          }\n        } finally {\n          actions.setSubmitting(false);\n        }\n      }}\n      validate={listValidator}\n      validateOnChange={false}\n    >\n      {({ isSubmitting, submitCount, setFieldValue }) => {\n        return (\n          <Form>\n            <TextField\n              name=\"name\"\n              label=\"List name\"\n              data-testid=\"list-name\"\n              submitCount={submitCount}\n              onChange={(e) => {\n                setFieldValue('name', e.target.value);\n                data.mode === FormMode.Add &&\n                  setFieldValue(\n                    'alias',\n                    e.target.value ? toSnakeCase(e.target.value) : ''\n                  );\n              }}\n              mb={2}\n            />\n            <TextField\n              disabled={true}\n              name=\"alias\"\n              label=\"Alias\"\n              data-testid=\"list-alias\"\n              submitCount={submitCount}\n              mb={2}\n            />\n            <TextField\n              name=\"description\"\n              label=\"Description\"\n              data-testid=\"list-description\"\n              submitCount={submitCount}\n              mb={4}\n            />\n            <SpacedButtonGroup>\n              <PrimaryButton\n                variant=\"large\"\n                type=\"submit\"\n                disabled={isSubmitting}\n              >\n                {isSubmitting ? 'Submitting' : buttonText}\n              </PrimaryButton>\n              <OutlineButton variant=\"large\" onClick={onCancel}>\n                Cancel\n              </OutlineButton>\n            </SpacedButtonGroup>\n            {hasSubmissionError && (\n              <InlineAlert>{hasSubmissionError}</InlineAlert>\n            )}\n          </Form>\n        );\n      }}\n    </Formik>\n  );\n};\n\nexport default AddListForm;\n","import React from 'react';\nimport useModalManager from 'hooks/useModalManager';\nimport { Modals } from 'types/enums/modals';\nimport { Modal } from '@cko/primitives';\nimport useAlerts from 'hooks/useAlerts';\nimport AddListForm from 'forms/AddListForm';\nimport { FormValues } from 'forms/AddListForm';\nimport { FormMode } from 'types/models';\nimport { useAddList } from 'hooks/api/lists/useAddList';\nimport { useUpdateList } from 'hooks/api/lists/useUpdateList';\nimport { queryCache } from 'react-query';\nimport endpoints from 'api/endpoints';\nimport { useHistory } from 'react-router-dom';\n\nexport interface ModalData {\n  mode: FormMode;\n  name: string;\n  alias: string;\n  description: string;\n}\n\ninterface Props {\n  mode: FormMode;\n}\n\nconst AddListContainer: React.FunctionComponent<Props> = ({ mode }) => {\n  const { modalData, closeModal } = useModalManager<ModalData>(Modals.ADD_LIST);\n  const history = useHistory();\n  const { showAlert } = useAlerts();\n\n  const handleSuccess = (\n    _: {},\n    variables: {\n      data: FormValues;\n      path?: string | undefined;\n    }\n  ) => {\n    showAlert(modalData.mode === FormMode.Add ? 'List added' : 'List edited');\n    closeModal();\n\n    queryCache.invalidateQueries(endpoints.lists);\n\n    if (modalData.mode === FormMode.Add && variables.data.alias) {\n      history.push(`/lists/${variables.data.alias}`);\n    }\n  };\n\n  const [addList] = useAddList(handleSuccess);\n  const [updateList] = useUpdateList(handleSuccess);\n\n  const handleSubmit = (values: FormValues) => {\n    return modalData.mode === FormMode.Add\n      ? addList({ data: values })\n      : updateList({ data: values, path: modalData.alias });\n  };\n\n  if (!modalData || modalData.mode !== mode) {\n    return null;\n  }\n\n  return (\n    <Modal\n      type=\"success\"\n      title={modalData.mode === FormMode.Add ? 'Create new list' : 'Edit list'}\n      closeModal={closeModal}\n    >\n      <AddListForm\n        onSubmit={handleSubmit}\n        onCancel={closeModal}\n        data={modalData}\n      />\n    </Modal>\n  );\n};\n\nexport default AddListContainer;\n","import endpoints from 'api/endpoints';\nimport { useAddUpdateMutation } from '../common/useAddUpdateMutation';\nimport { FormValues } from 'forms/AddListForm';\n\nexport type UseAddListOnSuccess = (\n  data: {},\n  variables: {\n    data: FormValues;\n    path?: string | undefined;\n  }\n) => void | Promise<void>;\n\nexport const useAddList = (onSuccess: UseAddListOnSuccess) => {\n  return useAddUpdateMutation<FormValues, {}>('post', endpoints.lists, {\n    onSuccess,\n  });\n};\n","import endpoints from 'api/endpoints';\nimport { useAddUpdateMutation } from '../common/useAddUpdateMutation';\nimport { FormValues } from 'forms/AddListForm';\n\nexport type UseUpdateListOnSuccess = (\n  data: {},\n  variables: {\n    data: FormValues;\n    path?: string | undefined;\n  }\n) => void | Promise<void>;\n\nexport const useUpdateList = (onSuccess: UseUpdateListOnSuccess) => {\n  return useAddUpdateMutation<FormValues, {}>('put', endpoints.lists, {\n    onSuccess,\n  });\n};\n","import React, { useMemo, useEffect } from 'react';\nimport { FormMode } from 'types/models';\nimport { Panel, SecondaryButton, Flex, Box, Text } from '@cko/primitives';\nimport SidebarLinks from 'components/SidebarLinks';\nimport { SidebarLinksPlaceholder } from 'components/Placeholders';\nimport { useLocation, useHistory } from 'react-router-dom';\nimport useModalManager from 'hooks/useModalManager';\nimport { Modals } from 'types/enums/modals';\nimport AddListContainer from 'containers/AddListContainer';\nimport usePermissions from 'hooks/usePermissions';\nimport { useListsData } from 'hooks/api/lists';\n\nconst ListsMasterContainer: React.FunctionComponent = () => {\n  const location = useLocation();\n  const history = useHistory();\n  const { hasPermission } = usePermissions();\n  const hasWritePermssions = hasPermission('prism:list:write');\n\n  const { status, data } = useListsData();\n\n  const loading = status === 'loading';\n\n  const { openModal } = useModalManager(Modals.ADD_LIST);\n\n  useEffect(() => {\n    if (data && location.pathname === '/lists') {\n      const [firstlistItem] = data.summaries;\n      firstlistItem && history.replace(`/lists/${firstlistItem.alias}`);\n    }\n  }, [data, history, location.pathname]);\n\n  const listLinks = useMemo(() => {\n    if (!data?.summaries.length) {\n      return [];\n    }\n\n    return data.summaries.map((list) => ({\n      to: `/lists/${list.alias}`,\n      label: list.name,\n      count: list.total_count,\n    }));\n  }, [data]);\n\n  return (\n    <Panel as=\"aside\" px={3}>\n      <Box mt={3}>\n        {loading ? (\n          <SidebarLinksPlaceholder length={6} />\n        ) : (\n          <>\n            <Box borderBottom={'baseLight.1'}>\n              {listLinks.length > 0 ? (\n                <SidebarLinks links={listLinks} cyTag=\"list-links\" />\n              ) : (\n                <Box mb={2}>\n                  <Text fontSize={1}>No lists, please create a list</Text>\n                </Box>\n              )}\n            </Box>\n            {hasWritePermssions && (\n              <Flex mt={2} justifyContent=\"center\">\n                <SecondaryButton\n                  onClick={() => openModal({ mode: FormMode.Add })}\n                >\n                  Create new list\n                </SecondaryButton>\n              </Flex>\n            )}\n            <AddListContainer mode={FormMode.Add} />\n          </>\n        )}\n      </Box>\n    </Panel>\n  );\n};\n\nexport default ListsMasterContainer;\n","import React, { Dispatch, SetStateAction } from 'react';\nimport { PrimaryButton } from '@cko/primitives';\nimport { IconActionAdd } from '@cko/icons';\nimport styled from 'styled-components';\nimport SpacedButtonGroup from 'components/SpacedButtonGroup';\nimport {\n  MasterDetailsSearchInput,\n  MasterDetailsHeaderLayout,\n  MasterDetailsHeaderLayoutLeft,\n  MasterDetailsHeaderLayoutRight,\n} from 'components/MasterDetailsHeader';\n\ninterface Props {\n  searchTerm: string | null;\n  setSearchTerm: Dispatch<SetStateAction<string | null>>;\n  name: string;\n  totalCount: number;\n  handleAddEntry: () => void;\n  canAddEntry: boolean;\n}\n\nconst AddIcon = styled(IconActionAdd)`\n  margin-right: 5px;\n  font-size: 16px;\n  vertical-align: text-bottom;\n  & > path {\n    fill: white;\n  }\n`;\n\nconst ListsMasterDetailsHeaderContainer: React.FunctionComponent<Props> = ({\n  searchTerm,\n  setSearchTerm,\n  totalCount,\n  handleAddEntry,\n  canAddEntry,\n}) => {\n  return (\n    <MasterDetailsHeaderLayout>\n      <MasterDetailsHeaderLayoutLeft>\n        <MasterDetailsSearchInput\n          searchTerm={searchTerm}\n          setSearchTerm={setSearchTerm}\n          totalCount={totalCount}\n        />\n      </MasterDetailsHeaderLayoutLeft>\n      {canAddEntry && (\n        <MasterDetailsHeaderLayoutRight>\n          <SpacedButtonGroup>\n            <PrimaryButton onClick={handleAddEntry} data-cy=\"add-entry-button\">\n              <AddIcon />\n              Add entry\n            </PrimaryButton>\n          </SpacedButtonGroup>\n        </MasterDetailsHeaderLayoutRight>\n      )}\n    </MasterDetailsHeaderLayout>\n  );\n};\n\nexport default ListsMasterDetailsHeaderContainer;\n","import { useEffect, useState } from 'react';\n\nconst useDebounce = <T>(value: T, delay: number = 600) => {\n  const [debouncedValue, setDebouncedValue] = useState(value);\n\n  useEffect(() => {\n    const handler = setTimeout(() => {\n      setDebouncedValue(value);\n    }, delay);\n\n    return () => {\n      clearTimeout(handler);\n    };\n  }, [delay, value]);\n\n  return debouncedValue as T;\n};\n\nexport default useDebounce;\n","import { useState, useEffect } from 'react';\nimport useDebounce from 'hooks/useDebounce';\n\nconst useMasterDetailsControls = (matchParam: string) => {\n  const [skip, setSkip] = useState(0);\n  const [limit, setLimit] = useState(25);\n  const [searchTerm, setSearchTerm] = useState<string | null>(null);\n  const [searchQuery, setSearchQuery] = useState('');\n  const debouncedSearchTerm = useDebounce(searchTerm);\n  const [slug, setSlug] = useState(matchParam);\n\n  useEffect(() => {\n    if (debouncedSearchTerm !== null) {\n      const encodedQuery = encodeURIComponent(debouncedSearchTerm);\n      setSearchQuery(encodedQuery);\n      setSkip(0);\n    }\n  }, [debouncedSearchTerm]);\n\n  // reset when the route changes\n  useEffect(() => {\n    setSkip(0);\n    setSearchTerm(null);\n    setSearchQuery('');\n    setSlug(matchParam);\n  }, [matchParam]);\n\n  return {\n    skip,\n    setSkip,\n    limit,\n    setLimit,\n    searchTerm,\n    setSearchTerm,\n    searchQuery,\n    slug,\n  };\n};\n\nexport default useMasterDetailsControls;\n","import { createValidator, required, expectedCharacters } from 'utils/validator';\nimport { AddListEntryFormData } from './AddListEntryForm';\n\nconst addListValidator = createValidator<AddListEntryFormData>({\n  value: [required('Value is required'), expectedCharacters(/[^\\s-]/)],\n});\n\nexport default addListValidator;\n","import React, { useState } from 'react';\nimport { Form, Formik } from 'formik';\nimport { Box, PrimaryButton, OutlineButton } from '@cko/primitives';\nimport Flex from 'components/Flex';\nimport TextField from 'components/TextField';\nimport InlineAlert from 'components/InlineAlert';\nimport addListValidator from './AddListValidator';\n\ninterface Props {\n  onCancel: () => void;\n  onSubmit: (data: {\n    data: AddListEntryFormData;\n    path: string;\n  }) => Promise<any>;\n  alias: string;\n}\n\nexport interface AddListEntryFormData {\n  value: string;\n}\n\nconst AddListEntryForm: React.FunctionComponent<Props> = ({\n  onCancel,\n  onSubmit,\n  alias,\n}) => {\n  const [hasSubmissionError, setHasSubmissionError] = useState<string | null>(\n    null\n  );\n\n  return (\n    <Formik\n      initialValues={{ value: '' }}\n      onSubmit={async (values, actions) => {\n        try {\n          setHasSubmissionError(null);\n          await onSubmit({ data: values, path: alias });\n          actions.setSubmitting(false);\n        } catch (e) {\n          if (e.response?.status === 409) {\n            setHasSubmissionError(`${values.value} already exists in the list`);\n          } else {\n            setHasSubmissionError('Technical error. Please try again later.');\n          }\n          actions.setSubmitting(false);\n        }\n      }}\n      validate={addListValidator}\n    >\n      {({ isSubmitting, submitCount }) => {\n        return (\n          <Form>\n            <TextField\n              name=\"value\"\n              label={'Entry value'}\n              mb={4}\n              data-testid=\"list-entry-value\"\n              submitCount={submitCount}\n            />\n            <Flex alignItems=\"center\" p={0}>\n              <Box>\n                <PrimaryButton\n                  type=\"submit\"\n                  disabled={isSubmitting}\n                  data-cy=\"list-entry-submit\"\n                >\n                  {isSubmitting ? 'Submitting' : 'Add'}\n                </PrimaryButton>\n              </Box>\n              <Box pl={3}>\n                <OutlineButton onClick={onCancel}>Cancel</OutlineButton>\n              </Box>\n            </Flex>\n\n            {hasSubmissionError && (\n              <InlineAlert>{hasSubmissionError}</InlineAlert>\n            )}\n          </Form>\n        );\n      }}\n    </Formik>\n  );\n};\n\nexport default AddListEntryForm;\n","import React from 'react';\nimport { Modals } from 'types/enums/modals';\nimport useModalManager from 'hooks/useModalManager';\nimport { Modal } from '@cko/primitives';\nimport AddListEntryForm from 'forms/AddListEntryForm';\nimport useAlerts from 'hooks/useAlerts';\nimport { useAddListEntry, refetchListsQueries } from 'hooks/api/lists';\nimport { PaginationVariables } from 'types/models';\n\ninterface Props {\n  paginationVariables: PaginationVariables;\n}\n\nconst AddListsEntryContainer: React.FunctionComponent<Props> = ({\n  paginationVariables,\n}) => {\n  const { modalData, closeModal } = useModalManager<string>(\n    Modals.ADD_LISTS_ENTRY\n  );\n\n  const { showAlert } = useAlerts();\n\n  const handleSuccess = () => {\n    showAlert('List entry added');\n    closeModal();\n    refetchListsQueries(paginationVariables);\n  };\n\n  const [addEntry] = useAddListEntry(handleSuccess);\n\n  if (!modalData) {\n    return null;\n  }\n\n  return (\n    <Modal type=\"success\" title={`Add new entry`} closeModal={closeModal}>\n      <AddListEntryForm\n        onCancel={closeModal}\n        onSubmit={addEntry}\n        alias={modalData}\n      />\n    </Modal>\n  );\n};\n\nexport default AddListsEntryContainer;\n","import React, { useState } from 'react';\nimport useModalManager from 'hooks/useModalManager';\nimport { Modals } from 'types/enums/modals';\nimport useAlerts from 'hooks/useAlerts';\nimport DeleteConfirmationModal from 'components/DeleteConfirmationModal';\nimport { useDeleteList } from 'hooks/api/lists';\nimport { useHistory } from 'react-router-dom';\nimport { queryCache } from 'react-query';\nimport endpoints from 'api/endpoints';\n\ninterface ModalData {\n  alias: string;\n  name: string;\n}\n\nconst DeleteCustomlistContainer = () => {\n  const [submissionErrorMessage, setHasSubmissionError] = useState<\n    string | null\n  >(null);\n  const [loading, setLoading] = useState(false);\n\n  const { modalData, closeModal } = useModalManager<ModalData>(\n    Modals.DELETE_CUSTOM_LIST\n  );\n\n  const { showAlert } = useAlerts();\n  const history = useHistory();\n\n  const handleClose = () => {\n    setHasSubmissionError(null);\n    closeModal();\n  };\n\n  const handleSuccess = () => {\n    showAlert('Custom List has been successfully deleted');\n    handleClose();\n    queryCache.invalidateQueries(endpoints.lists, { exact: true });\n    history.replace('/lists');\n  };\n\n  const [deleteList] = useDeleteList(handleSuccess);\n\n  if (!modalData) {\n    return null;\n  }\n\n  return (\n    <DeleteConfirmationModal\n      itemType=\"list\"\n      handleClose={handleClose}\n      submissionErrorMessage={submissionErrorMessage}\n      loading={loading}\n      itemName={modalData.name}\n      onCancel={handleClose}\n      onDelete={async () => {\n        setLoading(true);\n        try {\n          await deleteList(modalData.alias);\n          setLoading(false);\n        } catch (error) {\n          if (error.response?.status === 409) {\n            setHasSubmissionError(`${modalData.name} list cannot be deleted`);\n            setLoading(false);\n          } else {\n            setHasSubmissionError('Technical error. Please try again later.');\n            setLoading(false);\n          }\n        }\n      }}\n    />\n  );\n};\n\nexport default DeleteCustomlistContainer;\n","import React, { useState } from 'react';\nimport useModalManager from 'hooks/useModalManager';\nimport { Modals } from 'types/enums/modals';\nimport useAlerts from 'hooks/useAlerts';\nimport DeleteConfirmationModal from 'components/DeleteConfirmationModal';\nimport { useDeleteListEntry, refetchListsQueries } from 'hooks/api/lists';\nimport { PaginationVariables } from 'types/models';\n\nexport interface ModalData {\n  name: string;\n  id: string;\n  alias: string;\n}\n\ninterface Props {\n  paginationVariables: PaginationVariables;\n}\n\nconst DeleteListEntryContainer: React.FunctionComponent<Props> = ({\n  paginationVariables,\n}) => {\n  const [submissionErrorMessage, setHasSubmissionError] = useState<\n    string | null\n  >(null);\n  const [loading, setLoading] = useState(false);\n\n  const { modalData, closeModal } = useModalManager<ModalData>(\n    Modals.DELETE_LIST_ENTRY\n  );\n\n  const { showAlert } = useAlerts();\n\n  const handleClose = () => {\n    setHasSubmissionError(null);\n    closeModal();\n  };\n\n  const handleSuccess = () => {\n    showAlert('List entry successfully deleted');\n    handleClose();\n    refetchListsQueries(paginationVariables);\n  };\n\n  const [deleteEntry] = useDeleteListEntry(handleSuccess);\n\n  if (!modalData) {\n    return null;\n  }\n\n  return (\n    <DeleteConfirmationModal\n      itemType=\"entry\"\n      handleClose={handleClose}\n      submissionErrorMessage={submissionErrorMessage}\n      loading={loading}\n      itemName={modalData.name}\n      onCancel={handleClose}\n      onDelete={async () => {\n        setLoading(true);\n        try {\n          await deleteEntry(`${modalData.alias}/items/${modalData.id}`);\n          setLoading(false);\n        } catch (error) {\n          setHasSubmissionError('Technical error. Please try again later.');\n          setLoading(false);\n        }\n      }}\n    />\n  );\n};\n\nexport default DeleteListEntryContainer;\n","import React from 'react';\nimport { useParams } from 'react-router-dom';\nimport {\n  Panel,\n  Box,\n  Pagination,\n  SecondaryButton,\n  Flex,\n  AlertButton,\n  Text,\n  TextHeadingTwo,\n} from '@cko/primitives';\nimport Grid from 'components/Grid';\nimport ListsMasterDetailsHeaderContainer from 'containers/ListsMasterDetailsHeaderContainer';\nimport useMasterDetailsControls from 'hooks/useMasterDetailsControls';\nimport DataTable from 'components/DataTable';\nimport { stringToDateDisplayValue } from 'utils/dates/dateFormatter';\nimport useModalManager from 'hooks/useModalManager';\nimport { Modals } from 'types/enums/modals';\nimport AddListsEntryContainer from 'containers/AddListsEntryContainer';\nimport {\n  MasterDetailsHeaderLayout,\n  MasterDetailsHeaderLayoutLeft,\n  MasterDetailsHeaderLayoutRight,\n} from 'components/MasterDetailsHeader';\nimport AddListContainer from 'containers/AddListContainer';\nimport DeleteCustomListContainer from 'containers/DeleteCustomListContainer';\nimport usePermissions from 'hooks/usePermissions';\nimport { FormMode, ListItem } from 'types/models';\nimport DeleteListEntryContainer, {\n  ModalData,\n} from 'containers/DeleteListEntryContainer/DeleteListEntryContainer';\nimport { useListItemsData } from 'hooks/api/lists';\n\ninterface CustomListModalData {\n  alias: string;\n  name: string;\n}\n\nconst ListsDetailsContainer = () => {\n  const { alias } = useParams<{ alias: string }>();\n  const {\n    skip,\n    setSkip,\n    limit,\n    setLimit,\n    searchQuery,\n    searchTerm,\n    setSearchTerm,\n  } = useMasterDetailsControls(alias);\n  const { hasPermission } = usePermissions();\n\n  const { openModal: openAddEntryModal } = useModalManager<string>(\n    Modals.ADD_LISTS_ENTRY\n  );\n\n  const { openModal: openDeleteListEntryModal } = useModalManager<ModalData>(\n    Modals.DELETE_LIST_ENTRY\n  );\n\n  const {\n    openModal: openDeleteCustomListModal,\n  } = useModalManager<CustomListModalData>(Modals.DELETE_CUSTOM_LIST);\n\n  const { openModal: openEditListModal } = useModalManager<{\n    mode: FormMode;\n  }>(Modals.ADD_LIST);\n\n  const paginationVariables = {\n    resource: alias,\n    limit,\n    skip,\n    searchQuery,\n  };\n\n  const { status, resolvedData: data } = useListItemsData(paginationVariables);\n\n  const loading = status === 'loading';\n\n  if (!data) {\n    return null;\n  }\n\n  const hasListWritePermission = hasPermission('prism:list:write');\n\n  return (\n    <Box>\n      <Panel mb=\"12px\" p={0}>\n        <MasterDetailsHeaderLayout>\n          <MasterDetailsHeaderLayoutLeft>\n            <Box>\n              <Flex alignItems=\"baseline\">\n                <TextHeadingTwo mr={2}>{data.name}</TextHeadingTwo>\n                <Text fontFamily=\"Source Code Pro\" fontSize={0} lineHeight={1}>\n                  {data.alias}\n                </Text>\n              </Flex>\n              <Text fontSize={1} lineHeight={1}>\n                {data.description}\n              </Text>\n            </Box>\n          </MasterDetailsHeaderLayoutLeft>\n          <MasterDetailsHeaderLayoutRight>\n            {hasListWritePermission && (\n              <>\n                <AlertButton\n                  onClick={() =>\n                    openDeleteCustomListModal({ alias: alias, name: data.name })\n                  }\n                >\n                  Delete List\n                </AlertButton>\n                <SecondaryButton\n                  onClick={() =>\n                    openEditListModal({ mode: FormMode.Edit, ...data })\n                  }\n                >\n                  Edit List\n                </SecondaryButton>\n              </>\n            )}\n          </MasterDetailsHeaderLayoutRight>\n        </MasterDetailsHeaderLayout>\n      </Panel>\n      <Panel as=\"div\" p={0}>\n        <Grid gridTemplateRows=\"50px 73vh 60px\">\n          <ListsMasterDetailsHeaderContainer\n            name={data.name}\n            searchTerm={searchTerm}\n            setSearchTerm={setSearchTerm}\n            totalCount={data.total_count}\n            handleAddEntry={() => openAddEntryModal(alias)}\n            canAddEntry={hasListWritePermission}\n          />\n          {!loading && (\n            <DataTable<ListItem>\n              items={data.items.map((item) => ({\n                ...item,\n                created_at: stringToDateDisplayValue(item.created_at),\n              }))}\n              itemsToDisplay={['value', 'created_at']}\n              cyTag=\"lists-master-details-values\"\n              onDeleteEntry={(entry) =>\n                openDeleteListEntryModal({\n                  name: entry.value,\n                  id: entry.id,\n                  alias: alias,\n                })\n              }\n              canDeleteEntry={hasListWritePermission}\n              tableHeaders={['Value', 'Created at']}\n            />\n          )}\n          <Box p={3}>\n            <Pagination\n              limit={limit}\n              setLimit={setLimit}\n              skip={skip}\n              setSkip={setSkip}\n              itemCount={data.total_count}\n            />\n          </Box>\n        </Grid>\n        <AddListsEntryContainer paginationVariables={paginationVariables} />\n        <DeleteCustomListContainer />\n        <DeleteListEntryContainer paginationVariables={paginationVariables} />\n        <AddListContainer mode={FormMode.Edit} />\n      </Panel>\n    </Box>\n  );\n};\n\nexport default ListsDetailsContainer;\n","import React from 'react';\nimport { Modals } from 'types/enums/modals';\nimport Section from 'components/Section';\nimport { ParagraphText } from 'components/Text';\nimport InfoModal from 'components/InfoModal';\nimport { RuleExample } from 'features/RulesBuilder/RulesEditor/RulesExample';\n\nconst ListsInfoModalContainer = () => (\n  <InfoModal modalKey={Modals.LIST_INFO} title={`Lists`}>\n    <article>\n      <Section>\n        <ParagraphText>\n          List are sets of values that can be referenced in the rules.\n        </ParagraphText>\n        <ParagraphText>\n          For example, you can define a list of risky countries. Then you can\n          create a rule that will check if a billing address is in one of those\n          countries.\n        </ParagraphText>\n\n        <RuleExample\n          predicate=\":billing_address_country: in @risky_countries\"\n          availableProperties={[\n            {\n              name: 'billing_address_country',\n              type: 'string',\n              description:\n                'The two-letter ISO country code of the billing address\\n',\n            },\n          ]}\n        />\n      </Section>\n    </article>\n  </InfoModal>\n);\n\nexport default ListsInfoModalContainer;\n","import React from 'react';\nimport styled from 'styled-components';\nimport { ModalManagerProvider } from 'contexts/ModalManagerContext';\nimport { MasterDetailLayout } from 'components/Layouts/MasterDetailLayout';\nimport { Route } from 'react-router-dom';\nimport ListsMasterContainer from 'containers/ListsMasterContainer';\nimport ListsDetailsContainer from 'containers/ListsDetailsContainer';\n\nimport { Modals } from 'types/enums/modals';\nimport ListsInfoModalContainer from 'containers/ListsDetailsContainer/ListsInfoModalContainer';\nimport PageHeader from 'components/PageHeader';\n\nconst Container = styled.div`\n  height: calc(100vh - 120px);\n`;\n\nconst Lists: React.FunctionComponent = () => {\n  return (\n    <ModalManagerProvider>\n      <Container>\n        <PageHeader title=\"Lists\" modalKey={Modals.LIST_INFO} />\n        <MasterDetailLayout height=\"100%\">\n          <ListsMasterContainer />\n          <Route path=\"/lists/:alias\" component={ListsDetailsContainer} />\n        </MasterDetailLayout>\n        <ListsInfoModalContainer />\n      </Container>\n    </ModalManagerProvider>\n  );\n};\n\nexport default Lists;\n","import React, { useContext, createContext, useMemo, useState } from 'react';\nimport RulebuilderContent from '../RuleBuilderContent';\n\nexport interface RulesBuilderContext {\n  helpContentKey: string;\n  setHelpContentKey: React.Dispatch<React.SetStateAction<string>>;\n}\n\nexport const RulesBuilderHelpContext = createContext<\n  RulesBuilderContext | undefined\n>(undefined);\n\nexport const RulesBuilderHelpProvider: React.FunctionComponent = ({\n  children,\n}) => {\n  const [helpContentKey, setHelpContentKey] = useState(\n    RulebuilderContent.exampleCombinations.default.helpKey\n  );\n\n  const value = useMemo(() => {\n    return {\n      helpContentKey,\n      setHelpContentKey,\n    };\n  }, [helpContentKey]);\n\n  return (\n    <RulesBuilderHelpContext.Provider value={value}>\n      {children}\n    </RulesBuilderHelpContext.Provider>\n  );\n};\n\nexport const useRulesBuilderHelp = () => {\n  const context = useContext(RulesBuilderHelpContext);\n\n  if (context === undefined) {\n    throw new Error(\n      'useRulesBuilderHelp must be used within a RulesBuilderHelpProvider'\n    );\n  }\n\n  return context;\n};\n","import React, {\n  useContext,\n  createContext,\n  useMemo,\n  useCallback,\n  useState,\n} from 'react';\n\nimport {\n  createEditor,\n  Transforms,\n  Editor,\n  Range,\n  Node,\n  Descendant,\n  Point,\n} from 'slate';\nimport { withReact, ReactEditor } from 'slate-react';\nimport { withHistory, HistoryEditor } from 'slate-history';\n\nexport interface RulesEditorContext {\n  editor: Editor & ReactEditor;\n  insertPredicate: (predicate: string) => void;\n  insertPlaceholder: (length: number) => void;\n  removePlaceholder: () => void;\n  captureSelection: () => void;\n  readOnly: boolean;\n  setReadOnly: React.Dispatch<React.SetStateAction<boolean>>;\n}\n\nexport const RulesBuilderHelpContext = createContext<\n  RulesEditorContext | undefined\n>(undefined);\n\nconst removePlaceholderNodes = (\n  editor: Editor & HistoryEditor & ReactEditor\n) => {\n  const nodes = Editor.nodes(editor, {\n    at: [],\n    match: (n) => n.type === 'Placeholder',\n  });\n\n  for (const node of nodes) {\n    const at = node[1];\n    HistoryEditor.withoutSaving(editor, () => {\n      Transforms.removeNodes(editor, { at });\n    });\n  }\n};\n\nexport const RulesEditorContextProvider: React.FunctionComponent = ({\n  children,\n}) => {\n  const [selection, setSelection] = useState<Range | null>(null);\n  const [fragment, setFragment] = useState<Descendant[] | null>(null);\n  const [readOnly, setReadOnly] = useState(false);\n\n  const editor = useMemo(() => withReact(withHistory(createEditor())), []);\n\n  const captureSelection = useCallback(() => {\n    setSelection(editor.selection);\n    editor.selection && setFragment(Node.fragment(editor, editor.selection));\n  }, [editor]);\n\n  const restoreSelection = useCallback(() => {\n    const editorEnd = Editor.end(editor, []);\n\n    if (selection) {\n      const isOutsideEditorRange = Point.isAfter(\n        Range.end(selection),\n        editorEnd\n      );\n      if (isOutsideEditorRange) {\n        Transforms.select(editor, editorEnd);\n      } else {\n        Transforms.select(editor, selection);\n      }\n    } else {\n      Transforms.select(editor, editorEnd);\n    }\n  }, [editor, selection]);\n\n  const removePlaceholder = useCallback(() => {\n    removePlaceholderNodes(editor);\n    HistoryEditor.withoutSaving(editor, () => {\n      fragment && Transforms.insertFragment(editor, fragment);\n    });\n    restoreSelection();\n  }, [editor, fragment, restoreSelection]);\n\n  const insertPredicate = useCallback(\n    (predicate: string) => {\n      removePlaceholderNodes(editor);\n\n      HistoryEditor.withoutSaving(editor, () => {\n        fragment && Transforms.insertFragment(editor, fragment);\n      });\n\n      ReactEditor.focus(editor);\n\n      restoreSelection();\n\n      Transforms.insertText(editor, predicate);\n\n      Transforms.collapse(editor, { edge: 'end' });\n\n      captureSelection();\n\n      setFragment(null);\n    },\n    [captureSelection, editor, fragment, restoreSelection]\n  );\n\n  const insertPlaceholder = useCallback(\n    (length: number) => {\n      const placeholderPredicate = ' '.repeat(length);\n\n      ReactEditor.focus(editor);\n\n      HistoryEditor.withoutSaving(editor, () => {\n        Transforms.insertNodes(editor, {\n          type: 'Placeholder',\n          text: placeholderPredicate,\n        });\n      });\n    },\n    [editor]\n  );\n\n  const value = useMemo(() => {\n    return {\n      editor,\n      insertPredicate,\n      insertPlaceholder,\n      removePlaceholder,\n      captureSelection,\n      readOnly,\n      setReadOnly,\n    };\n  }, [\n    captureSelection,\n    editor,\n    insertPlaceholder,\n    insertPredicate,\n    readOnly,\n    removePlaceholder,\n  ]);\n\n  return (\n    <RulesBuilderHelpContext.Provider value={value}>\n      {children}\n    </RulesBuilderHelpContext.Provider>\n  );\n};\n\nexport const useRulesEditor = () => {\n  const context = useContext(RulesBuilderHelpContext);\n\n  if (context === undefined) {\n    throw new Error(\n      'useRulesEditor must be used within a RulesEditorContextProvider'\n    );\n  }\n\n  return context;\n};\n","import {\n  createValidator,\n  required,\n  maxLength,\n  regexMatch,\n} from 'utils/validator';\nimport endpoints from 'api/endpoints';\nimport useGetRequest from 'hooks/api/common/useGetRequest';\nimport useMlScoreEnabled from 'hooks/useMlScoreEnabled';\nimport { ValidateRuleResponse } from 'types/models';\n\nconst errorCodeMap: Record<number, string> = {\n  1000: 'Unexpected end of expression',\n  5000: 'Unknown token',\n  6000: 'Unexpected type',\n  6001: 'Type mismatch',\n  6002: 'Expected type of number',\n  6003: 'Expected type of string',\n  6004: 'Expected type of list',\n  6005: 'Expected type of boolean',\n  7000: 'Non-existent property',\n  9000: 'Invalid predicate',\n};\n\nconst getErrorMessage = (\n  errorCode: typeof errorCodeMap,\n  sourceText: string\n) => {\n  return `Error: ${errorCode},  The following text is invalid: ${sourceText}, please make sure that your rule is valid. `;\n};\n\nexport const useRuleEvaluator = () => {\n  const get = useGetRequest<ValidateRuleResponse>();\n\n  const evaluateRule = async (rule: string) => {\n    try {\n      const result = await get(`${endpoints.rules}/is-valid`, {\n        params: { predicate: rule },\n      });\n\n      const { is_valid, errors } = result;\n\n      if (is_valid) {\n        return null;\n      }\n\n      if (errors?.length) {\n        const errorMessage = getErrorMessage(\n          errorCodeMap[errors[0].error_code],\n          errors[0].source_context.offending_text\n        );\n\n        return errorMessage;\n      }\n\n      return 'Rule could not be validated';\n    } catch {\n      return 'Rule could not be validated';\n    }\n  };\n\n  return evaluateRule;\n};\n\nconst nameValidators = [required('Name is required'), maxLength(100)];\n\nconst useRuleValidator = () => {\n  const evaluateRule = useRuleEvaluator();\n\n  const isExpressionValid = () => {\n    return async (value: string) => {\n      const error = await evaluateRule(value);\n\n      return error;\n    };\n  };\n\n  const mlScoreEnabled = useMlScoreEnabled();\n\n  const mlScoreEnabledValidation = createValidator({\n    name: nameValidators,\n    predicate: [required('Rule is required'), isExpressionValid()],\n  });\n\n  const mlScoreDisabledValidation = createValidator({\n    name: nameValidators,\n    predicate: [\n      required('Rule is required'),\n      regexMatch(\n        /:score:/,\n        'CKO model score is not available to you at the moment. Please contact your customer support manager for details'\n      ),\n      isExpressionValid(),\n    ],\n  });\n\n  return mlScoreEnabled ? mlScoreEnabledValidation : mlScoreDisabledValidation;\n};\n\nexport default useRuleValidator;\n","import React, { useContext, createContext, useMemo, useState } from 'react';\nimport { useAvailablePropertiesData } from 'hooks/api/rules';\nimport { useListsData } from 'hooks/api/lists';\nimport {\n  AvailableProperty,\n  ListSummary,\n  ScoringRuleFormData,\n} from 'types/models';\nimport { Flex } from '@cko/primitives';\nimport Loader from 'components/Loader';\nimport useMlScoreEnabled from 'hooks/useMlScoreEnabled';\nimport { RulesBuilderHelpProvider } from '../RulesBuilderHelpContext';\nimport { RulesEditorContextProvider } from '../RulesEditorContext';\nimport { AddRuleResponse } from 'hooks/api/rules/useAddRule';\nimport { Formik } from 'formik';\nimport useRuleValidator from '../RulesBuilderForm/useRuleValidator';\nimport { ScrollSpyProvider } from 'hooks/useScrollSpy';\n\ninterface IRulesBuilderContext {\n  availableProperties: AvailableProperty[];\n  availableLists: ListSummary[];\n  submissionError: string | null;\n  setSubmissionError: React.Dispatch<React.SetStateAction<string | null>>;\n}\n\nexport const RulesBuilderContext = createContext<\n  IRulesBuilderContext | undefined\n>(undefined);\n\ninterface Props {\n  initalFormValues: {\n    name: string;\n    predicate: string;\n  };\n  handleSubmit: (\n    values: ScoringRuleFormData\n  ) => Promise<AddRuleResponse | undefined>;\n}\n\nexport const RulesBuilderProvider: React.FunctionComponent<Props> = ({\n  children,\n  initalFormValues,\n  handleSubmit,\n}) => {\n  const {\n    data: rulesData,\n    status: availablePropertiesStatus,\n  } = useAvailablePropertiesData();\n\n  const enabledSelectedMerchantMlScore = useMlScoreEnabled();\n\n  const { data: listsData, status: listsStatus } = useListsData();\n\n  const loading = useMemo(\n    () => availablePropertiesStatus === 'loading' || listsStatus === 'loading',\n    [availablePropertiesStatus, listsStatus]\n  );\n\n  const [submissionError, setSubmissionError] = useState<string | null>(null);\n\n  const ruleValidator = useRuleValidator();\n\n  const value = useMemo(() => {\n    const availableProperties = rulesData?.properties ?? [];\n    const availableLists = listsData?.summaries ?? [];\n    return {\n      availableProperties: enabledSelectedMerchantMlScore\n        ? availableProperties\n        : availableProperties.filter((availableProperty) => {\n            return availableProperty.name !== 'score';\n          }),\n      availableLists,\n      submissionError,\n      setSubmissionError,\n    };\n  }, [rulesData, listsData, submissionError, enabledSelectedMerchantMlScore]);\n\n  if (loading) {\n    return (\n      <Flex justifyContent=\"center\" height=\"70vh\">\n        <Loader size=\"large\" />\n      </Flex>\n    );\n  }\n\n  return (\n    <RulesBuilderContext.Provider value={value}>\n      <RulesBuilderHelpProvider>\n        <RulesEditorContextProvider>\n          <ScrollSpyProvider\n            keys={['examples', 'properties', 'operators', 'velocities']}\n          >\n            <Formik\n              initialValues={initalFormValues}\n              onSubmit={async (values, actions) => {\n                try {\n                  setSubmissionError(null);\n                  await handleSubmit(values);\n                } catch (e) {\n                  if (e.response?.status === 409) {\n                    setSubmissionError(\n                      ` A rule named \"${values.name}\" already exists.`\n                    );\n                  } else {\n                    setSubmissionError(\n                      'Technical error. Please try again later.'\n                    );\n                  }\n                } finally {\n                  actions.setSubmitting(false);\n                }\n              }}\n              validate={ruleValidator}\n              validateOnChange={false}\n            >\n              {children}\n            </Formik>\n          </ScrollSpyProvider>\n        </RulesEditorContextProvider>\n      </RulesBuilderHelpProvider>\n    </RulesBuilderContext.Provider>\n  );\n};\n\nexport const useRulesBuilder = () => {\n  const context = useContext(RulesBuilderContext);\n\n  if (context === undefined) {\n    throw new Error(\n      'useRuleBuilder must be used within a RulesBuilderProvider'\n    );\n  }\n\n  return context;\n};\n","import exampleCombinations from './example-combinations';\nimport availableProperties from './available-properties';\nimport operators from './operators';\nimport editor from './editor';\nimport velocityWizard from './velocity-wizard';\n\nconst content = {\n  exampleCombinations,\n  availableProperties,\n  operators,\n  editor,\n  velocityWizard,\n};\n\nexport default content;\n","const exampleCombinations = {\n  default: {\n    predicate: null,\n    content: [\n      'These are some common rules that many businesses have found useful to include in their routing.',\n      'Clicking on one will insert the whole combination, and you can then update anything you wish to personalise for your needs.',\n      'Rollover a combination to see a description of what the rule will do.',\n    ],\n    type: 'exampleCombinations',\n    helpKey: 'exampleCombinations.default',\n  },\n  amountAndCurrency: {\n    ':amount: > x': {\n      predicate: ':amount: > x',\n      content: ['Amount in transaction currency greater than X'],\n      type: 'exampleCombinations',\n      helpKey: 'exampleCombinations.amountAndCurrency.:amount: > x',\n    },\n    ':amount: < x and :amount: > y': {\n      predicate: ':amount: < x and :amount: > y',\n      content: ['Amount in transaction currency between Y and X'],\n      type: 'exampleCombinations',\n      helpKey:\n        'exampleCombinations.amountAndCurrency.:amount: < x and :amount: > y',\n    },\n    ':amount_in_usd:  > x': {\n      predicate: ':amount_in_usd:  > x',\n      content: ['Amount as converted in USD is greater than X'],\n      type: 'exampleCombinations',\n      helpKey: 'exampleCombinations.amountAndCurrency.:amount_in_usd:  > x',\n    },\n    \":currency: in 'GBP','USD','EUR'\": {\n      predicate: \":currency: in ['GBP','USD','EUR']\",\n      content: [\n        'Transaction currency is in the following list : GBP, USD, EUR. ',\n        'Attention: currencies should always be defined by their 3 character ISO codes. E.g. GBP, USD, EUR ',\n        'Note: in most cases it is better to use Lists functionality as it allows you to reuse the same list in multiple rules without having to retype all the options. Refer to the Lists section to learn more about how lists work.',\n      ],\n      type: 'exampleCombinations',\n      helpKey:\n        \"exampleCombinations.amountAndCurrency.:currency: in 'GBP','USD','EUR'\",\n    },\n  },\n  fraudScoreAndReference: {\n    ':score: < x and :score: > y': {\n      predicate: ':score: < x and :score: > y',\n      content: [\n        'The Checkout.com fraud score is between Y and X. This score is calculated by our machine learning model, trained on the payment data across customers, geographies and industries.',\n      ],\n      type: 'exampleCombinations',\n      helpKey:\n        'exampleCombinations.fraudScoreAndReference.:score: < x and :score: > y',\n    },\n    ':reference: in @default_references_list': {\n      predicate: ':reference: in @default_references_list',\n      content: [\n        \"A user-created list called 'Default references list' contains this payment's reference. Refer to the Lists section to learn more about how lists work.\",\n      ],\n      type: 'exampleCombinations',\n      helpKey:\n        'exampleCombinations.fraudScoreAndReference.:reference: in @default_references_list',\n    },\n    \":description: contains 'AAA'\": {\n      predicate: \":description: contains 'AAA'\",\n      content: ['Check payment description field for specific text'],\n      type: 'exampleCombinations',\n      helpKey:\n        \"exampleCombinations.fraudScoreAndReference.:description: contains 'AAA'\",\n    },\n  },\n  addresses: {\n    \":billing_address_city: = 'Default city'\": {\n      predicate: \":billing_address_city: = 'Default city'\",\n      content: [\n        \"The city in the billing address is 'Default city'. \\nAttention: this rule expects exact match in the way the city is filled in for the payment request. City 1 doesn't equal City1 or City One.\",\n      ],\n      type: 'exampleCombinations',\n      helpKey:\n        \"exampleCombinations.addresses.:billing_address_city: = 'Default city'\",\n    },\n    \"not :billing_address_city: = 'Default city'\": {\n      predicate: \"not :billing_address_city: = 'Default city'\",\n      content: [\n        \"The city in the billing address is NOT 'Default city'. Attention: this rule expects exact match in the way the city is filled in for the payment request. City 1 doesn't equal City1 or City One.\",\n      ],\n      type: 'exampleCombinations',\n      helpKey:\n        \"exampleCombinations.addresses.not :billing_address_city: = 'Default city'\",\n    },\n    ':billing_address_country: != :payment_ip_country:': {\n      predicate: ':billing_address_country: != :payment_ip_country:',\n      content: [\n        \"The billing address country is different from the customer's IP country.\",\n      ],\n      type: 'exampleCombinations',\n      helpKey:\n        'exampleCombinations.addresses.:billing_address_country: != :payment_ip_country:',\n    },\n    ':billing_address_country: != :phone_country:': {\n      predicate: ':billing_address_country: != :phone_country:',\n      content: [\n        \"The billing address country is different from the country code of the customer's mobile number.\",\n      ],\n      type: 'exampleCombinations',\n      helpKey:\n        'exampleCombinations.addresses.:billing_address_country: != :phone_country:',\n    },\n    'is_missing :billing_address_city: or is_missing :shipping_address_city:': {\n      predicate:\n        'is_missing :billing_address_city: or is_missing :shipping_address_city:',\n      content: [\n        'Either billing address city or shipping address city is missing',\n      ],\n      type: 'exampleCombinations',\n      helpKey:\n        'exampleCombinations.addresses.is_missing :billing_address_city: or is_missing :shipping_address_city:',\n    },\n    ':shipping_address_line1: = :billing_address_line1:': {\n      predicate: ':shipping_address_line1: = :billing_address_line1:',\n      content: [\n        'The address line 1 is the same in billing and shipping address',\n      ],\n      type: 'exampleCombinations',\n      helpKey:\n        'exampleCombinations.addresses.:shipping_address_line1: = :billing_address_line1:',\n    },\n    ':shipping_address_line1: = :billing_address_line1: and :billing_address_is_valid: and :shipping_address_is_valid:': {\n      predicate:\n        ':shipping_address_line1: = :billing_address_line1: and :billing_address_is_valid: and :shipping_address_is_valid:',\n      content: [\n        'The address line 1 is the same in billing and shipping address. And both of these addresses can be confirmed to be valid. ',\n        'Note: we use a catalogue of addresses to check entries against. That catalogue has the best address coverage for North America and Western Europe but might miss some valid addresses for other countries.',\n      ],\n      type: 'exampleCombinations',\n      helpKey:\n        'exampleCombinations.addresses.:shipping_address_line1: = :billing_address_line1: and :billing_address_is_valid: and :shipping_address_is_valid:',\n    },\n    ':billing_address_city: in @custom_list': {\n      predicate: ':billing_address_city: in @custom_list',\n      content: [\n        \"The billing address city is in the list called 'Custom list'. Refer to the Lists section to learn more about how lists work. \",\n        'Attention: the check performed against any list expects 100% match on spelling.',\n      ],\n      type: 'exampleCombinations',\n      helpKey:\n        'exampleCombinations.addresses.:billing_address_city: in @custom_list',\n    },\n    'not :billing_address_city: in @custom_list': {\n      predicate: 'not :billing_address_city: in @custom_list',\n      content: [\n        \"The billing address city can not be found in the 'Custom list'. Refer to the Lists section to learn more about how lists work.\",\n        'Attention: the check performed against any list expects 100% match on spelling.',\n      ],\n      type: 'exampleCombinations',\n      helpKey:\n        'exampleCombinations.addresses.not :billing_address_city: in @custom_list',\n    },\n    \":billing_address_country: = 'XX'\": {\n      predicate: \":billing_address_country: = 'XX'\",\n      content: [\n        'Billing Address country is XX.',\n        'Attention: countries in address fields are defined by 2 character ISO codes. E.g. GB, FR, US',\n      ],\n      type: 'exampleCombinations',\n      helpKey: \"exampleCombinations.addresses.:billing_address_country: = 'XX'\",\n    },\n    \":billing_address_postal_code: = '12345'\": {\n      predicate: \":billing_address_postal_code: = '12345'\",\n      content: ['Billing address postal code is 12345'],\n      type: 'exampleCombinations',\n      helpKey:\n        \"exampleCombinations.addresses.:billing_address_postal_code: = '12345'\",\n    },\n    \":billing_address_line1: = 'Avenue X'\": {\n      predicate: \":billing_address_line1: = 'Avenue X'\",\n      content: ['Line one of the billing address is Avenue X'],\n      type: 'exampleCombinations',\n      helpKey:\n        \"exampleCombinations.addresses.:billing_address_line1: = 'Avenue X'\",\n    },\n    \":billing_address_line2: contains 'XYZ'\": {\n      predicate: \":billing_address_line2: contains 'XYZ'\",\n      content: ['Second line of the billing address contains XYZ'],\n      type: 'exampleCombinations',\n      helpKey:\n        \"exampleCombinations.addresses.:billing_address_line2: contains 'XYZ'\",\n    },\n    ':payment_ip: = 1111111111': {\n      predicate: \":payment_ip: = '111.111.111.1'\",\n      content: ['Customer IP is \"111.111.111.1\"'],\n      type: 'exampleCombinations',\n      helpKey: 'exampleCombinations.addresses.:payment_ip: = 1111111111',\n    },\n  },\n  cardDetails: {\n    \":bin: = '123456'\": {\n      predicate: \":bin: = '123456'\",\n      content: ['Card bin is 123456'],\n      type: 'exampleCombinations',\n      helpKey: \"exampleCombinations.:bin: = '123456'\",\n    },\n    ':bin: in @risky_bin_list': {\n      predicate: ':bin: in @risky_bin_list',\n      content: [\n        \"Card bin is in the list called 'risky bin list'. Refer to the Lists section to learn more about how lists work.\",\n      ],\n      type: 'exampleCombinations',\n      helpKey: 'exampleCombinations.cardDetails.:bin: in @risky_bin_list',\n    },\n    'not :bin: in @trusted_bin_list': {\n      predicate: 'not :bin: in @trusted_bin_list',\n      content: [\n        \"Card bin is NOT in the list called 'trusted bin list'.\\nRefer to the Lists section to learn more about how lists work.\",\n      ],\n      type: 'exampleCombinations',\n      helpKey: 'exampleCombinations.cardDetails.not :bin: in @trusted_bin_list',\n    },\n    \":card_brand: = 'VISA' or :card_brand: = 'MASTERCARD'\": {\n      predicate: \":card_brand: = 'VISA' or :card_brand: = 'MASTERCARD'\",\n      content: ['Card brand is either Visa or Mastercard'],\n      type: 'exampleCombinations',\n      helpKey:\n        \"exampleCombinations.cardDetails.:card_brand: = 'VISA' or :card_brand: = 'MASTERCARD'\",\n    },\n    \":card_brand: contains 'AME'\": {\n      predicate: \":card_brand: contains 'AME'\",\n      content: [\"Card brand contains 'AME'\"],\n      type: 'exampleCombinations',\n      helpKey: \"exampleCombinations.cardDetails.:card_brand: contains 'AME'\",\n    },\n    \":card_country: = 'XX'\": {\n      predicate: \":card_country: = 'XX'\",\n      content: [\n        'Card country is XX. Card country is derived from the bin. ',\n        'Attention: countries in address fields are defined by 2 character ISO codes. E.g. GB, FR, US',\n      ],\n      type: 'exampleCombinations',\n      helpKey: \"exampleCombinations.cardDetails.:card_country: = 'XX'\",\n    },\n    \":card_type: = 'Credit'\": {\n      predicate: \":card_type: = 'Credit'\",\n      content: [\"Card type is 'Credit'. As opposed to 'Debit'\"],\n      type: 'exampleCombinations',\n      helpKey: \"exampleCombinations.cardDetails.:card_type: = 'Credit'\",\n    },\n  },\n  cardholderDetails: {\n    \":cardholder_name: contains 'AAA'\": {\n      predicate: \":cardholder_name: contains 'AAA'\",\n      content: ['Cardholder name contains AAA'],\n      type: 'exampleCombinations',\n      helpKey:\n        \"exampleCombinations.cardholderDetails.:cardholder_name: contains 'AAA'\",\n    },\n    ':cardholder_name: in @trusted_customers': {\n      predicate: ':cardholder_name: in @trusted_customers',\n      content: [\n        \"Cardholder name is in the list called 'trusted customers'. Refer to the Lists section to learn more about how lists work.\",\n      ],\n      type: 'exampleCombinations',\n      helpKey:\n        'exampleCombinations.cardholderDetails.:cardholder_name: in @trusted_customers',\n    },\n    'exists :cardholder_name:': {\n      predicate: 'exists :cardholder_name:',\n      content: [''],\n      type: 'exampleCombinations',\n      helpKey: 'exampleCombinations.cardholderDetails.exists :cardholder_name:',\n    },\n    \":email: contains 'fraudster'\": {\n      predicate: \":email: contains 'fraudster'\",\n      content: [\"Email address contains 'fraudster'\"],\n      type: 'exampleCombinations',\n      helpKey:\n        \"exampleCombinations.cardholderDetails.:email: contains 'fraudster'\",\n    },\n    ':email_is_valid:': {\n      predicate: ':email_is_valid:',\n      content: [\n        'Email address is formatted correctly. Attention: the existence or age of the e-mail address are not verified.',\n      ],\n      type: 'exampleCombinations',\n      helpKey: 'exampleCombinations.cardholderDetails.:email_is_valid:',\n    },\n    \":email_domain: = 'fraudsters.com'\": {\n      predicate: \":email_domain: = 'fraudsters.com'\",\n      content: ['Email domain is fraudsters.com'],\n      type: 'exampleCombinations',\n      helpKey:\n        \"exampleCombinations.cardholderDetails.:email_domain: = 'fraudsters.com'\",\n    },\n    ':phone: in @returning_customers': {\n      predicate: ':phone: in @returning_customers',\n      content: [\"The phone number is in the list called 'returning customers'\"],\n      type: 'exampleCombinations',\n      helpKey:\n        'exampleCombinations.cardholderDetails.:phone: in @returning_customers',\n    },\n  },\n  verficationResults: {\n    ':is_3ds_authenticated:': {\n      predicate: ':is_3ds_authenticated:',\n      content: [\n        'The payment has been authenticated via 3DS. ',\n        'Attention: this rule will not be efficient if used at Pre3DS step, since this step by its very definition is applied before any 3DS check is performed.',\n      ],\n      type: 'exampleCombinations',\n      helpKey: 'exampleCombinations.verficationResults.:is_3ds_authenticated:',\n    },\n    ':has_liability_shift:': {\n      predicate: ':has_liability_shift:',\n      content: [\n        'The payment is subject to the liability shift. ',\n        'Attention: this assessement does not account for potential penalties from card schemes that might result in suspension of liability shift protection. If you are subject to such penalties you might not be subject to the liability shift even if the payment has passed 3DS authentication.',\n      ],\n      type: 'exampleCombinations',\n      helpKey: 'exampleCombinations.verficationResults.:has_liability_shift:',\n    },\n    \":avs_code: = 'A'\": {\n      predicate: \":avs_code: = 'A'\",\n      content: [\n        'AVS code response is A. ',\n        'Possible AVS code values:\\nA        AMEX, MC, Visa        Street address matches, ZIP code does not match.\\nB        Visa                            Street address matches. ZIP code not verified (incorrect format).\\nC        Visa                            Street address and ZIP code not verified (incorrect format).\\nD        Visa                            Street address and ZIP code match.\\nF        Visa                             Street address and ZIP code match. Applies to UK-issued cards.\\nG       Visa                             Not verified or not supported.\\nI         Visa                             Street address and ZIP code not verified.\\nM        Visa                            Street address and ZIP code match.\\nN        AMEX, MC, Visa.        Street address and ZIP code do not match.\\nP        Visa                             ZIP code matches. Street address not verified (incorrect format).\\nR        AMEX, MC, Visa        Service unavailable.\\nS        AMEX, MC                 Not supported.\\nU        AMEX, MC, Visa        Address not verified due to lack of issuer support or system malfunction.\\nW        MC                            ZIP code matches, street address does not match.\\nX         MC                            ZIP code and address match.\\nY        AMEX, MC, Visa        Cardholder street address and ZIP code match.\\nZ        AMEX, MC, Visa        ZIP code matches.\\nAE1        AMEX                   Cardholder name incorrect but ZIP code matches.\\nAE2        AMEX                   Cardholder name incorrect, but street and ZIP code match.\\nAE3        AMEX                   Cardholder name incorrect, but street matches.\\nAE4        AMEX                   Cardholder name matches.\\nAE5        AMEX                   Cardholder name and ZIP code match.\\nAE6        AMEX                   Cardholder name, street, and ZIP code match.\\nAE7        AMEX                   Cardholder name and street match.\\nAE8        AMEX                   Cardholder name, street and ZIP code do not match.',\n        '\\nAttention: this rule will only be efficient if used at the PostAUTH step, since AVS check results will never be available at the earlier steps.',\n      ],\n      type: 'exampleCombinations',\n      helpKey: \"exampleCombinations.verficationResults.:avs_code: = 'A'\",\n    },\n  },\n  velocity: {\n    ':nb_charge_approved_per_card_24h:  > X': {\n      predicate: ':nb_charge_approved_per_card_24h:  > X',\n      content: [\n        'Number of approved transactions for this card in the last 24 hours is greater than X',\n      ],\n      type: 'exampleCombinations',\n      helpKey: 'exampleCombinations.:nb_charge_approved_per_card_24h:  > X',\n    },\n    ':nb_charge_attempted_per_billing_address_7days: > X': {\n      predicate: ':nb_charge_attempted_per_billing_address_7days: > X',\n      content: [\n        'Number of approved transactions for this billing address in the last 7 days  is greater than X',\n      ],\n      type: 'exampleCombinations',\n      helpKey:\n        'exampleCombinations.:nb_charge_attempted_per_billing_address_7days: > X',\n    },\n    ':nb_charge_approved_per_ip_24h: > X': {\n      predicate: ':nb_charge_approved_per_ip_24h: > X',\n      content: [\n        'Number of approved transactions for this billing address in the last 24 hours is greater than X',\n      ],\n      type: 'exampleCombinations',\n      helpKey: 'exampleCombinations.:nb_charge_approved_per_ip_24h: > X',\n    },\n    ':nb_charge_attempted_per_ip_24h: > X': {\n      predicate: ':nb_charge_attempted_per_ip_24h: > X',\n      content: [\n        'Number of attempted (approved + declined) transactions for this billing address in the last 24 hours is greater than X',\n      ],\n      type: 'exampleCombinations',\n      helpKey: 'exampleCombinations.:nb_charge_attempted_per_ip_24h: > X',\n    },\n    ':nb_charge_approved_per_cardholder_name_30days: > X': {\n      predicate: ':nb_charge_approved_per_cardholder_name_30days: > X',\n      content: [\n        'Number of approved transactions for this cardholder name in the 30 days is greater than X',\n      ],\n      type: 'exampleCombinations',\n      helpKey:\n        'exampleCombinations.:nb_charge_approved_per_cardholder_name_30days: > X',\n    },\n  },\n};\n\nexport default exampleCombinations;\n","const availableProperties = {\n  default: {\n    predicate: null,\n    content: [\n      'Are predefined by us and allow you to reference parts of the transaction data in your rule.',\n      'Attributes can be used by surrounding a word with colons, such as :score:',\n      'Attributes can be either a number, string (text) or boolean (true or false).',\n      'Attention: not all attributes are mandatory in the payment request. Before creating a rule based on an attribute make sure you provide the relevant data when submitting a payment request to checkout.com.',\n    ],\n    type: 'availableProperties',\n    helpKey: 'availableProperties.default',\n  },\n  amountAndCurrency: {\n    ':amount:': {\n      predicate: ':amount:',\n      content: [\n        'The transaction amount in transaction currency',\n        'This attribute is mandatory and will always be present in an accepted payment request.',\n        'This is a numeric value and supports such operators as \" < \" and \" > \"',\n      ],\n      type: 'availableProperties',\n      helpKey: 'availableProperties.amountAndCurrency.:amount:',\n    },\n    ':amount_in_usd:': {\n      predicate: ':amount_in_usd:',\n      content: [\n        'The transaction amount as converted to USD.',\n        'This attribute is mandatory and will always be present in an accepted payment request.',\n        'This is a numeric value and supports such operators as \"<\" and \">\"',\n      ],\n      type: 'availableProperties',\n      helpKey: 'availableProperties.amountAndCurrency.:amount_in_usd:',\n    },\n    ':currency:': {\n      predicate: ':currency:',\n      content: [\n        'The currency used for the payment.',\n        'This attribute is mandatory and will always be present in an accepted payment request.',\n        'Attention: currencies are defined by their 3 character ISO codes. When creating rules referencing specific currencies use the format like \"GBP\", \"USD\", \"EUR\", etc',\n      ],\n      type: 'availableProperties',\n      helpKey: 'availableProperties.amountAndCurrency.:currency:',\n    },\n  },\n  fraudScoreAndReference: {\n    ':score:': {\n      predicate: ':score:',\n      content: [\n        \"Score assigned by checkout.com's machine learning model.\",\n        'This can range from 0-100.',\n        'Example: 25',\n      ],\n      type: 'availableProperties',\n      helpKey: 'availableProperties.fraudScoreAndReference.:score:',\n    },\n    ':reference:': {\n      predicate: ':reference:',\n      content: ['The payment reference provided.', 'Example: ORD-5023-4E89'],\n      type: 'availableProperties',\n      helpKey: 'availableProperties.fraudScoreAndReference.:reference:',\n    },\n    ':description:': {\n      predicate: ':description:',\n      content: [\n        'The description provided with the payment request.',\n        'Example: Set of 3 masks',\n      ],\n      type: 'availableProperties',\n      helpKey: 'availableProperties.fraudScoreAndReference.:description:',\n    },\n  },\n  addresses: {\n    ':billing_address_city:': {\n      predicate: ':billing_address_city:',\n      content: ['The billing address city provided.', 'Example: London'],\n      type: 'availableProperties',\n      helpKey: 'availableProperties.addresses.:billing_address_city:',\n    },\n    ':billing_address_country:': {\n      predicate: ':billing_address_country:',\n      content: [\n        'Returns the billing address country.',\n        'Attention: countries in this field are defined by 2 character ISO codes. E.g. \"GB\", \"FR\", \"US\"',\n      ],\n      type: 'availableProperties',\n      helpKey: 'availableProperties.addresses.:billing_address_country:',\n    },\n    ':billing_address_line1:': {\n      predicate: ':billing_address_line1:',\n      content: [\n        'The first line of the billing address.',\n        'Attention: The values are not validated and are taken as is from the payment request. When used in a rule the exact value match is expected for the rule to be triggered.',\n        'Example: Flat 1, Checkout.com',\n      ],\n      type: 'availableProperties',\n      helpKey: 'availableProperties.addresses.:billing_address_line1:',\n    },\n    ':billing_address_line2:': {\n      predicate: ':billing_address_line2:',\n      content: [\n        'The second line of the billing address.',\n        'Attention: The values are not validated and are taken as is from the payment request. When used in a rule the exact value match is expected for the rule to be triggered.',\n        'Example: 90 Tottenham Court Road',\n      ],\n      type: 'availableProperties',\n      helpKey: 'availableProperties.addresses.:billing_address_line2:',\n    },\n    ':billing_address_postal_code:': {\n      predicate: ':billing_address_postal_code:',\n      content: [\n        'The post code of the billing address.',\n        'Attention: The values are not validated and are taken as is from the payment request. When used in a rule the exact value match is expected for the rule to be triggered.',\n        'Example: 90 Tottenham Court Road',\n      ],\n      type: 'availableProperties',\n      helpKey: 'availableProperties.addresses.:billing_address_postal_code:',\n    },\n    ':billing_address_is_valid:': {\n      predicate: ':billing_address_is_valid:',\n      content: [\n        'The billing address is deemed to be a real existing address.',\n        'A check of the address provided is performed against a global list.',\n        'The reliability of this check depends on the region. This is a boolean value that can only be either TRUE or FALSE.',\n      ],\n      type: 'availableProperties',\n      helpKey: 'availableProperties.addresses.:billing_address_is_valid:',\n    },\n    ':shipping_address_city:': {\n      predicate: ':shipping_address_city:',\n      content: ['The shipping address city provided.', 'Example: London'],\n      type: 'availableProperties',\n      helpKey: 'availableProperties.addresses.:shipping_address_city:',\n    },\n    ':shipping_address_country:': {\n      predicate: ':shipping_address_country:',\n      content: [\n        'Returns the shipping address country',\n        'Attention: countries in this field are defined by 2 character ISO codes. E.g. \"GB\", \"FR\", \"US\"',\n      ],\n      type: 'availableProperties',\n      helpKey: 'availableProperties.addresses.:shipping_address_country:',\n    },\n\n    ':shipping_address_line1:': {\n      predicate: ':shipping_address_line1:',\n      content: [\n        'The first line of the billing address.',\n        'Attention: The values are not validated and are taken as is from the payment request. When used in a rule the exact value match is expected for the rule to be triggered.',\n        'Example: Flat 1, Checkout.com',\n      ],\n      type: 'availableProperties',\n      helpKey: 'availableProperties.addresses.:shipping_address_line1:',\n    },\n    ':shipping_address_line2:': {\n      predicate: ':shipping_address_line2:',\n      content: [\n        'The second line of the billing address.',\n        'Attention: The values are not validated and are taken as is from the payment request. When used in a rule the exact value match is expected for the rule to be triggered.',\n        'Example: 90 Tottenham Court Road',\n      ],\n      type: 'availableProperties',\n      helpKey: 'availableProperties.addresses.:shipping_address_line2:',\n    },\n    ':shipping_address_postal_code:': {\n      predicate: ':shipping_address_postal_code:',\n      content: [\n        'The second line of the billing address.',\n        'Attention: The values are not validated and are taken as is from the payment request. When used in a rule the exact value match is expected for the rule to be triggered.',\n        'Example: 90 Tottenham Court Road',\n      ],\n      type: 'availableProperties',\n      helpKey: 'availableProperties.addresses.:shipping_address_postal_code:',\n    },\n    ':shipping_address_is_valid:': {\n      predicate: ':shipping_address_is_valid:',\n      content: [\n        'The shipping address is deemed to be a real existing address.',\n        'A check of the address provided is performed against a global list.',\n        ' The reliability of this check depends on the region.',\n        'This is a boolean value that can only be either TRUE or FALSE.',\n      ],\n      type: 'availableProperties',\n      helpKey: 'availableProperties.addresses.:shipping_address_is_valid:',\n    },\n    ':payment_ip:': {\n      predicate: ':payment_ip:',\n      content: [\n        'The IP address used to make the payment.',\n        'Example: 168.16.10.2',\n      ],\n      type: 'availableProperties',\n      helpKey: 'availableProperties.addresses.:payment_ip:',\n    },\n    ':payment_ip_country:': {\n      predicate: ':payment_ip_country:',\n      content: [\n        \"The country as derived from payer's IP.\",\n        'Attention: countries in this field are defined by 2 character ISO codes. E.g. \"GB\", \"FR\", \"US\"',\n      ],\n      type: 'availableProperties',\n      helpKey: 'availableProperties.addresses.:payment_ip_country:',\n    },\n  },\n  cardDetails: {\n    ':card_country:': {\n      predicate: ':card_country:',\n      content: [\n        'Returns the country where the card was issued as derived from the card bin.',\n        'Attention: countries in this field are defined by 2 character ISO codes. E.g. \"GB\", \"FR\", \"US\"',\n      ],\n      type: 'availableProperties',\n      helpKey: 'availableProperties.cardDetails.:card_country:',\n    },\n    ':bin:': {\n      predicate: ':bin:',\n      content: [\n        'The bank identification number (BIN) represented by the first six numbers of the credit card.',\n        'Example: 454347',\n        'This attribute is mandatory and will always be present in an accepted payment request.',\n      ],\n      type: 'availableProperties',\n      helpKey: 'availableProperties.cardDetails.:bin:',\n    },\n    ':card_brand:': {\n      predicate: ':card_brand:',\n      content: [\n        'The brand of the credit card used.',\n        'Example: VISA, MASTERCARD',\n      ],\n      type: 'availableProperties',\n      helpKey: 'availableProperties.cardDetails.:card_brand:',\n    },\n    ':card_type:': {\n      predicate: ':card_type:',\n      content: [\n        'The type of the card used for payment',\n        'Example: Credit, Debit',\n      ],\n      type: 'availableProperties',\n      helpKey: 'availableProperties.cardDetails.:card_type:',\n    },\n  },\n  cardholderDetails: {\n    ':cardholder_name:': {\n      predicate: ':cardholder_name:',\n      content: ['The name of the cardholder.', 'Example: John Doe'],\n      type: 'availableProperties',\n      helpKey: 'availableProperties.cardholderDetails.:cardholder_name:',\n    },\n    ':email:': {\n      predicate: ':email:',\n      content: [\n        'The customer e-mail address provided.',\n        'Example: john.doe@example.com',\n      ],\n      type: 'availableProperties',\n      helpKey: 'availableProperties.cardholderDetails.:email:',\n    },\n    ':email_domain:': {\n      predicate: ':email_domain:',\n      content: [\n        'The e-mail domain derived from the customer e-mail address.',\n        'Example: domain.com',\n      ],\n      type: 'availableProperties',\n      helpKey: 'availableProperties.cardholderDetails.:email_domain:',\n    },\n    ':phone:': {\n      predicate: ':phone:',\n      content: [\n        'The phone number of the customer provided.',\n        'Example: +1415 555 2671',\n      ],\n      type: 'availableProperties',\n      helpKey: 'availableProperties.cardholderDetails.:phone:',\n    },\n    ':phone_country:': {\n      predicate: ':phone_country:',\n      content: [\n        \"The country of the customer's phone number. Derived from the first 2 digit of the number provided.\",\n        'Attention: countries in this field are defined by 2 character ISO codes. E.g. \"GB\", \"FR\", \"US\"',\n      ],\n      type: 'availableProperties',\n      helpKey: 'availableProperties.cardholderDetails.:phone_country:',\n    },\n  },\n  verficationResults: {\n    ':avs_code:': {\n      predicate: ':avs_code:',\n      content: [\n        'The result of the AVS check. Applicable to PostAUTH only as AVS check results are never available at the earlier steps.',\n        'Example: :avs_code: in [\"A\",\"B\",\"Z\"] will be triggered if AVS response code is either A, B or Z',\n        'Possible AVS response code values:',\n        'A        AMEX, MC, Visa        Street address matches, ZIP code does not match.',\n        'B        Visa                            Street address matches. ZIP code not verified (incorrect format).',\n        'C        Visa                            Street address and ZIP code not verified (incorrect format).',\n        'D        Visa                            Street address and ZIP code match.',\n        'F        Visa                             Street address and ZIP code match. Applies to UK-issued cards.',\n        'G       Visa                             Not verified or not supported.',\n        'I         Visa                             Street address and ZIP code not verified.',\n        'M        Visa                            Street address and ZIP code match.',\n        'N        AMEX, MC, Visa.        Street address and ZIP code do not match.',\n        'P        Visa                             ZIP code matches. Street address not verified (incorrect format).',\n        'R        AMEX, MC, Visa        Service unavailable.',\n        'S        AMEX, MC                 Not supported.',\n        'U        AMEX, MC, Visa        Address not verified due to lack of issuer support or system malfunction.',\n        'W        MC                            ZIP code matches, street address does not match.',\n        'X         MC                            ZIP code and address match.',\n        'Y        AMEX, MC, Visa        Cardholder street address and ZIP code match.',\n        'Z        AMEX, MC, Visa        ZIP code matches.',\n        'AE1        AMEX                   Cardholder name incorrect but ZIP code matches.',\n        'AE2        AMEX                   Cardholder name incorrect, but street and ZIP code match.',\n        'AE3        AMEX                   Cardholder name incorrect, but street matches.',\n        'AE4        AMEX                   Cardholder name matches.',\n        'AE5        AMEX                   Cardholder name and ZIP code match.',\n        'AE6        AMEX                   Cardholder name, street, and ZIP code match.',\n        'AE7        AMEX                   Cardholder name and street match.',\n        'AE8        AMEX                   Cardholder name, street and ZIP code do not match.',\n      ],\n      type: 'availableProperties',\n      helpKey: 'availableProperties.verficationResults.:avs_code:',\n    },\n    ':email_is_valid:': {\n      predicate: ':email_is_valid:',\n      content: [\n        'The information provided in the email address field corresponds to the format of e-mail addresses.',\n        'This rule does not require any operators or values.',\n      ],\n      type: 'availableProperties',\n      helpKey: 'availableProperties.verficationResults.:email_is_valid:',\n    },\n    ':has_liability_shift:': {\n      predicate: ':has_liability_shift:',\n      content: [\n        \"The transaction's liability has been shifted to the issuer as a result of the 3ds check.\",\n      ],\n      type: 'availableProperties',\n      helpKey: 'availableProperties.verficationResults.:has_liability_shift:',\n    },\n  },\n  velocity: {\n    ':nb_charge_approved_per_billing_address_24h:': {\n      predicate: ':nb_charge_approved_per_billing_address_24h:',\n      content: [\n        'Billing address velocity in the last 24 hours for approved transactions',\n      ],\n      type: 'availableProperties',\n      helpKey:\n        'availableProperties.:nb_charge_approved_per_billing_address_24h:',\n    },\n    ':nb_charge_approved_per_billing_address_7days:': {\n      predicate: ':nb_charge_approved_per_billing_address_7days:',\n      content: [\n        'Billing address velocity in the last 7 days for approved transactions',\n      ],\n      type: 'availableProperties',\n      helpKey:\n        'availableProperties.:nb_charge_approved_per_billing_address_7days:',\n    },\n    ':nb_charge_approved_per_billing_address_30days:': {\n      predicate: ':nb_charge_approved_per_billing_address_30days:',\n      content: [\n        'Billing address velocity in the last 30 days for approved transactions',\n      ],\n      type: 'availableProperties',\n      helpKey:\n        'availableProperties.:nb_charge_approved_per_billing_address_30days:',\n    },\n    ':nb_charge_approved_per_shipping_address_24h:': {\n      predicate: ':nb_charge_approved_per_shipping_address_24h:',\n      content: [\n        'Shipping addres velocity in the last 24 hours for approved transactions',\n      ],\n      type: 'availableProperties',\n      helpKey:\n        'availableProperties.:nb_charge_approved_per_shipping_address_24h:',\n    },\n    ':nb_charge_approved_per_shipping_address_7days:': {\n      predicate: ':nb_charge_approved_per_shipping_address_7days:',\n      content: [\n        'Shipping addres velocity in the last 7 days for approved transactions',\n      ],\n      type: 'availableProperties',\n      helpKey:\n        'availableProperties.:nb_charge_approved_per_shipping_address_7days:',\n    },\n    ':nb_charge_approved_per_shipping_address_30days:': {\n      predicate: ':nb_charge_approved_per_shipping_address_30days:',\n      content: [\n        'Shipping addres velocity in the last 30 days for approved transactions',\n      ],\n      type: 'availableProperties',\n      helpKey:\n        'availableProperties.:nb_charge_approved_per_shipping_address_30days:',\n    },\n    ':nb_charge_approved_per_bin_24h:': {\n      predicate: ':nb_charge_approved_per_bin_24h:',\n      content: ['Bin velocity in the last 24 hours for approved transactions'],\n      type: 'availableProperties',\n      helpKey: 'availableProperties.:nb_charge_approved_per_bin_24h:',\n    },\n    ':nb_charge_approved_per_bin_7days:': {\n      predicate: ':nb_charge_approved_per_bin_7days:',\n      content: ['Bin velocity in the last 7 days for approved transactions'],\n      type: 'availableProperties',\n      helpKey: 'availableProperties.:nb_charge_approved_per_bin_7days:',\n    },\n    ':nb_charge_approved_per_bin_30days:': {\n      predicate: ':nb_charge_approved_per_bin_30days:',\n      content: ['Bin velocity in the last 30 days for approved transactions'],\n      type: 'availableProperties',\n      helpKey: 'availableProperties.:nb_charge_approved_per_bin_30days:',\n    },\n    ':nb_charge_approved_per_card_24h:': {\n      predicate: ':nb_charge_approved_per_card_24h:',\n      content: ['Card velocity in the last 24 hours for approved transactions'],\n      type: 'availableProperties',\n      helpKey: 'availableProperties.:nb_charge_approved_per_card_24h:',\n    },\n    ':nb_charge_approved_per_card_7days:': {\n      predicate: ':nb_charge_approved_per_card_7days:',\n      content: ['Card velocity in the last 7 days for approved transactions'],\n      type: 'availableProperties',\n      helpKey: 'availableProperties.:nb_charge_approved_per_card_7days:',\n    },\n    ':nb_charge_approved_per_card_30days:': {\n      predicate: ':nb_charge_approved_per_card_30days:',\n      content: ['Card velocity in the last 30 days for approved transactions'],\n      type: 'availableProperties',\n      helpKey: 'availableProperties.:nb_charge_approved_per_card_30days:',\n    },\n    ':nb_charge_approved_per_cardholder_name_24h:': {\n      predicate: ':nb_charge_approved_per_cardholder_name_24h:',\n      content: [\n        'Cardholder name velocity in the last 24 hours for approved transactions',\n      ],\n      type: 'availableProperties',\n      helpKey:\n        'availableProperties.:nb_charge_approved_per_cardholder_name_24h:',\n    },\n    ':nb_charge_approved_per_cardholder_name_7days:': {\n      predicate: ':nb_charge_approved_per_cardholder_name_7days:',\n      content: [\n        'Cardholder name velocity in the last 7 days for approved transactions',\n      ],\n      type: 'availableProperties',\n      helpKey:\n        'availableProperties.:nb_charge_approved_per_cardholder_name_7days:',\n    },\n    ':nb_charge_approved_per_cardholder_name_30days:': {\n      predicate: ':nb_charge_approved_per_cardholder_name_30days:',\n      content: [\n        'Cardholder name velocity in the last 30 days for approved transactions',\n      ],\n      type: 'availableProperties',\n      helpKey:\n        'availableProperties.:nb_charge_approved_per_cardholder_name_30days:',\n    },\n    ':nb_charge_approved_per_email_24h:': {\n      predicate: ':nb_charge_approved_per_email_24h:',\n      content: [\n        'Email velocity in the last 24 hours for approved transactions',\n      ],\n      type: 'availableProperties',\n      helpKey: 'availableProperties.:nb_charge_approved_per_email_24h:',\n    },\n    ':nb_charge_approved_per_email_7days:': {\n      predicate: ':nb_charge_approved_per_email_7days:',\n      content: ['Email velocity in the last 7 days for approved transactions'],\n      type: 'availableProperties',\n      helpKey: 'availableProperties.:nb_charge_approved_per_email_7days:',\n    },\n    ':nb_charge_approved_per_email_30days:': {\n      predicate: ':nb_charge_approved_per_email_30days:',\n      content: ['Email velocity in the last 30 days for approved transactions'],\n      type: 'availableProperties',\n      helpKey: 'availableProperties.:nb_charge_approved_per_email_30days:',\n    },\n    ':nb_charge_approved_per_ip_24h:': {\n      predicate: ':nb_charge_approved_per_ip_24h:',\n      content: [\n        'Payment ip velocity in the last 24 hours for approved transactions',\n      ],\n      type: 'availableProperties',\n      helpKey: 'availableProperties.:nb_charge_approved_per_ip_24h:',\n    },\n    ':nb_charge_attempted_per_billing_address_7days:': {\n      predicate: ':nb_charge_attempted_per_billing_address_7days:',\n      content: [\n        'Payment ip velocity in the last 24 hours for approved transactions',\n      ],\n      type: 'availableProperties',\n      helpKey:\n        'availableProperties.:nb_charge_attempted_per_billing_address_7days:',\n    },\n    ':nb_charge_attempted_per_billing_address_30days:': {\n      predicate: ':nb_charge_attempted_per_billing_address_30days:',\n      content: [\n        'Billing address velocity in the last 30 days for attempted transactions',\n      ],\n      type: 'availableProperties',\n      helpKey:\n        'availableProperties.:nb_charge_attempted_per_billing_address_30days:',\n    },\n    ':nb_charge_attempted_per_shipping_address_24h:': {\n      predicate: ':nb_charge_attempted_per_shipping_address_24h:',\n      content: [\n        'Shipping addres velocity in the last 24 hours for attempted transactions',\n      ],\n      type: 'availableProperties',\n      helpKey:\n        'availableProperties.:nb_charge_attempted_per_shipping_address_24h:',\n    },\n    ':nb_charge_attempted_per_shipping_address_7days:': {\n      predicate: ':nb_charge_attempted_per_shipping_address_7days:',\n      content: [\n        'Shipping addres velocity in the last 7 days for attempted transactions',\n      ],\n      type: 'availableProperties',\n      helpKey:\n        'availableProperties.:nb_charge_attempted_per_shipping_address_7days:',\n    },\n    ':nb_charge_attempted_per_shipping_address_30days:': {\n      predicate: ':nb_charge_attempted_per_shipping_address_30days:',\n      content: [\n        'Shipping addres velocity in the last 30 days for attempted transactions',\n      ],\n      type: 'availableProperties',\n      helpKey:\n        'availableProperties.:nb_charge_attempted_per_shipping_address_30days:',\n    },\n    ':nb_charge_attempted_per_bin_24h:': {\n      predicate: ':nb_charge_attempted_per_bin_24h:',\n      content: ['Bin velocity in the last 24 hours for attempted transactions'],\n      type: 'availableProperties',\n      helpKey: 'availableProperties.:nb_charge_attempted_per_bin_24h:',\n    },\n    ':nb_charge_attempted_per_bin_7days:': {\n      predicate: ':nb_charge_attempted_per_bin_7days:',\n      content: ['Bin velocity in the last 7 days for attempted transactions'],\n      type: 'availableProperties',\n      helpKey: 'availableProperties.:nb_charge_attempted_per_bin_7days:',\n    },\n    ':nb_charge_attempted_per_bin_30days:': {\n      predicate: ':nb_charge_attempted_per_bin_30days:',\n      content: ['Bin velocity in the last 30 days for attempted transactions'],\n      type: 'availableProperties',\n      helpKey: 'availableProperties.:nb_charge_attempted_per_bin_30days:',\n    },\n    ':nb_charge_attempted_per_card_24h:': {\n      predicate: ':nb_charge_attempted_per_card_24h:',\n      content: [\n        'Card velocity in the last 24 hours for attempted transactions',\n      ],\n      type: 'availableProperties',\n      helpKey: 'availableProperties.:nb_charge_attempted_per_card_24h:',\n    },\n    ':nb_charge_attempted_per_card_7days:': {\n      predicate: ':nb_charge_attempted_per_card_7days:',\n      content: ['Card velocity in the last 7 days for attempted transactions'],\n      type: 'availableProperties',\n      helpKey: 'availableProperties.:nb_charge_attempted_per_card_7days:',\n    },\n    ':nb_charge_attempted_per_card_30days:': {\n      predicate: ':nb_charge_attempted_per_card_30days:',\n      content: ['Card velocity in the last 30 days for attempted transactions'],\n      type: 'availableProperties',\n      helpKey: 'availableProperties.:nb_charge_attempted_per_card_30days:',\n    },\n    ':nb_charge_attempted_per_cardholder_name_24h:': {\n      predicate: ':nb_charge_attempted_per_cardholder_name_24h:',\n      content: [\n        'Cardholder name velocity in the last 24 hours for attempted transactions',\n      ],\n      type: 'availableProperties',\n      helpKey:\n        'availableProperties.:nb_charge_attempted_per_cardholder_name_24h:',\n    },\n    ':nb_charge_attempted_per_cardholder_name_7days:': {\n      predicate: ':nb_charge_attempted_per_cardholder_name_7days:',\n      content: [\n        'Cardholder name velocity in the last 7 days for attempted transactions',\n      ],\n      type: 'availableProperties',\n      helpKey:\n        'availableProperties.:nb_charge_attempted_per_cardholder_name_7days:',\n    },\n    ':nb_charge_attempted_per_cardholder_name_30days:': {\n      predicate: ':nb_charge_attempted_per_cardholder_name_30days:',\n      content: [\n        'Cardholder name velocity in the last 30 days for attempted transactions',\n      ],\n      type: 'availableProperties',\n      helpKey:\n        'availableProperties.:nb_charge_attempted_per_cardholder_name_30days:',\n    },\n    ':nb_charge_attempted_per_email_24h:': {\n      predicate: ':nb_charge_attempted_per_email_24h:',\n      content: [\n        'Email velocity in the last 24 hours for attempted transactions',\n      ],\n      type: 'availableProperties',\n      helpKey: 'availableProperties.:nb_charge_attempted_per_email_24h:',\n    },\n    ':nb_charge_attempted_per_email_7days:': {\n      predicate: ':nb_charge_attempted_per_email_7days:',\n      content: ['Email velocity in the last 7 days for attempted transactions'],\n      type: 'availableProperties',\n      helpKey: 'availableProperties.:nb_charge_attempted_per_email_7days:',\n    },\n    ':nb_charge_attempted_per_email_30days:': {\n      predicate: ':nb_charge_attempted_per_email_30days:',\n      content: [\n        'Email velocity in the last 30 days for attempted transactions',\n      ],\n      type: 'availableProperties',\n      helpKey: 'availableProperties.:nb_charge_attempted_per_email_30days:',\n    },\n    ':nb_charge_attempted_per_ip_24h:': {\n      predicate: ':nb_charge_attempted_per_ip_24h:',\n      content: [\n        'Payment ip velocity in the last 24 hours for attempted transactions',\n      ],\n      type: 'availableProperties',\n      helpKey: 'availableProperties.:nb_charge_attempted_per_ip_24h:',\n    },\n  },\n};\n\nexport default availableProperties;\n","const operators = {\n  default: {\n    predicate: null,\n    content: [\n      'Operators help define the criteria against which payment attributes values will be tested. The list of available operators an attribute supports depends on the attribute tupe: Number, String or Boolean.',\n    ],\n    type: 'operators',\n    helpKey: 'operators.default',\n  },\n  '>': {\n    predicate: '>',\n    content: [\n      'Greater than. Applicable to number attributes only.',\n      'Example: :score: > 5',\n    ],\n    type: 'operators',\n    helpKey: 'operators.>',\n  },\n  '<': {\n    predicate: '<',\n    content: [\n      'Less than. Applicable to number attributes only.',\n      'Example: :score: < 5',\n    ],\n    type: 'operators',\n    helpKey: 'operators.<',\n  },\n  '>=': {\n    predicate: '>=',\n    content: [\n      'Greater than or equal. Applicable to number attributes only.',\n      'Example: :score: >= 1',\n    ],\n    type: 'operators',\n    helpKey: 'operators.>=',\n  },\n  '<=': {\n    predicate: '<=',\n    content: [\n      'Less than or equal. Applicable to number attributes only.',\n      'Example: :score: <= 2 ',\n    ],\n    type: 'operators',\n    helpKey: 'operators.<=',\n  },\n  '=': {\n    predicate: '=',\n    content: [\n      'Equal. All evaluated attributes must be of the same type: String, Number or Boolean.',\n      \"Example: :billing_address_country: = 'GB'\",\n    ],\n    type: 'operators',\n    helpKey: 'operators.=',\n  },\n  '!=': {\n    predicate: '!=',\n    content: [\n      'Not equal. All evaluated attributes must be of the same type: String, Number or Boolean.',\n      \"Example: :card_brand: != 'VISA'\",\n    ],\n    type: 'operators',\n    helpKey: 'operators.!=',\n  },\n  IN: {\n    predicate: 'IN',\n    content: [\n      'Contained in a given list. Refer to the Lists section to learn more about how lists work.',\n      'Example: :billing_address_country: IN @high_risk_counties',\n    ],\n    type: 'operators',\n    helpKey: 'operators.IN',\n  },\n  CONTAINS: {\n    predicate: 'CONTAINS',\n    content: [\n      'Contains a specific text value. Applicable to string attributes only.',\n      \"Example: $promo_code contains 'XMAS'\",\n    ],\n    type: 'operators',\n    helpKey: 'operators.CONTAINS',\n  },\n  IS_MISSING: {\n    predicate: 'IS_MISSING',\n    content: [\n      'Attribute is missing a value. Usually this happens if the value is not provided in the payment request. Note: most of the payment request fields are optional.',\n      'Example: is_missing $billing_address_city will return TRUE if no billing address is provided',\n    ],\n    type: 'operators',\n    helpKey: 'operators.IS_MISSING',\n  },\n  EXISTS: {\n    predicate: 'EXISTS',\n    content: [\n      'Attribute is present. Or, in other words, has a value.',\n      'Example: exists $billing_address_country will return TRUE if an address is provided',\n    ],\n    type: 'operators',\n    helpKey: 'operators.EXISTS',\n  },\n  NOT: {\n    predicate: 'NOT',\n    content: [\n      'This function can be used it reverse a statement.',\n      \"Example: not :billing_address_city: CONTAINS 'London' will return TRUE if billing address city does NOT contain 'London'\",\n    ],\n    type: 'operators',\n    helpKey: 'operators.NOT',\n  },\n};\n\nexport default operators;\n","const editor = {\n  checkRule: {\n    title: 'Check your rule',\n    content: [\n      'You just need to check that the <b>rule syntax is consistent</b> (so it can be used in live routing), and you have <b>given your rule a name</b> (how you will refer to it in live routing) before you can create.',\n    ],\n    helpKey: 'editor.checkRule',\n  },\n};\n\nexport default editor;\n","const velocityWizard = {\n  transactionCount: {\n    title: 'Velocity transaction count',\n    content: [\n      'Velocity element to identify high frequency transactions. Will return the frequency of a particular attribute in the transactions over a time period.',\n    ],\n    example: {\n      predicate: ':nb_charge_approved_per_billing_address_24h: > 10',\n      description:\n        'This will trigger when the number of approved requests (velocity) for a particular billing address goes above 10 in a 24 hour period.',\n    },\n    type: 'velocity',\n    helpKey: 'velocityWizard.transactionCount',\n  },\n  relative: {\n    title: 'Relative velocity',\n    content: [\n      'Velocity element to identify cases when the same attribute is reused in otherwise unrelated transactions. Returns of the occurrence of one attribute in relation to another over a time period.',\n    ],\n    example: {\n      predicate:\n        ':nb_relative_attempted_email_per_cardholder_name_30days: > 10',\n      description:\n        'This will trigger when the number of email addresses for a single cardholder goes above 10 in any 30 day period of attempted transactions.',\n    },\n    type: 'velocity',\n    helpKey: 'velocityWizard.relative',\n  },\n};\n\nexport default velocityWizard;\n","import endpoints from 'api/endpoints';\nimport { AddListEntryFormData } from 'forms/AddListEntryForm/AddListEntryForm';\nimport { useAddUpdateMutation } from '../common/useAddUpdateMutation';\n\nexport const useAddListEntry = (onSuccess: () => void) => {\n  return useAddUpdateMutation<AddListEntryFormData, {}>(\n    'post',\n    endpoints.lists,\n    { onSuccess }\n  );\n};\n","import endpoints from 'api/endpoints';\nimport { queryCache } from 'react-query';\nimport { useDeleteMutation } from '../common/useDeleteMutation';\n\nexport const useDeleteList = (onSuccess: () => void) => {\n  return useDeleteMutation(endpoints.lists, {\n    onSuccess: () => {\n      queryCache.removeQueries(endpoints.lists);\n      onSuccess();\n    },\n  });\n};\n","import endpoints from 'api/endpoints';\nimport { useDeleteMutation } from '../common/useDeleteMutation';\n\nexport const useDeleteListEntry = (onSuccess: () => void) => {\n  return useDeleteMutation(endpoints.lists, { onSuccess });\n};\n","import { usePaginatedQuery } from 'react-query';\nimport endpoints from 'api/endpoints';\nimport { ListItem, PaginationVariables } from 'types/models';\nimport useGetRequest from 'hooks/api/common/useGetRequest';\n\ninterface ListItemsResponse {\n  alias: string;\n  name: string;\n  description: string;\n  created_at: string;\n  total_count: number;\n  items: ListItem[];\n}\n\nexport const useListItemsData = (variables: PaginationVariables) => {\n  const req = useGetRequest();\n\n  return usePaginatedQuery<ListItemsResponse, [string, PaginationVariables]>(\n    [endpoints.lists, variables],\n    (_, { resource, limit, skip, searchQuery }) => {\n      return req(\n        `${endpoints.lists}/${resource}?limit=${limit}&skip=${skip}&search=${searchQuery}`\n      );\n    }\n  );\n};\n","import { useQuery } from 'react-query';\nimport { ListSummary } from 'types/models';\nimport endpoints from 'api/endpoints';\nimport useGetRequest from 'hooks/api/common/useGetRequest';\nimport { AxiosError } from 'axios';\n\nexport interface ListSummariesResponse {\n  summaries: ListSummary[];\n}\n\nexport const useListsData = () => {\n  const req = useGetRequest<ListSummariesResponse>();\n  return useQuery<ListSummariesResponse, AxiosError<ListSummariesResponse>>(\n    endpoints.lists,\n    () => req(endpoints.lists)\n  );\n};\n","import { queryCache } from 'react-query';\nimport endpoints from 'api/endpoints';\nimport { PaginationVariables } from 'types/models';\n\nexport * from './useAddListEntry';\nexport * from './useDeleteList';\nexport * from './useDeleteListEntry';\nexport * from './useListItemsData';\nexport * from './useListsData';\n\nexport const refetchListsQueries = (\n  paginationVariables: PaginationVariables\n) => {\n  queryCache.invalidateQueries(endpoints.lists, { exact: true });\n  queryCache.invalidateQueries([endpoints.lists, paginationVariables], {\n    exact: true,\n  });\n};\n","import useMerchants from 'hooks/useMerchants';\n\nconst useMlScoreEnabled = () => {\n  const [{ selectedMerchant }] = useMerchants();\n  return selectedMerchant?.ml_score_enabled;\n};\n\nexport default useMlScoreEnabled;\n","import React, { useMemo } from 'react';\nimport { withReact, Slate } from 'slate-react';\nimport { createEditor } from 'slate';\nimport useSyntaxHighlighting from 'hooks/useSyntaxHighlighting';\nimport SyntaxHighlightEditable from './SyntaxHighlightEditable';\nimport { tokenize } from './antlrUtils';\nimport { useRulesBuilder } from '../RulesBuilderContext';\nimport { AvailableProperty } from 'types/models';\n\ninterface Props {\n  predicate: string;\n}\n\nexport const RuleExample: React.FunctionComponent<\n  Props & { availableProperties: AvailableProperty[] }\n> = ({ predicate, availableProperties }) => {\n  const { getLeafRenderer, renderElement } = useSyntaxHighlighting();\n  const editor = useMemo(() => withReact(createEditor()), []);\n\n  const renderLeaf = useMemo(() => getLeafRenderer(availableProperties), [\n    availableProperties,\n    getLeafRenderer,\n  ]);\n\n  return (\n    <Slate\n      onChange={() => {}}\n      editor={editor}\n      value={[\n        {\n          children: [{ text: predicate }],\n        },\n      ]}\n    >\n      <SyntaxHighlightEditable\n        tabIndex={-1}\n        contentEditable={false}\n        spellCheck=\"false\"\n        tokensToSkip={['OTHERS', 'WHITESPACE']}\n        tokenize={tokenize}\n        renderElement={renderElement}\n        renderLeaf={renderLeaf}\n      />\n    </Slate>\n  );\n};\n\nconst RulesExampleContainer: React.FunctionComponent<Props> = ({\n  predicate,\n}) => {\n  const { availableProperties } = useRulesBuilder();\n\n  return (\n    <RuleExample\n      predicate={predicate}\n      availableProperties={availableProperties}\n    />\n  );\n};\n\nexport default React.memo(RulesExampleContainer);\n","import { useContext, useMemo, useState, useEffect } from 'react';\nimport React from 'react';\n\nconst ScrollSpyContext = React.createContext<\n  | {\n      refs: Record<string, { ref: React.RefObject<HTMLDivElement> }>;\n      scrollTo: (key: string, opts: { root: Window | Element }) => void;\n      isInView: (key: string) => boolean;\n    }\n  | undefined\n>(undefined);\n\nexport const ScrollSpyProvider: React.FC<{ keys: string[] }> = ({\n  keys,\n  children,\n}) => {\n  const [isInView, setIsInView] = useState<Record<string, boolean>>({});\n\n  const refs = useMemo(\n    () =>\n      keys.reduce((acc, curr) => {\n        const ref = React.createRef<HTMLDivElement>();\n\n        acc[curr] = {\n          ref,\n          observer: new IntersectionObserver(([entry]) => {\n            setIsInView((prev) => ({\n              ...prev,\n              [curr]: entry.isIntersecting,\n            }));\n          }),\n        };\n        return acc;\n      }, {} as Record<string, { ref: React.RefObject<HTMLDivElement>; observer: IntersectionObserver }>),\n    [keys]\n  );\n\n  useEffect(() => {\n    Object.values(refs).forEach(({ ref, observer }) => {\n      if (ref.current) {\n        observer.observe(ref.current);\n      }\n    });\n\n    return () => {\n      Object.values(refs).forEach(({ observer }) => {\n        observer.disconnect();\n      });\n    };\n  }, [refs]);\n\n  const scrollTo = (\n    key: keyof typeof refs,\n    opts: { root: any } = { root: window }\n  ) => {\n    const obj = refs[key];\n    if (obj?.ref.current) {\n      opts.root.scrollTo({\n        top: obj.ref.current.offsetTop + 1,\n        behavior: 'smooth',\n      });\n    }\n  };\n\n  return (\n    <ScrollSpyContext.Provider\n      value={{\n        refs,\n        scrollTo,\n        isInView: (key: string) => isInView[key],\n      }}\n    >\n      {children}\n    </ScrollSpyContext.Provider>\n  );\n};\n\nexport const useScrollSpy = (\n  {\n    getRoot,\n  }: { getRoot: (el: Element) => Window | Element | null | undefined } = {\n    getRoot: () => window,\n  }\n) => {\n  const context = useContext(ScrollSpyContext);\n\n  if (context === undefined) {\n    throw new Error('useScrollTo must be used within a ScrollSpyProvider');\n  }\n\n  return {\n    ...context,\n    scrollTo: (type: string) => {\n      const obj = context.refs[type];\n      if (obj?.ref.current) {\n        context.scrollTo(type, { root: getRoot(obj?.ref.current) ?? window });\n      }\n    },\n  };\n};\n","import React, { useCallback } from 'react';\nimport { Editable } from 'slate-react';\nimport { EditableProps } from 'slate-react/dist/components/editable';\nimport { NodeEntry, Node, Text, Range } from 'slate';\n\nexport interface NormalizedToken {\n  id: number;\n  type: string;\n  content: string;\n}\n\ntype Props = EditableProps & {\n  tokenize: (text: string) => NormalizedToken[];\n  tokensToSkip?: string[];\n};\n\nconst SyntaxHighlightEditable: React.FunctionComponent<Props> = ({\n  tokenize,\n  tokensToSkip,\n  ...rest\n}) => {\n  const decorate = useCallback(\n    ([node, path]: NodeEntry<Node>) => {\n      const ranges: Range[] = [];\n\n      if (!Text.isText(node)) {\n        return ranges;\n      }\n\n      if (!node.text.length) {\n        return ranges;\n      }\n\n      const tokens = tokenize(node.text);\n\n      let start = 0;\n\n      for (const token of tokens) {\n        const length = token.content.length;\n        const end = start + length;\n\n        if (\n          !tokensToSkip ||\n          (tokensToSkip && !tokensToSkip.includes(token.type))\n        ) {\n          ranges.push({\n            type: token.type,\n            value: token.content,\n            anchor: { path, offset: start },\n            focus: { path, offset: end },\n          });\n        }\n\n        start = end;\n      }\n\n      return ranges;\n    },\n    [tokenize, tokensToSkip]\n  );\n\n  return <Editable decorate={decorate} {...rest} />;\n};\n\nexport default SyntaxHighlightEditable;\n","import format from 'date-fns/format';\nimport { DateRange } from '@cko/calendar';\n\nconst DEFAULT_FORMAT = 'dd MMM yyyy - HH:mm';\nconst API_FORMAT = 'yyyy-MM-dd';\n\nconst getUTCDate = (dateString: string) => {\n  const date = new Date(dateString);\n\n  return new Date(\n    date.getUTCFullYear(),\n    date.getUTCMonth(),\n    date.getUTCDate(),\n    date.getUTCHours(),\n    date.getUTCMinutes(),\n    date.getUTCSeconds()\n  );\n};\n\nexport const stringToDateDisplayValue = (\n  date: string,\n  dateFormater: string = DEFAULT_FORMAT\n) => format(getUTCDate(date), dateFormater);\n\nexport const formatDate = (date: Date, dateFormater: string = API_FORMAT) => {\n  return format(date, dateFormater);\n};\n\nexport const formatDateRange = (\n  dateRange: DateRange,\n  dateFormater: string = API_FORMAT\n) => {\n  let fromDate = null;\n  let toDate = null;\n  if (dateRange.from) {\n    fromDate = formatDate(dateRange.from, dateFormater);\n  }\n  if (dateRange.to) {\n    toDate = formatDate(dateRange.to, dateFormater);\n  }\n  return { fromDate, toDate };\n};\n","import React, { useEffect, useState, useRef } from 'react';\nimport { RenderLeafProps } from 'slate-react';\nimport { TTheme } from '@cko/primitives';\nimport styled, { css } from 'styled-components';\nimport { Text } from 'slate';\n\nconst booleanTypes = ['True', 'False'] as const;\n\nconst booleanOperatorTypes = ['And', 'Not', 'Or'] as const;\n\nconst arithmeticOperatorTypes = [\n  'LessThan',\n  'LessThanEqual',\n  'GreaterThan',\n  'GreaterThanEqual',\n  'Equal',\n  'NotEqual',\n  'In',\n] as const;\n\ntype StringType = 'String';\ntype NumberType = 'Number';\ntype BooleanType = typeof booleanTypes[number];\n\nexport type LiteralTypes = StringType | NumberType | BooleanType;\nexport type BooleanOperatorType = typeof booleanOperatorTypes[number];\nexport type ArithmeticOperatorType = typeof arithmeticOperatorTypes[number];\n\ntype TokenType =\n  | BooleanType\n  | BooleanOperatorType\n  | ArithmeticOperatorType\n  | StringType\n  | NumberType\n  | 'Property'\n  | 'Metadata'\n  | 'DefinedList'\n  | 'Placeholder';\n\nexport type RuntimeType = 'boolean' | 'string' | 'number';\n\nconst isOperator = (type: BooleanOperatorType | ArithmeticOperatorType) =>\n  [...arithmeticOperatorTypes, ...booleanOperatorTypes].includes(type);\nconst isBoolean = (type: BooleanType) => booleanTypes.includes(type);\nconst isNumber = (type: RuntimeType | TokenType) => type === 'Number';\nconst isString = (type: RuntimeType | TokenType) => type === 'String';\nconst isMetadata = (type: RuntimeType | TokenType) => type === 'Metadata';\nconst isList = (type: RuntimeType | TokenType) => type === 'DefinedList';\nconst isRuntimeBoolean = (type: RuntimeType | TokenType) => type === 'boolean';\nconst isRuntimeString = (type: RuntimeType | TokenType) => type === 'string';\nconst isRuntimeNumber = (type: RuntimeType | TokenType) => type === 'number';\nconst isPlaceholder = (type: RuntimeType | TokenType) => type === 'Placeholder';\n\nexport type CustomLeaf = Text & {\n  type: TokenType | RuntimeType;\n  content: string;\n  value: string;\n};\n\nconst tokenStyle = css`\n  padding: 4px 8px;\n  border-radius: 6px;\n`;\n\nconst getStyle = ({\n  type,\n  theme,\n}: {\n  type: TokenType | RuntimeType;\n  theme: TTheme;\n}) => {\n  switch (true) {\n    case isOperator(type as BooleanOperatorType | ArithmeticOperatorType):\n      return css`\n        color: #5fa1d6;\n      `;\n    case isBoolean(type as BooleanType):\n    case isRuntimeBoolean(type):\n      return css`\n        ${tokenStyle}\n        color: ${theme.colors.base};\n        background-color: ${theme.colors.baseLight};\n      `;\n    case isNumber(type):\n    case isRuntimeNumber(type):\n      return css`\n        ${tokenStyle}\n        color: ${theme.colors.warningDark};\n        background-color: ${theme.colors.warningLight};\n      `;\n    case isString(type):\n    case isRuntimeString(type):\n      return css`\n        ${tokenStyle}\n        color: ${theme.colors.successDark};\n        background-color: ${theme.colors.successLight};\n      `;\n    case isMetadata(type):\n      return css`\n        ${tokenStyle}\n        color: ${theme.colors.dangerDark};\n        background-color: ${theme.colors.dangerLight};\n      `;\n    case isList(type):\n      return css`\n        ${tokenStyle}\n        color: #004495;\n        background-color: #cae6fb;\n      `;\n    case isPlaceholder(type):\n      return css`\n        ${tokenStyle}\n        color: #E4E9EB;\n        background-color: #e4e9eb;\n      `;\n    default:\n      return css`\n        color: ${theme.colors.base};\n      `;\n  }\n};\n\nconst Output = styled.span<{\n  type: TokenType;\n}>`\n  font-family: Source Code Pro;\n  font-size: 14px;\n  ${getStyle}\n`;\n\ntype Props = RenderLeafProps & {\n  getRuntimeType?: (leaf: CustomLeaf) => RuntimeType | null;\n};\n\nconst Highlighted: React.FunctionComponent<Props> = ({\n  getRuntimeType,\n  attributes,\n  children,\n  leaf,\n}) => {\n  const [runtimeType, setRuntimeType] = useState<RuntimeType | null>(null);\n\n  const ref = useRef<HTMLSpanElement | null>(null);\n\n  useEffect(() => {\n    if (getRuntimeType) {\n      const type = getRuntimeType(leaf as CustomLeaf);\n      setRuntimeType(type);\n    }\n  }, [getRuntimeType, leaf]);\n\n  useEffect(() => {\n    if (ref.current) {\n      const child = ref.current.firstElementChild;\n\n      if (child) {\n        const attr = child.attributes.getNamedItem('data-slate-zero-width');\n\n        if (attr?.value === 'z') {\n          ref.current.style.padding = '0';\n        }\n      }\n    }\n  }, [leaf]);\n\n  return (\n    <Output\n      ref={ref}\n      type={(runtimeType as TokenType) || (leaf.type as TokenType)}\n      {...attributes}\n    >\n      {children}\n    </Output>\n  );\n};\n\nexport default Highlighted;\n","import React, { useCallback } from 'react';\nimport { RenderLeafProps, RenderElementProps } from 'slate-react';\nimport Highlighted, { CustomLeaf, RuntimeType } from 'components/Highlighted';\nimport { AvailableProperty } from 'types/models';\n\nconst stripFirstAndLast = (text: string) => text.replace(/:/g, '');\n\nconst useSyntaxHighlighting = () => {\n  const getRuntimeType = useCallback(\n    (text: string, availableProperties: AvailableProperty[]) => {\n      return availableProperties.find((x) => x.name === text)\n        ?.type as RuntimeType;\n    },\n    []\n  );\n\n  const getLeafRenderer = useCallback(\n    (availableProperties: AvailableProperty[]) => (props: RenderLeafProps) => (\n      <Highlighted\n        getRuntimeType={(leaf: CustomLeaf) => {\n          if (leaf.type === 'Property') {\n            const runtimeType = getRuntimeType(\n              stripFirstAndLast(leaf.value),\n              availableProperties\n            );\n\n            return runtimeType;\n          }\n          return null;\n        }}\n        {...props}\n      />\n    ),\n    [getRuntimeType]\n  );\n\n  const renderElement = useCallback((props: RenderElementProps) => {\n    const { attributes, children } = props;\n    return (\n      <p contentEditable={false} style={{ lineHeight: '30px' }} {...attributes}>\n        {children}\n      </p>\n    );\n  }, []);\n\n  return { getLeafRenderer, renderElement };\n};\n\nexport default useSyntaxHighlighting;\n","//@ts-nocheck\r\n// Generated from Predicate.g4 by ANTLR 4.7.3-SNAPSHOT\r\n\r\nimport { ATN } from 'antlr4ts/atn/ATN';\r\nimport { ATNDeserializer } from 'antlr4ts/atn/ATNDeserializer';\r\nimport { CharStream } from 'antlr4ts/CharStream';\r\nimport { Lexer } from 'antlr4ts/Lexer';\r\nimport { LexerATNSimulator } from 'antlr4ts/atn/LexerATNSimulator';\r\nimport { NotNull } from 'antlr4ts/Decorators';\r\nimport { Override } from 'antlr4ts/Decorators';\r\nimport { RuleContext } from 'antlr4ts/RuleContext';\r\nimport { Vocabulary } from 'antlr4ts/Vocabulary';\r\nimport { VocabularyImpl } from 'antlr4ts/VocabularyImpl';\r\n\r\nimport * as Utils from 'antlr4ts/misc/Utils';\r\n\r\nexport class PredicateLexer extends Lexer {\r\n  public static readonly Not = 1;\r\n  public static readonly IsMissing = 2;\r\n  public static readonly Exists = 3;\r\n  public static readonly GreaterThan = 4;\r\n  public static readonly GreaterThanEqual = 5;\r\n  public static readonly LessThan = 6;\r\n  public static readonly LessThanEqual = 7;\r\n  public static readonly Equal = 8;\r\n  public static readonly NotEqual = 9;\r\n  public static readonly In = 10;\r\n  public static readonly Or = 11;\r\n  public static readonly And = 12;\r\n  public static readonly True = 13;\r\n  public static readonly False = 14;\r\n  public static readonly Number = 15;\r\n  public static readonly String = 16;\r\n  public static readonly OpenParen = 17;\r\n  public static readonly CloseParen = 18;\r\n  public static readonly OpenBracket = 19;\r\n  public static readonly CloseBracket = 20;\r\n  public static readonly Property = 21;\r\n  public static readonly Metadata = 22;\r\n  public static readonly DefinedList = 23;\r\n  public static readonly Comma = 24;\r\n  public static readonly WHITESPACE = 25;\r\n  public static readonly OTHERS = 26;\r\n\r\n  // tslint:disable:no-trailing-whitespace\r\n  public static readonly channelNames: string[] = [\r\n    'DEFAULT_TOKEN_CHANNEL',\r\n    'HIDDEN',\r\n  ];\r\n\r\n  // tslint:disable:no-trailing-whitespace\r\n  public static readonly modeNames: string[] = ['DEFAULT_MODE'];\r\n\r\n  public static readonly ruleNames: string[] = [\r\n    'Not',\r\n    'IsMissing',\r\n    'Exists',\r\n    'GreaterThan',\r\n    'GreaterThanEqual',\r\n    'LessThan',\r\n    'LessThanEqual',\r\n    'Equal',\r\n    'NotEqual',\r\n    'In',\r\n    'Or',\r\n    'And',\r\n    'True',\r\n    'False',\r\n    'Number',\r\n    'String',\r\n    'OpenParen',\r\n    'CloseParen',\r\n    'OpenBracket',\r\n    'CloseBracket',\r\n    'Property',\r\n    'Metadata',\r\n    'DefinedList',\r\n    'Comma',\r\n    'WHITESPACE',\r\n    'OTHERS',\r\n    'VARIABLE_NAME',\r\n    'COLON',\r\n    'AT',\r\n    'DOLLAR',\r\n  ];\r\n\r\n  private static readonly _LITERAL_NAMES: Array<string | undefined> = [\r\n    undefined,\r\n    undefined,\r\n    undefined,\r\n    undefined,\r\n    \"'>'\",\r\n    \"'>='\",\r\n    \"'<'\",\r\n    \"'<='\",\r\n    \"'='\",\r\n    \"'!='\",\r\n    undefined,\r\n    undefined,\r\n    undefined,\r\n    undefined,\r\n    undefined,\r\n    undefined,\r\n    undefined,\r\n    \"'('\",\r\n    \"')'\",\r\n    \"'['\",\r\n    \"']'\",\r\n    undefined,\r\n    undefined,\r\n    undefined,\r\n    \"','\",\r\n  ];\r\n  private static readonly _SYMBOLIC_NAMES: Array<string | undefined> = [\r\n    undefined,\r\n    'Not',\r\n    'IsMissing',\r\n    'Exists',\r\n    'GreaterThan',\r\n    'GreaterThanEqual',\r\n    'LessThan',\r\n    'LessThanEqual',\r\n    'Equal',\r\n    'NotEqual',\r\n    'In',\r\n    'Or',\r\n    'And',\r\n    'True',\r\n    'False',\r\n    'Number',\r\n    'String',\r\n    'OpenParen',\r\n    'CloseParen',\r\n    'OpenBracket',\r\n    'CloseBracket',\r\n    'Property',\r\n    'Metadata',\r\n    'DefinedList',\r\n    'Comma',\r\n    'WHITESPACE',\r\n    'OTHERS',\r\n  ];\r\n  public static readonly VOCABULARY: Vocabulary = new VocabularyImpl(\r\n    PredicateLexer._LITERAL_NAMES,\r\n    PredicateLexer._SYMBOLIC_NAMES,\r\n    []\r\n  );\r\n\r\n  // @Override\r\n  // @NotNull\r\n  public get vocabulary(): Vocabulary {\r\n    return PredicateLexer.VOCABULARY;\r\n  }\r\n  // tslint:enable:no-trailing-whitespace\r\n\r\n  constructor(input: CharStream) {\r\n    super(input);\r\n    this._interp = new LexerATNSimulator(PredicateLexer._ATN, this);\r\n  }\r\n\r\n  // @Override\r\n  public get grammarFileName(): string {\r\n    return 'Predicate.g4';\r\n  }\r\n\r\n  // @Override\r\n  public get ruleNames(): string[] {\r\n    return PredicateLexer.ruleNames;\r\n  }\r\n\r\n  // @Override\r\n  public get serializedATN(): string {\r\n    return PredicateLexer._serializedATN;\r\n  }\r\n\r\n  // @Override\r\n  public get channelNames(): string[] {\r\n    return PredicateLexer.channelNames;\r\n  }\r\n\r\n  // @Override\r\n  public get modeNames(): string[] {\r\n    return PredicateLexer.modeNames;\r\n  }\r\n\r\n  public static readonly _serializedATN: string =\r\n    '\\x03\\uC91D\\uCABA\\u058D\\uAFBA\\u4F53\\u0607\\uEA8B\\uC241\\x02\\x1C\\u010C\\b\\x01' +\r\n    '\\x04\\x02\\t\\x02\\x04\\x03\\t\\x03\\x04\\x04\\t\\x04\\x04\\x05\\t\\x05\\x04\\x06\\t\\x06' +\r\n    '\\x04\\x07\\t\\x07\\x04\\b\\t\\b\\x04\\t\\t\\t\\x04\\n\\t\\n\\x04\\v\\t\\v\\x04\\f\\t\\f\\x04\\r' +\r\n    '\\t\\r\\x04\\x0E\\t\\x0E\\x04\\x0F\\t\\x0F\\x04\\x10\\t\\x10\\x04\\x11\\t\\x11\\x04\\x12\\t' +\r\n    '\\x12\\x04\\x13\\t\\x13\\x04\\x14\\t\\x14\\x04\\x15\\t\\x15\\x04\\x16\\t\\x16\\x04\\x17\\t' +\r\n    '\\x17\\x04\\x18\\t\\x18\\x04\\x19\\t\\x19\\x04\\x1A\\t\\x1A\\x04\\x1B\\t\\x1B\\x04\\x1C\\t' +\r\n    '\\x1C\\x04\\x1D\\t\\x1D\\x04\\x1E\\t\\x1E\\x04\\x1F\\t\\x1F\\x03\\x02\\x03\\x02\\x03\\x02' +\r\n    '\\x03\\x02\\x03\\x02\\x03\\x02\\x05\\x02F\\n\\x02\\x03\\x03\\x03\\x03\\x03\\x03\\x03\\x03' +\r\n    '\\x03\\x03\\x03\\x03\\x03\\x03\\x03\\x03\\x03\\x03\\x03\\x03\\x03\\x03\\x03\\x03\\x03\\x03' +\r\n    '\\x03\\x03\\x03\\x03\\x03\\x03\\x03\\x03\\x03\\x03\\x03\\x03\\x03\\x03\\x03\\x03\\x03\\x03' +\r\n    '\\x03\\x03\\x03\\x03\\x03\\x03\\x03\\x03\\x03\\x03\\x03\\x03\\x03\\x03\\x03\\x03\\x05\\x03' +\r\n    'f\\n\\x03\\x03\\x04\\x03\\x04\\x03\\x04\\x03\\x04\\x03\\x04\\x03\\x04\\x03\\x04\\x03\\x04' +\r\n    '\\x03\\x04\\x03\\x04\\x03\\x04\\x03\\x04\\x03\\x04\\x03\\x04\\x03\\x04\\x03\\x04\\x03\\x04' +\r\n    '\\x03\\x04\\x05\\x04z\\n\\x04\\x03\\x05\\x03\\x05\\x03\\x06\\x03\\x06\\x03\\x06\\x03\\x07' +\r\n    '\\x03\\x07\\x03\\b\\x03\\b\\x03\\b\\x03\\t\\x03\\t\\x03\\n\\x03\\n\\x03\\n\\x03\\v\\x03\\v\\x03' +\r\n    '\\v\\x03\\v\\x03\\v\\x03\\v\\x05\\v\\x91\\n\\v\\x03\\f\\x03\\f\\x03\\f\\x03\\f\\x05\\f\\x97\\n' +\r\n    '\\f\\x03\\r\\x03\\r\\x03\\r\\x03\\r\\x03\\r\\x03\\r\\x05\\r\\x9F\\n\\r\\x03\\x0E\\x03\\x0E\\x03' +\r\n    '\\x0E\\x03\\x0E\\x03\\x0E\\x03\\x0E\\x03\\x0E\\x03\\x0E\\x03\\x0E\\x03\\x0E\\x03\\x0E\\x03' +\r\n    '\\x0E\\x05\\x0E\\xAD\\n\\x0E\\x03\\x0F\\x03\\x0F\\x03\\x0F\\x03\\x0F\\x03\\x0F\\x03\\x0F' +\r\n    '\\x03\\x0F\\x03\\x0F\\x03\\x0F\\x03\\x0F\\x03\\x0F\\x03\\x0F\\x03\\x0F\\x03\\x0F\\x03\\x0F' +\r\n    '\\x05\\x0F\\xBE\\n\\x0F\\x03\\x10\\x06\\x10\\xC1\\n\\x10\\r\\x10\\x0E\\x10\\xC2\\x03\\x10' +\r\n    '\\x03\\x10\\x06\\x10\\xC7\\n\\x10\\r\\x10\\x0E\\x10\\xC8\\x05\\x10\\xCB\\n\\x10\\x03\\x11' +\r\n    '\\x03\\x11\\x03\\x11\\x03\\x11\\x07\\x11\\xD1\\n\\x11\\f\\x11\\x0E\\x11\\xD4\\v\\x11\\x03' +\r\n    '\\x11\\x03\\x11\\x03\\x11\\x03\\x11\\x03\\x11\\x07\\x11\\xDB\\n\\x11\\f\\x11\\x0E\\x11\\xDE' +\r\n    '\\v\\x11\\x03\\x11\\x05\\x11\\xE1\\n\\x11\\x03\\x12\\x03\\x12\\x03\\x13\\x03\\x13\\x03\\x14' +\r\n    '\\x03\\x14\\x03\\x15\\x03\\x15\\x03\\x16\\x03\\x16\\x03\\x16\\x03\\x16\\x03\\x17\\x03\\x17' +\r\n    '\\x03\\x17\\x03\\x18\\x03\\x18\\x03\\x18\\x03\\x19\\x03\\x19\\x03\\x1A\\x06\\x1A\\xF8\\n' +\r\n    '\\x1A\\r\\x1A\\x0E\\x1A\\xF9\\x03\\x1A\\x03\\x1A\\x03\\x1B\\x03\\x1B\\x03\\x1B\\x03\\x1B' +\r\n    '\\x03\\x1C\\x06\\x1C\\u0103\\n\\x1C\\r\\x1C\\x0E\\x1C\\u0104\\x03\\x1D\\x03\\x1D\\x03\\x1E' +\r\n    '\\x03\\x1E\\x03\\x1F\\x03\\x1F\\x04\\xD2\\xDC\\x02\\x02 \\x03\\x02\\x03\\x05\\x02\\x04' +\r\n    '\\x07\\x02\\x05\\t\\x02\\x06\\v\\x02\\x07\\r\\x02\\b\\x0F\\x02\\t\\x11\\x02\\n\\x13\\x02\\v' +\r\n    '\\x15\\x02\\f\\x17\\x02\\r\\x19\\x02\\x0E\\x1B\\x02\\x0F\\x1D\\x02\\x10\\x1F\\x02\\x11!' +\r\n    \"\\x02\\x12#\\x02\\x13%\\x02\\x14'\\x02\\x15)\\x02\\x16+\\x02\\x17-\\x02\\x18/\\x02\\x19\" +\r\n    '1\\x02\\x1A3\\x02\\x1B5\\x02\\x1C7\\x02\\x029\\x02\\x02;\\x02\\x02=\\x02\\x02\\x03\\x02' +\r\n    '\\x06\\x03\\x022;\\x05\\x02\\f\\f\\x0F\\x0F$$\\x05\\x02\\v\\f\\x0E\\x0F\"\"\\x06\\x022' +\r\n    ';C\\\\aac|\\x02\\u011E\\x02\\x03\\x03\\x02\\x02\\x02\\x02\\x05\\x03\\x02\\x02\\x02\\x02' +\r\n    '\\x07\\x03\\x02\\x02\\x02\\x02\\t\\x03\\x02\\x02\\x02\\x02\\v\\x03\\x02\\x02\\x02\\x02\\r' +\r\n    '\\x03\\x02\\x02\\x02\\x02\\x0F\\x03\\x02\\x02\\x02\\x02\\x11\\x03\\x02\\x02\\x02\\x02\\x13' +\r\n    '\\x03\\x02\\x02\\x02\\x02\\x15\\x03\\x02\\x02\\x02\\x02\\x17\\x03\\x02\\x02\\x02\\x02\\x19' +\r\n    '\\x03\\x02\\x02\\x02\\x02\\x1B\\x03\\x02\\x02\\x02\\x02\\x1D\\x03\\x02\\x02\\x02\\x02\\x1F' +\r\n    '\\x03\\x02\\x02\\x02\\x02!\\x03\\x02\\x02\\x02\\x02#\\x03\\x02\\x02\\x02\\x02%\\x03\\x02' +\r\n    \"\\x02\\x02\\x02'\\x03\\x02\\x02\\x02\\x02)\\x03\\x02\\x02\\x02\\x02+\\x03\\x02\\x02\\x02\" +\r\n    '\\x02-\\x03\\x02\\x02\\x02\\x02/\\x03\\x02\\x02\\x02\\x021\\x03\\x02\\x02\\x02\\x023\\x03' +\r\n    '\\x02\\x02\\x02\\x025\\x03\\x02\\x02\\x02\\x03E\\x03\\x02\\x02\\x02\\x05e\\x03\\x02\\x02' +\r\n    '\\x02\\x07y\\x03\\x02\\x02\\x02\\t{\\x03\\x02\\x02\\x02\\v}\\x03\\x02\\x02\\x02\\r\\x80' +\r\n    '\\x03\\x02\\x02\\x02\\x0F\\x82\\x03\\x02\\x02\\x02\\x11\\x85\\x03\\x02\\x02\\x02\\x13\\x87' +\r\n    '\\x03\\x02\\x02\\x02\\x15\\x90\\x03\\x02\\x02\\x02\\x17\\x96\\x03\\x02\\x02\\x02\\x19\\x9E' +\r\n    '\\x03\\x02\\x02\\x02\\x1B\\xAC\\x03\\x02\\x02\\x02\\x1D\\xBD\\x03\\x02\\x02\\x02\\x1F\\xC0' +\r\n    '\\x03\\x02\\x02\\x02!\\xE0\\x03\\x02\\x02\\x02#\\xE2\\x03\\x02\\x02\\x02%\\xE4\\x03\\x02' +\r\n    \"\\x02\\x02'\\xE6\\x03\\x02\\x02\\x02)\\xE8\\x03\\x02\\x02\\x02+\\xEA\\x03\\x02\\x02\\x02\" +\r\n    '-\\xEE\\x03\\x02\\x02\\x02/\\xF1\\x03\\x02\\x02\\x021\\xF4\\x03\\x02\\x02\\x023\\xF7\\x03' +\r\n    '\\x02\\x02\\x025\\xFD\\x03\\x02\\x02\\x027\\u0102\\x03\\x02\\x02\\x029\\u0106\\x03\\x02' +\r\n    '\\x02\\x02;\\u0108\\x03\\x02\\x02\\x02=\\u010A\\x03\\x02\\x02\\x02?@\\x07p\\x02\\x02' +\r\n    '@A\\x07q\\x02\\x02AF\\x07v\\x02\\x02BC\\x07P\\x02\\x02CD\\x07Q\\x02\\x02DF\\x07V\\x02' +\r\n    '\\x02E?\\x03\\x02\\x02\\x02EB\\x03\\x02\\x02\\x02F\\x04\\x03\\x02\\x02\\x02GH\\x07k\\x02' +\r\n    '\\x02HI\\x07u\\x02\\x02IJ\\x07a\\x02\\x02JK\\x07o\\x02\\x02KL\\x07k\\x02\\x02LM\\x07' +\r\n    'u\\x02\\x02MN\\x07u\\x02\\x02NO\\x07k\\x02\\x02OP\\x07p\\x02\\x02Pf\\x07i\\x02\\x02' +\r\n    'QR\\x07K\\x02\\x02RS\\x07u\\x02\\x02ST\\x07a\\x02\\x02TU\\x07O\\x02\\x02UV\\x07k\\x02' +\r\n    '\\x02VW\\x07u\\x02\\x02WX\\x07u\\x02\\x02XY\\x07k\\x02\\x02YZ\\x07p\\x02\\x02Zf\\x07' +\r\n    'i\\x02\\x02[\\\\\\x07K\\x02\\x02\\\\]\\x07U\\x02\\x02]^\\x07a\\x02\\x02^_\\x07O\\x02\\x02' +\r\n    '_`\\x07K\\x02\\x02`a\\x07U\\x02\\x02ab\\x07U\\x02\\x02bc\\x07K\\x02\\x02cd\\x07P\\x02' +\r\n    '\\x02df\\x07I\\x02\\x02eG\\x03\\x02\\x02\\x02eQ\\x03\\x02\\x02\\x02e[\\x03\\x02\\x02' +\r\n    '\\x02f\\x06\\x03\\x02\\x02\\x02gh\\x07g\\x02\\x02hi\\x07z\\x02\\x02ij\\x07k\\x02\\x02' +\r\n    'jk\\x07u\\x02\\x02kl\\x07v\\x02\\x02lz\\x07u\\x02\\x02mn\\x07G\\x02\\x02no\\x07z\\x02' +\r\n    '\\x02op\\x07k\\x02\\x02pq\\x07u\\x02\\x02qr\\x07v\\x02\\x02rz\\x07u\\x02\\x02st\\x07' +\r\n    'G\\x02\\x02tu\\x07Z\\x02\\x02uv\\x07K\\x02\\x02vw\\x07U\\x02\\x02wx\\x07V\\x02\\x02' +\r\n    'xz\\x07U\\x02\\x02yg\\x03\\x02\\x02\\x02ym\\x03\\x02\\x02\\x02ys\\x03\\x02\\x02\\x02' +\r\n    'z\\b\\x03\\x02\\x02\\x02{|\\x07@\\x02\\x02|\\n\\x03\\x02\\x02\\x02}~\\x07@\\x02\\x02~' +\r\n    '\\x7F\\x07?\\x02\\x02\\x7F\\f\\x03\\x02\\x02\\x02\\x80\\x81\\x07>\\x02\\x02\\x81\\x0E\\x03' +\r\n    '\\x02\\x02\\x02\\x82\\x83\\x07>\\x02\\x02\\x83\\x84\\x07?\\x02\\x02\\x84\\x10\\x03\\x02' +\r\n    '\\x02\\x02\\x85\\x86\\x07?\\x02\\x02\\x86\\x12\\x03\\x02\\x02\\x02\\x87\\x88\\x07#\\x02' +\r\n    '\\x02\\x88\\x89\\x07?\\x02\\x02\\x89\\x14\\x03\\x02\\x02\\x02\\x8A\\x8B\\x07K\\x02\\x02' +\r\n    '\\x8B\\x91\\x07P\\x02\\x02\\x8C\\x8D\\x07K\\x02\\x02\\x8D\\x91\\x07p\\x02\\x02\\x8E\\x8F' +\r\n    '\\x07k\\x02\\x02\\x8F\\x91\\x07p\\x02\\x02\\x90\\x8A\\x03\\x02\\x02\\x02\\x90\\x8C\\x03' +\r\n    '\\x02\\x02\\x02\\x90\\x8E\\x03\\x02\\x02\\x02\\x91\\x16\\x03\\x02\\x02\\x02\\x92\\x93\\x07' +\r\n    'q\\x02\\x02\\x93\\x97\\x07t\\x02\\x02\\x94\\x95\\x07Q\\x02\\x02\\x95\\x97\\x07T\\x02\\x02' +\r\n    '\\x96\\x92\\x03\\x02\\x02\\x02\\x96\\x94\\x03\\x02\\x02\\x02\\x97\\x18\\x03\\x02\\x02\\x02' +\r\n    '\\x98\\x99\\x07c\\x02\\x02\\x99\\x9A\\x07p\\x02\\x02\\x9A\\x9F\\x07f\\x02\\x02\\x9B\\x9C' +\r\n    '\\x07C\\x02\\x02\\x9C\\x9D\\x07P\\x02\\x02\\x9D\\x9F\\x07F\\x02\\x02\\x9E\\x98\\x03\\x02' +\r\n    '\\x02\\x02\\x9E\\x9B\\x03\\x02\\x02\\x02\\x9F\\x1A\\x03\\x02\\x02\\x02\\xA0\\xA1\\x07v' +\r\n    '\\x02\\x02\\xA1\\xA2\\x07t\\x02\\x02\\xA2\\xA3\\x07w\\x02\\x02\\xA3\\xAD\\x07g\\x02\\x02' +\r\n    '\\xA4\\xA5\\x07V\\x02\\x02\\xA5\\xA6\\x07T\\x02\\x02\\xA6\\xA7\\x07W\\x02\\x02\\xA7\\xAD' +\r\n    '\\x07G\\x02\\x02\\xA8\\xA9\\x07V\\x02\\x02\\xA9\\xAA\\x07t\\x02\\x02\\xAA\\xAB\\x07w\\x02' +\r\n    '\\x02\\xAB\\xAD\\x07g\\x02\\x02\\xAC\\xA0\\x03\\x02\\x02\\x02\\xAC\\xA4\\x03\\x02\\x02' +\r\n    '\\x02\\xAC\\xA8\\x03\\x02\\x02\\x02\\xAD\\x1C\\x03\\x02\\x02\\x02\\xAE\\xAF\\x07h\\x02' +\r\n    '\\x02\\xAF\\xB0\\x07c\\x02\\x02\\xB0\\xB1\\x07n\\x02\\x02\\xB1\\xB2\\x07u\\x02\\x02\\xB2' +\r\n    '\\xBE\\x07g\\x02\\x02\\xB3\\xB4\\x07H\\x02\\x02\\xB4\\xB5\\x07C\\x02\\x02\\xB5\\xB6\\x07' +\r\n    'N\\x02\\x02\\xB6\\xB7\\x07U\\x02\\x02\\xB7\\xBE\\x07G\\x02\\x02\\xB8\\xB9\\x07H\\x02\\x02' +\r\n    '\\xB9\\xBA\\x07c\\x02\\x02\\xBA\\xBB\\x07n\\x02\\x02\\xBB\\xBC\\x07u\\x02\\x02\\xBC\\xBE' +\r\n    '\\x07g\\x02\\x02\\xBD\\xAE\\x03\\x02\\x02\\x02\\xBD\\xB3\\x03\\x02\\x02\\x02\\xBD\\xB8' +\r\n    '\\x03\\x02\\x02\\x02\\xBE\\x1E\\x03\\x02\\x02\\x02\\xBF\\xC1\\t\\x02\\x02\\x02\\xC0\\xBF' +\r\n    '\\x03\\x02\\x02\\x02\\xC1\\xC2\\x03\\x02\\x02\\x02\\xC2\\xC0\\x03\\x02\\x02\\x02\\xC2\\xC3' +\r\n    '\\x03\\x02\\x02\\x02\\xC3\\xCA\\x03\\x02\\x02\\x02\\xC4\\xC6\\x070\\x02\\x02\\xC5\\xC7' +\r\n    '\\t\\x02\\x02\\x02\\xC6\\xC5\\x03\\x02\\x02\\x02\\xC7\\xC8\\x03\\x02\\x02\\x02\\xC8\\xC6' +\r\n    '\\x03\\x02\\x02\\x02\\xC8\\xC9\\x03\\x02\\x02\\x02\\xC9\\xCB\\x03\\x02\\x02\\x02\\xCA\\xC4' +\r\n    '\\x03\\x02\\x02\\x02\\xCA\\xCB\\x03\\x02\\x02\\x02\\xCB \\x03\\x02\\x02\\x02\\xCC\\xD2' +\r\n    '\\x07$\\x02\\x02\\xCD\\xCE\\x07^\\x02\\x02\\xCE\\xD1\\x07$\\x02\\x02\\xCF\\xD1\\n\\x03' +\r\n    '\\x02\\x02\\xD0\\xCD\\x03\\x02\\x02\\x02\\xD0\\xCF\\x03\\x02\\x02\\x02\\xD1\\xD4\\x03\\x02' +\r\n    '\\x02\\x02\\xD2\\xD3\\x03\\x02\\x02\\x02\\xD2\\xD0\\x03\\x02\\x02\\x02\\xD3\\xD5\\x03\\x02' +\r\n    '\\x02\\x02\\xD4\\xD2\\x03\\x02\\x02\\x02\\xD5\\xE1\\x07$\\x02\\x02\\xD6\\xDC\\x07)\\x02' +\r\n    '\\x02\\xD7\\xD8\\x07^\\x02\\x02\\xD8\\xDB\\x07)\\x02\\x02\\xD9\\xDB\\n\\x03\\x02\\x02\\xDA' +\r\n    '\\xD7\\x03\\x02\\x02\\x02\\xDA\\xD9\\x03\\x02\\x02\\x02\\xDB\\xDE\\x03\\x02\\x02\\x02\\xDC' +\r\n    '\\xDD\\x03\\x02\\x02\\x02\\xDC\\xDA\\x03\\x02\\x02\\x02\\xDD\\xDF\\x03\\x02\\x02\\x02\\xDE' +\r\n    '\\xDC\\x03\\x02\\x02\\x02\\xDF\\xE1\\x07)\\x02\\x02\\xE0\\xCC\\x03\\x02\\x02\\x02\\xE0' +\r\n    '\\xD6\\x03\\x02\\x02\\x02\\xE1\"\\x03\\x02\\x02\\x02\\xE2\\xE3\\x07*\\x02\\x02\\xE3$\\x03' +\r\n    '\\x02\\x02\\x02\\xE4\\xE5\\x07+\\x02\\x02\\xE5&\\x03\\x02\\x02\\x02\\xE6\\xE7\\x07]\\x02' +\r\n    '\\x02\\xE7(\\x03\\x02\\x02\\x02\\xE8\\xE9\\x07_\\x02\\x02\\xE9*\\x03\\x02\\x02\\x02\\xEA' +\r\n    '\\xEB\\x059\\x1D\\x02\\xEB\\xEC\\x057\\x1C\\x02\\xEC\\xED\\x059\\x1D\\x02\\xED,\\x03\\x02' +\r\n    '\\x02\\x02\\xEE\\xEF\\x05=\\x1F\\x02\\xEF\\xF0\\x057\\x1C\\x02\\xF0.\\x03\\x02\\x02\\x02' +\r\n    '\\xF1\\xF2\\x05;\\x1E\\x02\\xF2\\xF3\\x057\\x1C\\x02\\xF30\\x03\\x02\\x02\\x02\\xF4\\xF5' +\r\n    '\\x07.\\x02\\x02\\xF52\\x03\\x02\\x02\\x02\\xF6\\xF8\\t\\x04\\x02\\x02\\xF7\\xF6\\x03\\x02' +\r\n    '\\x02\\x02\\xF8\\xF9\\x03\\x02\\x02\\x02\\xF9\\xF7\\x03\\x02\\x02\\x02\\xF9\\xFA\\x03\\x02' +\r\n    '\\x02\\x02\\xFA\\xFB\\x03\\x02\\x02\\x02\\xFB\\xFC\\b\\x1A\\x02\\x02\\xFC4\\x03\\x02\\x02' +\r\n    '\\x02\\xFD\\xFE\\v\\x02\\x02\\x02\\xFE\\xFF\\x03\\x02\\x02\\x02\\xFF\\u0100\\b\\x1B\\x02' +\r\n    '\\x02\\u01006\\x03\\x02\\x02\\x02\\u0101\\u0103\\t\\x05\\x02\\x02\\u0102\\u0101\\x03' +\r\n    '\\x02\\x02\\x02\\u0103\\u0104\\x03\\x02\\x02\\x02\\u0104\\u0102\\x03\\x02\\x02\\x02\\u0104' +\r\n    '\\u0105\\x03\\x02\\x02\\x02\\u01058\\x03\\x02\\x02\\x02\\u0106\\u0107\\x07<\\x02\\x02' +\r\n    '\\u0107:\\x03\\x02\\x02\\x02\\u0108\\u0109\\x07B\\x02\\x02\\u0109<\\x03\\x02\\x02\\x02' +\r\n    '\\u010A\\u010B\\x07&\\x02\\x02\\u010B>\\x03\\x02\\x02\\x02\\x15\\x02Eey\\x90\\x96\\x9E' +\r\n    '\\xAC\\xBD\\xC2\\xC8\\xCA\\xD0\\xD2\\xDA\\xDC\\xE0\\xF9\\u0104\\x03\\x02\\x03\\x02';\r\n  public static __ATN: ATN;\r\n  public static get _ATN(): ATN {\r\n    if (!PredicateLexer.__ATN) {\r\n      PredicateLexer.__ATN = new ATNDeserializer().deserialize(\r\n        Utils.toCharArray(PredicateLexer._serializedATN)\r\n      );\r\n    }\r\n\r\n    return PredicateLexer.__ATN;\r\n  }\r\n}\r\n","import { ANTLRInputStream, CommonTokenStream } from 'antlr4ts';\nimport { PredicateLexer } from 'Prism.PredicateParser/PredicateLexer';\nimport { NormalizedToken } from './SyntaxHighlightEditable';\n\nconst tokenize = (text: string) => {\n  const chars = new ANTLRInputStream(text);\n  const lexer = new PredicateLexer(chars);\n  const tokens = new CommonTokenStream(lexer);\n\n  const normaliseTokens = (tokens: CommonTokenStream): NormalizedToken[] => {\n    if (!tokens) {\n      return [];\n    }\n\n    const t = tokens\n      .getTokens()\n      .map(\n        (t) =>\n          ({\n            id: t.type,\n            type: lexer.vocabulary.getSymbolicName(t.type),\n            content: t.text,\n          } as NormalizedToken)\n      )\n      .filter((t) => t.id !== -1);\n\n    return t;\n  };\n\n  try {\n    tokens.fill();\n  } catch (e) {}\n\n  return normaliseTokens(tokens);\n};\n\nexport { tokenize };\n","import React, { useMemo, ReactNode } from 'react';\nimport {\n  Table,\n  TableHead,\n  TableBody,\n  TableRow,\n  TableCell,\n} from '@cko/primitives';\nimport styled from 'styled-components';\nimport DeleteButton from 'components/DeleteButton';\n\ninterface Props<T> {\n  items: (T & { id: string })[];\n  itemsToDisplay: Partial<keyof (T & { id: string })>[];\n  cyTag: string;\n  tableHeaders: string[];\n  onDeleteEntry?: (item: T) => void;\n  canDeleteEntry?: boolean;\n  onInteraction?: (item: T) => void;\n}\n\nconst TableWrapper = styled.div`\n  overflow-y: scroll;\n  scrollbar-width: thin;\n\n  ::-webkit-scrollbar {\n    width: 5px;\n    background: transparent; /* Optional: just make scrollbar invisible */\n  }\n\n  ::-webkit-scrollbar-thumb {\n    background: #ccc;\n  }\n`;\n\nconst EmptyTableCell = styled(TableCell)`\n  text-align: center;\n  padding: 0 !important;\n`;\n\nconst DataTable = <T extends {}>({\n  items,\n  itemsToDisplay,\n  cyTag,\n  onDeleteEntry,\n  canDeleteEntry = false,\n  tableHeaders,\n  onInteraction,\n}: Props<T> & { children?: ReactNode }) => {\n  const tableContent = useMemo(() => {\n    if (items.length === 0) {\n      return (\n        <TableRow>\n          <EmptyTableCell colSpan={3}>No results</EmptyTableCell>\n        </TableRow>\n      );\n    }\n\n    return items.map((item, i) => {\n      return (\n        <TableRow\n          data-cy={cyTag}\n          key={i}\n          onInteraction={onInteraction ? () => onInteraction(item) : undefined}\n        >\n          {Object.keys(item).map(\n            (k) =>\n              itemsToDisplay.includes(k as keyof typeof item) && (\n                <TableCell\n                  key={`${k}-${i}`}\n                  style={{\n                    cursor: onInteraction ? 'pointer' : 'default',\n                  }}\n                  width={`${100 / itemsToDisplay.length}%`}\n                >\n                  {item[k as keyof typeof item]}\n                </TableCell>\n              )\n          )}\n          {canDeleteEntry && onDeleteEntry && (\n            <TableCell width={1 / 100}>\n              <DeleteButton onClick={() => onDeleteEntry(item)} />\n            </TableCell>\n          )}\n        </TableRow>\n      );\n    });\n  }, [\n    canDeleteEntry,\n    cyTag,\n    items,\n    onDeleteEntry,\n    itemsToDisplay,\n    onInteraction,\n  ]);\n\n  const tableHeaderContent = useMemo(() => {\n    const headers = canDeleteEntry ? [...tableHeaders, ''] : tableHeaders;\n\n    return (\n      <TableRow>\n        {headers.map((header, index) => {\n          return (\n            <TableCell\n              as=\"th\"\n              key={header}\n              width={\n                canDeleteEntry && headers.length - 1 !== index\n                  ? `${100 / itemsToDisplay.length}%`\n                  : undefined\n              }\n            >\n              {header}\n            </TableCell>\n          );\n        })}\n      </TableRow>\n    );\n  }, [canDeleteEntry, itemsToDisplay.length, tableHeaders]);\n\n  return (\n    <TableWrapper>\n      <Table>\n        <TableHead>{tableHeaderContent}</TableHead>\n        <TableBody>{tableContent}</TableBody>\n      </Table>\n    </TableWrapper>\n  );\n};\n\nexport default DataTable;\n"],"sourceRoot":""}