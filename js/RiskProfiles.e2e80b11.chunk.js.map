{"version":3,"sources":["components/RiskProfileInformation/RiskProfileInformation.tsx","features/RiskProfiles/RiskProfilesInfoModalContainer.tsx","components/Layout/MasterDetailsLayout.tsx","utils/paymentProcessingSteps.ts","components/RiskProfilesSummariesList/RiskProfilesSummariesList.tsx","features/RiskProfiles/RiskProfilesMasterContainer/RiskProfilesMasterContainer.tsx","features/RiskProfiles/DeleteRiskProfileContainer/DeleteRiskProfileContainer.tsx","features/RiskProfiles/RenameRiskProfileContainer/RenameRiskProfileContainer.tsx","features/RiskProfiles/CopyRiskProfile/CopyRiskProfileContainer.tsx","features/RiskProfiles/RiskProfilesDetailsContainer/RiskProfilesDetails.tsx","hooks/useForceUnmount/useForceUnmount.tsx","features/RiskProfiles/RiskProfilesDetailsContainer/RiskProfilesDetailsContainer.tsx","features/RiskProfiles/RiskProfilesInformationsContainer/RiskProfilesInformationsContainer.tsx","features/RiskProfiles/CreateRiskProfileContainer/CreateRiskProfileContainer.tsx","views/RiskProfiles.tsx","components/TooltipButtonWrapper/TooltipButtonWrapper.tsx","hooks/api/riskProfiles/useRiskProfileData.ts","hooks/api/riskProfiles/useRiskProfileSummariesData.ts","hooks/api/riskProfiles/useUpdateRiskProfile.ts","hooks/api/riskProfiles/useCreateRiskProfile.ts","hooks/api/riskProfiles/useDeleteRiskProfile.ts","hooks/api/riskProfiles/useEditRiskProfile.ts","utils/decisions.ts","components/FormikSelectMenu/FormikSelectMenu.tsx","styles/UnorderedList.tsx","forms/CreateRiskProfileForm/CreateRiskProfileValidator.ts","forms/CreateRiskProfileForm/CreateRiskProfileForm.tsx","components/InfoTooltip/InfoTooltip.tsx","components/DecisionRanges/DecisionSlider/DecisionSlider.tsx","components/DecisionRanges/DecisionRow/DecisionRow.tsx","components/DecisionRanges/DecisionRangeContainer/DecisionRangeContainer.tsx","utils/ScoringDecisionList/ScoringDecisionNode.ts","utils/ScoringDecisionList/ScoringDecisionList.ts","hooks/useDecisionRanges/decisionRangeReducer.ts","hooks/useDecisionRanges/useDecisionRanges.ts","components/RiskProfileScoringRulesTable/RiskProfileScoringRulesTable.tsx","forms/AddRiskProfileScoringRuleForm/AddRiskProfileScoringRuleValidator.ts","forms/AddRiskProfileScoringRuleForm/AddRiskProfileScoringRuleForm.tsx","features/RiskProfiles/AddRiskProfilesScoringRuleContainer.tsx","features/RiskProfiles/RiskProfilesScoringRulesContainer.tsx","features/RiskProfiles/useRiskProfileState/riskProfileReducer.ts","features/RiskProfiles/useRiskProfileState/useRiskProfileState.ts","components/SavePrompts/SavePrompt.tsx"],"names":["RiskProfilesInformation","Section","mb","UnorderedList","pl","color","RiskProfilesInfoModalContainer","InfoModal","modalKey","Modals","RISK_PROFILE_INFO","title","MasterDetailLayout","styled","Box","paymentProcesingStepTitlesMap","PaymentProcessingStep","Pre3ds","PostAuth","StyledBox","RiskProfilesSummariesList","paymentProcessingStep","riskProfileSummaries","openModal","useModalManager","ADD_RISK_PROFILE","fontWeight","length","py","px","fontSize","map","riskProfileSummary","Link","to","id","display","data-cy","name","justifyContent","onClick","mode","FormMode","Add","RiskProfilesMasterContainer","useRiskProfileSummariesData","pre3dsStatus","status","pre3dsData","data","pre3dsError","error","postAuthStatus","postAuthData","postAuthError","hasError","as","p","pb","InlineAlert","borderBottom","summaries","DeleteRiskProfileContainer","useState","submissionErrorMessage","setSubmissionError","loading","setLoading","DELETE_RISK_PROFILE","modalData","closeModal","showAlert","useAlerts","history","useHistory","handleClose","handleSuccess","queryCache","invalidateQueries","endpoints","riskProfiles","step","replace","useDeleteRiskProfile","deleteRiskProfile","DeleteConfirmationModal","itemType","itemName","onCancel","onDelete","a","response","RenameRiskProfileContainer","onSuccess","RENAME_RISK_PROFILE","useEditRiskProfile","editRiskProfile","type","CreateRiskProfileForm","initialValues","onSubmit","path","values","deafultButtonText","CopyRiskProfileContainer","COPY_RISK_PROFILE","useCreateRiskProfile","createRiskProfile","useUpdateRiskProfile","updateRiskProfile","handleSubmit","payload","score_decisions","state","decisions","decision","end","scored_rules","push","RiskProfilesDetails","rulesData","riskProfileData","hasPermission","usePermissions","openDeleteRiskProfileModal","openEditRiskProfileModal","openCopyRiskProfileModal","useRiskProfileState","actions","handleSave","when","hasEdited","promptKey","params","pathname","includes","Prompts","SwitchRiskProfilesSavePrompt","LeaveRiskProfilesSavePrompt","MasterDetailsHeader","alignItems","mr","SpacedButtonGroup","variant","TooltipButtonWrapper","enabled","text","disabled","data-testid","RiskProfilesScoringRulesContainer","scoredRules","handleScoredRuleUpdate","handleScoredRuleChange","addScoringRule","handleAddScoredRule","handleDeleteRiskProfileRule","rules","riskProfileName","handleUpdateScoringRange","handleDecisionChange","handleEnableDecision","handleDisableDecision","handleUpdateName","useForceUnmount","on","shouldUnmount","setShouldUnmount","useEffect","RiskProfileDetailsContainer","useParams","useRiskProfileData","riskProfileDataStatus","riskProfileDataError","isFetching","useRulesData","rulesDataStatus","rulesDataError","Loader","size","is404Error","height","lineHeight","href","RiskProfileInformationsContainer","CreateRiskProfileContainer","Container","div","RiskProfiles","PageHeader","component","RiskProfilesDetailsContainer","RiskProfilesInformationsContainer","children","defaultDirection","show","setShow","onMouseEnter","onMouseLeave","req","useGetRequest","useQuery","riskProfilesStep","useAddUpdateMutation","useDeleteMutation","convertDecisionsToActions","decisionMap","Object","entries","value","label","pre3dsDecisionDescriptionMap","Pre3dsDecisions","Decline","Challenge","NoPreference","FrictionlessLiability","TryExemptions","pre3ds2DecisionDisplayValueMap","pre3ds1DecisionDisplayValueMap","getPre3dsDecisionDisplayValueMap","version","ThreeDSVersion","One","Two","postAuthDecisionDisplayValueMap","PostAuthDecisions","Capture","Flag","Void","threeDS1DecisionFilter","getDecisionDisplayValue","key","postAuthDecisionDescriptionMap","getDecisionMap","displayValues","descriptions","decisionPriorityMap","decisionTypeMap","FormikSelectMenu","options","placeholder","getItemLabel","item","getItemValue","useField","meta","setValue","setTouched","errorMessage","useFormikContext","submitCount","showError","undefined","handleOnChange","useCallback","selected","useMemo","find","x","isEqual","onChange","selectedItem","itemToString","hasErrors","i","index","mt","FieldValidationError","StyledUnorderedList","createRiskProfileValidator","createValidator","required","maxLength","expectedCharacters","hasSubmissionError","setHasSubmissionError","validate","validateOnChange","setSubmitting","isSubmitting","TextField","InfoTooltip","ml","style","verticalAlign","CustomTrack","CustomThumb","ThumbLabel","DecisionSlider","start","min","max","renderTrack","props","onMouseDown","onTouchStart","ref","background","getTrackBackground","colors","renderThumb","DecisionRow","enabledCount","handleSliderChange","checked","getPreviousEnd","next","DecisionRangeContainer","reduce","count","pr","width","React","memo","ScoringDecisionNode","constructor","prev","nextEnd","prevEnd","this","findPrevEndNode","node","findNextEndNode","pushOverlappingNextNodes","currentNode","nextNode","Math","fixPreviousOverlappingNodes","prevNode","differenceInRange","previousNodesTouching","currentEnd","touchingPreviousNode","ScoringDecisionList","head","endHead","endTail","tail","add","hasEnd","findByDecision","currentItem","toArray","arr","toEndArray","decisionRangeReducer","action","scoringDecisionsLinkedList","forEach","scoreDecision","decisionNode","overlapsWithStartOfNextDecision","overlapsWithFirstDecision","startEndOverlap","offset","prevEndNode","nextEndNode","setNodes","newEnd","useDecisionRanges","scoringDecisions","setHasEdited","initialState","sort","y","useReducer","dispatch","digitsOnly","RiskProfileScoringRulesTable","tableLayout","textAlign","scoredRule","e","target","test","score","onBlur","Number","DeleteButton","scoring_rule_id","colSpan","integer","rule","requiredObject","AddRiskProfileScoringRuleForm","scoringRules","tags","predicate","addRiskProfileScoringRuleValidator","scoringRule","scoringRuleWithoutTags","AddRiskProfilesScoringRuleContainer","ADD_RISK_PROFILE_SCORING_RULE","AssignIcon","IconActionAdd","theme","space","filteredRules","selectedIds","filter","risk_profiles","addScoringRuleMessage","addScoringRuleTooltipMessage","pointerEvents","reducer","scoredRuleToUpdate","initialScoredRuleState","riskProfileReducer","decisionRangeState","decisionRangeActions","SavePrompt","message","useLocation","handleBeforeunload","evt","preventDefault","returnValue","window","addEventListener","removeEventListener"],"mappings":"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","file":"static/js/RiskProfiles.e2e80b11.chunk.js","sourcesContent":["import React from 'react';\nimport Section from 'components/Section';\nimport { ParagraphText } from 'components/Text';\nimport { TextHeadingThree, ListItem, TextHeadingTwo } from '@cko/primitives';\nimport UnorderedList from 'styles/UnorderedList';\n\nconst RiskProfilesInformation = () => {\n  return (\n    <article>\n      <Section>\n        <TextHeadingTwo mb={2}>Overview</TextHeadingTwo>\n\n        <ParagraphText>\n          Risk profiles are a mechanism for scoring-based decision-making. It\n          allows weighting multiple criteria simultaneously rather than\n          one-by-one and having each of these criteria contribute to the final\n          risk score. Risk profiles are best used for situations where very\n          precise segmentation is difficult or impractical and so a segment can\n          contain transactions of various risk levels.\n        </ParagraphText>\n\n        <ParagraphText>Every risk profile has two sections:</ParagraphText>\n\n        <UnorderedList pl={3}>\n          <ListItem>\n            <ParagraphText>\n              Scoring section (at the top of the page) where a risk score of a\n              transaction is determined.\n            </ParagraphText>\n          </ListItem>\n          <ListItem>\n            <ParagraphText>\n              Decision section (at the bottom of the page) where a risk score is\n              mapped to a specific decision.\n            </ParagraphText>\n          </ListItem>\n        </UnorderedList>\n      </Section>\n\n      <Section>\n        <TextHeadingThree mb={2} color=\"success\">\n          Scoring section\n        </TextHeadingThree>\n\n        <ParagraphText>\n          The outcome of scoring is a number from 0 to 100 that represents a\n          probability that a given transaction is fraudulent. So the lower the\n          number the lower the risk.\n        </ParagraphText>\n\n        <ParagraphText>\n          Scoring is based on rules. You can select as many rules as you want to\n          be evaluated for every transaction that falls into a given risk\n          profile. The order of the rules is not important. Every rule in a risk\n          profile will be evaluated.\n        </ParagraphText>\n\n        <ParagraphText>\n          A corresponding score is assigned to each rule. This score can be\n          either a positive or a negative number. If a rule is true its score\n          will increase or decrease the transaction risk score.\n        </ParagraphText>\n\n        <ParagraphText>\n          The ultimate risk score of a transaction is the sum of scores of all\n          the rules that were found to be true for that transaction.{' '}\n        </ParagraphText>\n\n        <ParagraphText>\n          Note: A transaction risk score must always be a number from 0 to 100.\n          If the sum of rules' scores is less than 0 transaction’s risk score\n          will be set to 0. If the sum of rules' scores is greater than 100\n          transaction’s risk score will be set to 100.{' '}\n        </ParagraphText>\n      </Section>\n\n      <Section>\n        <TextHeadingThree mb={2} color=\"success\">\n          Decision section\n        </TextHeadingThree>\n\n        <ParagraphText>\n          In decision section you can select which decisions will be applicable\n          for a given risk profile. The set of the decisions to chose from will\n          depend on the risk profile type.\n        </ParagraphText>\n\n        <ParagraphText>\n          Risk profile types correspond to Routing types:\n        </ParagraphText>\n\n        <UnorderedList pl={3}>\n          <ListItem>\n            <ParagraphText>Pre3DS</ParagraphText>\n          </ListItem>\n          <ListItem>\n            <ParagraphText>PreAUTH (coming soon)</ParagraphText>\n          </ListItem>\n          <ListItem>\n            <ParagraphText>PostAUTH (coming soon)</ParagraphText>\n          </ListItem>\n        </UnorderedList>\n\n        <ParagraphText>\n          Once the applicable decisions have been selected, you can define the\n          risk score bands that correspond to them. For example, you may decide\n          to Decline all transactions with risk score above 90 and to Force\n          challenge all transactions with risk scores between 70 and 90.\n        </ParagraphText>\n      </Section>\n    </article>\n  );\n};\n\nexport default RiskProfilesInformation;\n","import React from 'react';\nimport { Modals } from 'types/enums/modals';\nimport InfoModal from 'components/InfoModal';\nimport RiskProfilesInformation from 'components/RiskProfileInformation';\n\nconst RiskProfilesInfoModalContainer = () => (\n  <InfoModal modalKey={Modals.RISK_PROFILE_INFO} title={`Risk profiles`}>\n    <RiskProfilesInformation />\n  </InfoModal>\n);\n\nexport default RiskProfilesInfoModalContainer;\n","import styled from 'styled-components';\nimport { Box } from '@cko/primitives';\n\nconst MasterDetailLayout = styled(Box)`\n  display: grid;\n  grid-template-columns: 220px auto;\n  grid-gap: 12px;\n`;\n\nexport { MasterDetailLayout };\n","import { PaymentProcessingStep } from 'types/models';\n\nexport const paymentProcesingStepTitlesMap = {\n  [PaymentProcessingStep.Pre3ds]: 'Pre 3ds',\n  [PaymentProcessingStep.PostAuth]: 'Post Auth',\n};\n","import React from 'react';\nimport { Text, Flex, SecondaryButton, Box } from '@cko/primitives';\nimport Link from 'components/PrimaryNav/Link';\nimport {\n  RiskProfileSummaries,\n  PaymentProcessingStep,\n  FormMode,\n} from 'types/models';\nimport { paymentProcesingStepTitlesMap } from 'utils/paymentProcessingSteps';\nimport useModalManager from 'hooks/useModalManager';\nimport { Modals } from 'types/enums/modals';\nimport styled from 'styled-components';\n\ninterface Props {\n  paymentProcessingStep: PaymentProcessingStep;\n  riskProfileSummaries: RiskProfileSummaries[];\n}\n\nconst StyledBox = styled(Box)`\n  word-wrap: break-word;\n`;\n\nconst RiskProfilesSummariesList: React.FunctionComponent<Props> = ({\n  paymentProcessingStep,\n  riskProfileSummaries,\n}) => {\n  const { openModal } = useModalManager<{\n    mode: FormMode;\n    paymentProcessingStep: PaymentProcessingStep;\n  }>(Modals.ADD_RISK_PROFILE);\n\n  return (\n    <>\n      <Text fontWeight={500} mb={2}>\n        {paymentProcesingStepTitlesMap[paymentProcessingStep]}\n      </Text>\n\n      {riskProfileSummaries.length === 0 && (\n        <Box py={2} px=\"12px\" mb={2}>\n          <Text fontSize={0} color=\"base\">\n            No Risk profiles\n          </Text>\n        </Box>\n      )}\n\n      {riskProfileSummaries.map((riskProfileSummary) => {\n        return (\n          <StyledBox key={riskProfileSummary.id}>\n            <Link\n              to={`/risk-profiles/${paymentProcessingStep}/${riskProfileSummary.id}`}\n              display=\"block\"\n              data-cy=\"risk-profiles-link\"\n            >\n              {riskProfileSummary.name}\n            </Link>\n          </StyledBox>\n        );\n      })}\n\n      <Flex justifyContent=\"center\" mb={3}>\n        <SecondaryButton\n          onClick={() => {\n            openModal({\n              mode: FormMode.Add,\n              paymentProcessingStep,\n            });\n          }}\n        >\n          Create new risk profile\n        </SecondaryButton>\n      </Flex>\n    </>\n  );\n};\n\nexport default RiskProfilesSummariesList;\n","import React from 'react';\nimport { Panel, Box } from '@cko/primitives';\nimport { useRiskProfileSummariesData } from 'hooks/api/riskProfiles';\nimport { PaymentProcessingStep } from 'types/models';\nimport RiskProfilesSummariesList from 'components/RiskProfilesSummariesList';\nimport { SidebarLinksPlaceholder } from 'components/Placeholders';\nimport InlineAlert from 'components/InlineAlert';\n\nconst RiskProfilesMasterContainer = () => {\n  const {\n    status: pre3dsStatus,\n    data: pre3dsData,\n    error: pre3dsError,\n  } = useRiskProfileSummariesData(PaymentProcessingStep.Pre3ds);\n\n  const {\n    status: postAuthStatus,\n    data: postAuthData,\n    error: postAuthError,\n  } = useRiskProfileSummariesData(PaymentProcessingStep.PostAuth);\n\n  const loading = pre3dsStatus === 'loading' || postAuthStatus === 'loading';\n  const hasError = pre3dsError || postAuthError;\n\n  if (loading) {\n    return (\n      <Panel as=\"aside\" p={0} px={3} py={3}>\n        <SidebarLinksPlaceholder length={4} />\n      </Panel>\n    );\n  }\n\n  if (hasError) {\n    return (\n      <Panel as=\"aside\" p={0} px={3} pb={3}>\n        <InlineAlert>Error fetching risk profiles</InlineAlert>\n      </Panel>\n    );\n  }\n\n  return (\n    <Panel as=\"aside\" p={0} px={3} py={3}>\n      <Box mb={4} borderBottom={'baseLight.1'}>\n        <RiskProfilesSummariesList\n          paymentProcessingStep={PaymentProcessingStep.Pre3ds}\n          riskProfileSummaries={pre3dsData!.summaries}\n        />\n      </Box>\n\n      <RiskProfilesSummariesList\n        paymentProcessingStep={PaymentProcessingStep.PostAuth}\n        riskProfileSummaries={postAuthData!.summaries}\n      />\n    </Panel>\n  );\n};\n\nexport default RiskProfilesMasterContainer;\n","import React, { useState } from 'react';\nimport useModalManager from 'hooks/useModalManager';\nimport { Modals } from 'types/enums/modals';\nimport useAlerts from 'hooks/useAlerts';\nimport DeleteConfirmationModal from 'components/DeleteConfirmationModal/DeleteConfirmationModal';\nimport { useDeleteRiskProfile } from 'hooks/api/riskProfiles';\nimport { useHistory } from 'react-router-dom';\nimport { PaymentProcessingStep } from 'types/models';\nimport { queryCache } from 'react-query';\nimport endpoints from 'api/endpoints';\n\nexport interface RiskProfileModalData {\n  step: PaymentProcessingStep;\n  id: string;\n  name: string;\n}\n\nconst DeleteRiskProfileContainer = () => {\n  const [submissionErrorMessage, setSubmissionError] = useState<string | null>(\n    null\n  );\n  const [loading, setLoading] = useState(false);\n\n  const { modalData, closeModal } = useModalManager<RiskProfileModalData>(\n    Modals.DELETE_RISK_PROFILE\n  );\n\n  const { showAlert } = useAlerts();\n\n  const history = useHistory();\n\n  const handleClose = () => {\n    setSubmissionError(null);\n    closeModal();\n  };\n\n  const handleSuccess = () => {\n    showAlert('Risk profile successfully deleted');\n    handleClose();\n    queryCache.invalidateQueries([endpoints.riskProfiles, modalData?.step]);\n    history.replace(`/risk-profiles`);\n  };\n\n  const [deleteRiskProfile] = useDeleteRiskProfile(handleSuccess);\n\n  if (!modalData) {\n    return null;\n  }\n\n  return (\n    <DeleteConfirmationModal\n      itemType=\"Risk Profile\"\n      handleClose={handleClose}\n      submissionErrorMessage={submissionErrorMessage}\n      loading={loading}\n      itemName={modalData.name}\n      onCancel={handleClose}\n      onDelete={async () => {\n        setLoading(true);\n\n        try {\n          await deleteRiskProfile(`${modalData.step}/${modalData.id}`);\n          setLoading(false);\n          handleSuccess();\n        } catch (error) {\n          if (error.response?.status === 409) {\n            setSubmissionError(\n              `This risk profile is referenced in Routing and cannot be deleted.`\n            );\n          } else {\n            setSubmissionError('Technical error. Please try again later.');\n          }\n          setLoading(false);\n        }\n      }}\n    />\n  );\n};\n\nexport default DeleteRiskProfileContainer;\n","import React from 'react';\nimport useModalManager from 'hooks/useModalManager';\nimport { Modals } from 'types/enums/modals';\nimport { PaymentProcessingStep } from 'types/models';\nimport { Modal } from '@cko/primitives';\nimport { paymentProcesingStepTitlesMap } from 'utils/paymentProcessingSteps';\nimport CreateRiskProfileForm from 'forms/CreateRiskProfileForm';\nimport useAlerts from 'hooks/useAlerts';\nimport { useEditRiskProfile } from 'hooks/api/riskProfiles';\nimport { CreateRiskProfileFormData } from 'forms/CreateRiskProfileForm/CreateRiskProfileForm';\nimport { queryCache } from 'react-query';\nimport endpoints from 'api/endpoints';\n\ninterface Props {\n  onSuccess: (values: CreateRiskProfileFormData) => void;\n}\n\nexport interface RenameRiskProfileModalData {\n  paymentProcessingStep: PaymentProcessingStep;\n  name: string;\n  id: string;\n}\n\nconst RenameRiskProfileContainer: React.FunctionComponent<Props> = ({\n  onSuccess,\n}) => {\n  const { modalData, closeModal } = useModalManager<RenameRiskProfileModalData>(\n    Modals.RENAME_RISK_PROFILE\n  );\n\n  const { showAlert } = useAlerts();\n\n  const handleSuccess = (values: CreateRiskProfileFormData) => {\n    showAlert('Risk profile edited');\n    closeModal();\n    onSuccess(values);\n    queryCache.invalidateQueries([\n      endpoints.riskProfiles,\n      paymentProcessingStep,\n    ]);\n  };\n\n  const [editRiskProfile] = useEditRiskProfile(\n    modalData?.paymentProcessingStep || ('' as PaymentProcessingStep)\n  );\n\n  const handleSubmit = ({ data }: { data: CreateRiskProfileFormData }) => {\n    return editRiskProfile({ data, path: `${modalData?.id}/name` });\n  };\n\n  if (!modalData) {\n    return null;\n  }\n\n  const { paymentProcessingStep, name } = modalData;\n\n  return (\n    <Modal\n      type=\"success\"\n      title={`Rename risk profile (${paymentProcesingStepTitlesMap[paymentProcessingStep]})`}\n      closeModal={closeModal}\n    >\n      <CreateRiskProfileForm\n        initialValues={{ name }}\n        onSubmit={handleSubmit}\n        onCancel={closeModal}\n        onSuccess={handleSuccess}\n        deafultButtonText=\"Rename\"\n      />\n    </Modal>\n  );\n};\n\nexport default RenameRiskProfileContainer;\n","import React from 'react';\nimport useModalManager from 'hooks/useModalManager';\nimport { Modals } from 'types/enums/modals';\nimport { PaymentProcessingStep, RiskProfileState } from 'types/models';\nimport { Modal } from '@cko/primitives';\nimport { paymentProcesingStepTitlesMap } from 'utils/paymentProcessingSteps';\nimport CreateRiskProfileForm from 'forms/CreateRiskProfileForm';\nimport useAlerts from 'hooks/useAlerts';\nimport {\n  useCreateRiskProfile,\n  useUpdateRiskProfile,\n  useDeleteRiskProfile,\n} from 'hooks/api/riskProfiles';\nimport { useHistory } from 'react-router-dom';\nimport { CreateRiskProfileFormData } from 'forms/CreateRiskProfileForm/CreateRiskProfileForm';\nimport { queryCache } from 'react-query';\nimport endpoints from 'api/endpoints';\n\nexport interface CopyRiskProfileModalData {\n  step: PaymentProcessingStep;\n  state: RiskProfileState;\n}\n\nconst CopyRiskProfileContainer: React.FunctionComponent = () => {\n  const { modalData, closeModal } = useModalManager<CopyRiskProfileModalData>(\n    Modals.COPY_RISK_PROFILE\n  );\n\n  const { showAlert } = useAlerts();\n  const history = useHistory();\n\n  const handleSuccess = (id: string) => {\n    showAlert('Risk profile successfully duplicated');\n    closeModal();\n    history.push(`/risk-profiles/${modalData?.step}/${id}`);\n  };\n\n  const [createRiskProfile] = useCreateRiskProfile(\n    modalData?.step || ('' as PaymentProcessingStep)\n  );\n\n  const [updateRiskProfile] = useUpdateRiskProfile();\n\n  const [deleteRiskProfile] = useDeleteRiskProfile(() => {});\n\n  if (!modalData) {\n    return null;\n  }\n\n  const { step } = modalData;\n\n  const handleSubmit = async (data: { data: CreateRiskProfileFormData }) => {\n    const payload = {\n      score_decisions: modalData.state.decisions.map((decision) => ({\n        decision: decision.decision,\n        end: decision.end ? decision.end : null,\n      })),\n      scored_rules: modalData.state.scored_rules,\n    };\n    const response = await createRiskProfile(data);\n\n    if (response) {\n      try {\n        await updateRiskProfile(\n          {\n            data: payload,\n            path: `${step}/${response.id}/config`,\n          },\n          { onSuccess: () => handleSuccess(response.id) }\n        );\n        queryCache.invalidateQueries([endpoints.riskProfiles, step]);\n      } catch (e) {\n        await deleteRiskProfile(`${step}/${response.id}`);\n        throw e;\n      }\n    }\n  };\n\n  return (\n    <Modal\n      type=\"success\"\n      title={`Duplicate risk profile (${paymentProcesingStepTitlesMap[step]})`}\n      closeModal={closeModal}\n    >\n      <CreateRiskProfileForm\n        onSubmit={handleSubmit}\n        onCancel={closeModal}\n        initialValues={{ name: `${modalData.state.name} copy` }}\n        deafultButtonText=\"Duplicate\"\n      />\n    </Modal>\n  );\n};\n\nexport default CopyRiskProfileContainer;\n","import React from 'react';\nimport {\n  Panel,\n  Flex,\n  PrimaryButton,\n  AlertButton,\n  TextHeadingTwo,\n  SecondaryButton,\n  Box,\n  ClickableElement,\n} from '@cko/primitives';\nimport RiskProfilesDecisionContainer from 'components/DecisionRanges/DecisionRangeContainer';\nimport RiskProfilesScoringRulesContainer from '../RiskProfilesScoringRulesContainer';\nimport {\n  PaymentProcessingStep,\n  Prompts,\n  RiskProfileResponse,\n  ScoringRuleResponse,\n} from 'types/models';\nimport DeleteRiskProfileContainer from '../DeleteRiskProfileContainer';\nimport {\n  MasterDetailsHeaderLayoutRight,\n  MasterDetailsHeaderLayout,\n  MasterDetailsHeaderLayoutLeft,\n} from 'components/MasterDetailsHeader';\nimport { IconActionEdit } from '@cko/icons';\nimport RenameRiskProfileContainer from '../RenameRiskProfileContainer';\nimport { CreateRiskProfileFormData } from 'forms/CreateRiskProfileForm/CreateRiskProfileForm';\nimport CopyRiskProfileContainer from '../CopyRiskProfile';\nimport TooltipButtonWrapper from 'components/TooltipButtonWrapper';\nimport SpacedButtonGroup from 'components/SpacedButtonGroup';\nimport useModalManager from 'hooks/useModalManager';\nimport usePermissions from 'hooks/usePermissions';\nimport { Modals } from 'types/enums/modals';\nimport { RenameRiskProfileModalData } from '../RenameRiskProfileContainer/RenameRiskProfileContainer';\nimport { CopyRiskProfileModalData } from '../CopyRiskProfile/CopyRiskProfileContainer';\nimport { RiskProfileModalData } from '../DeleteRiskProfileContainer/DeleteRiskProfileContainer';\nimport useRiskProfileState from '../useRiskProfileState';\nimport { useUpdateRiskProfile } from 'hooks/api/riskProfiles';\nimport useAlerts from 'hooks/useAlerts';\nimport { SavePrompt } from 'components/SavePrompts';\n\ntype Props = {\n  step: PaymentProcessingStep;\n  id: string;\n  rulesData: ScoringRuleResponse;\n  riskProfileData: RiskProfileResponse;\n};\n\nconst RiskProfilesDetails: React.FC<Props> = ({\n  step,\n  id,\n  rulesData,\n  riskProfileData,\n}) => {\n  const { hasPermission } = usePermissions();\n  const [updateRiskProfile] = useUpdateRiskProfile();\n  const { showAlert } = useAlerts();\n\n  const {\n    openModal: openDeleteRiskProfileModal,\n  } = useModalManager<RiskProfileModalData>(Modals.DELETE_RISK_PROFILE);\n\n  const {\n    openModal: openEditRiskProfileModal,\n  } = useModalManager<RenameRiskProfileModalData>(Modals.RENAME_RISK_PROFILE);\n\n  const {\n    openModal: openCopyRiskProfileModal,\n  } = useModalManager<CopyRiskProfileModalData>(Modals.COPY_RISK_PROFILE);\n\n  const { state, actions } = useRiskProfileState(riskProfileData);\n\n  const handleSave = async () => {\n    try {\n      const payload = {\n        score_decisions: state.decisions.map((decision) => ({\n          decision: decision.decision,\n          end: decision.end ? decision.end : null,\n        })),\n        scored_rules: state.scored_rules,\n      };\n\n      await updateRiskProfile({ data: payload, path: `${step}/${id}/config` });\n      showAlert('Successfully saved risk profile', {\n        type: 'success',\n      });\n      actions.handleSave();\n    } catch {\n      showAlert('Error saving risk profile', {\n        type: 'alert',\n      });\n    }\n  };\n\n  return (\n    <main>\n      <SavePrompt\n        when={state.hasEdited}\n        promptKey={(params) => {\n          if (params.pathname.includes('risk-profiles')) {\n            return Prompts.SwitchRiskProfilesSavePrompt;\n          }\n          return Prompts.LeaveRiskProfilesSavePrompt;\n        }}\n      />\n      {hasPermission('prism:risk-profile:write') && (\n        <Panel mb=\"12px\" p={0}>\n          <MasterDetailsHeaderLayout>\n            <MasterDetailsHeaderLayoutLeft>\n              <Box>\n                <Flex alignItems=\"baseline\">\n                  <TextHeadingTwo mr={2}>{`${state.name}`}</TextHeadingTwo>\n                  <ClickableElement\n                    data-cy=\"edit-risk-profile-button\"\n                    onClick={() =>\n                      openEditRiskProfileModal({\n                        paymentProcessingStep: step as PaymentProcessingStep,\n                        id,\n                        name: state.name,\n                      })\n                    }\n                  >\n                    <IconActionEdit />\n                  </ClickableElement>\n                </Flex>\n              </Box>\n            </MasterDetailsHeaderLayoutLeft>\n            <MasterDetailsHeaderLayoutRight>\n              <SpacedButtonGroup>\n                <AlertButton\n                  variant=\"large\"\n                  onClick={() => {\n                    openDeleteRiskProfileModal({\n                      step: step as PaymentProcessingStep,\n                      id,\n                      name: state.name,\n                    });\n                  }}\n                >\n                  Delete risk profile\n                </AlertButton>\n                <TooltipButtonWrapper\n                  enabled={state.hasEdited}\n                  text=\"You cannot copy a risk profile with unsaved changes\"\n                >\n                  <Box mr={3}>\n                    <SecondaryButton\n                      variant=\"large\"\n                      disabled={state.hasEdited}\n                      onClick={() => {\n                        openCopyRiskProfileModal({\n                          step: step as PaymentProcessingStep,\n                          state,\n                        });\n                      }}\n                    >\n                      Duplicate risk profile\n                    </SecondaryButton>\n                  </Box>\n                </TooltipButtonWrapper>\n                <PrimaryButton\n                  variant=\"large\"\n                  disabled={!state.hasEdited}\n                  onClick={handleSave}\n                  data-testid=\"risk-profile-save-button\"\n                >\n                  Publish changes\n                </PrimaryButton>\n              </SpacedButtonGroup>\n            </MasterDetailsHeaderLayoutRight>\n          </MasterDetailsHeaderLayout>\n        </Panel>\n      )}\n      <Panel p={0} mb={3}>\n        <RiskProfilesScoringRulesContainer\n          scoredRules={state.scored_rules}\n          handleScoredRuleUpdate={actions.handleScoredRuleChange}\n          addScoringRule={actions.handleAddScoredRule}\n          handleDeleteRiskProfileRule={actions.handleDeleteRiskProfileRule}\n          rules={rulesData?.summaries || []}\n          riskProfileName={state.name}\n        />\n      </Panel>\n      <Panel p={0}>\n        <RiskProfilesDecisionContainer\n          decisions={state.decisions}\n          handleUpdateScoringRange={actions.handleDecisionChange}\n          handleEnableDecision={actions.handleEnableDecision}\n          handleDisableDecision={actions.handleDisableDecision}\n          paymentProcessingStep={step as PaymentProcessingStep}\n        />\n      </Panel>\n      <DeleteRiskProfileContainer />\n      <RenameRiskProfileContainer\n        onSuccess={(values: CreateRiskProfileFormData) => {\n          actions.handleUpdateName(values.name);\n        }}\n      />\n      <CopyRiskProfileContainer />\n    </main>\n  );\n};\n\nexport default RiskProfilesDetails;\n","import { useState, useEffect } from 'react';\n\nconst useForceUnmount = (on: boolean) => {\n  const [shouldUnmount, setShouldUnmount] = useState(false);\n\n  useEffect(() => {\n    setShouldUnmount(true);\n  }, [on]);\n\n  useEffect(() => {\n    setShouldUnmount(false);\n  }, [shouldUnmount]);\n\n  return shouldUnmount;\n};\n\nexport default useForceUnmount;\n","import React from 'react';\nimport { Flex, Text, Link } from '@cko/primitives';\nimport { useRiskProfileData } from 'hooks/api/riskProfiles';\nimport { PaymentProcessingStep } from 'types/models';\nimport { useParams } from 'react-router-dom';\nimport { ErrorPanel } from 'components/ErrorScreen/ErrorScreen';\nimport Loader from 'components/Loader';\nimport RiskProfilesDetails from './RiskProfilesDetails';\nimport { useRulesData } from 'hooks/api/rules';\nimport { is404Error } from 'utils/errors';\nimport useForceUnmount from 'hooks/useForceUnmount';\n\nconst RiskProfileDetailsContainer = () => {\n  const { step, id } = useParams<{ step: PaymentProcessingStep; id: string }>();\n\n  const {\n    data: riskProfileData,\n    status: riskProfileDataStatus,\n    error: riskProfileDataError,\n    isFetching,\n  } = useRiskProfileData(step as PaymentProcessingStep, id);\n\n  const shouldUnmount = useForceUnmount(isFetching);\n\n  const {\n    data: rulesData,\n    status: rulesDataStatus,\n    error: rulesDataError,\n  } = useRulesData();\n\n  const loadingRiskProfileData = riskProfileDataStatus === 'loading';\n  const loadingRulesData = rulesDataStatus === 'loading';\n\n  const loading = loadingRiskProfileData || loadingRulesData;\n  const hasError = !!(riskProfileDataError || rulesDataError);\n\n  if (loading) {\n    return (\n      <Flex justifyContent=\"center\">\n        <Loader size=\"large\" />\n      </Flex>\n    );\n  }\n\n  if (hasError) {\n    if (riskProfileDataError && is404Error(riskProfileDataError)) {\n      return (\n        <Flex\n          justifyContent=\"center\"\n          alignItems=\"center\"\n          height=\"calc(100vh - 120px)\"\n        >\n          <ErrorPanel>\n            <Text fontSize={1} lineHeight={1}>\n              Looks like that risk profile doesnt exist\n            </Text>\n          </ErrorPanel>\n        </Flex>\n      );\n    }\n\n    return (\n      <Flex\n        justifyContent=\"center\"\n        alignItems=\"center\"\n        height=\"calc(100vh - 120px)\"\n      >\n        <ErrorPanel>\n          <Text fontSize={1} lineHeight={1}>\n            Something went wrong. Please try again or you can get in touch with\n            the support team at:\n            <Link href=\"mailto:prism-support@checkout.com\">\n              prism-support@checkout.com\n            </Link>\n          </Text>\n        </ErrorPanel>\n      </Flex>\n    );\n  }\n\n  if (!(riskProfileData && rulesData) || shouldUnmount) {\n    return null;\n  }\n\n  return (\n    <RiskProfilesDetails\n      id={id}\n      step={step as PaymentProcessingStep}\n      riskProfileData={riskProfileData}\n      rulesData={rulesData}\n    />\n  );\n};\n\nexport default RiskProfileDetailsContainer;\n","import React from 'react';\nimport { Panel } from '@cko/primitives';\nimport RiskProfilesInformation from 'components/RiskProfileInformation';\n\nconst RiskProfileInformationsContainer = () => {\n  return (\n    <main>\n      <Panel p={3}>\n        <RiskProfilesInformation />\n      </Panel>\n    </main>\n  );\n};\n\nexport default RiskProfileInformationsContainer;\n","import React from 'react';\nimport useModalManager from 'hooks/useModalManager';\nimport { Modals } from 'types/enums/modals';\nimport { PaymentProcessingStep } from 'types/models';\nimport { Modal } from '@cko/primitives';\nimport { paymentProcesingStepTitlesMap } from 'utils/paymentProcessingSteps';\nimport CreateRiskProfileForm from 'forms/CreateRiskProfileForm';\nimport useAlerts from 'hooks/useAlerts';\nimport { useCreateRiskProfile } from 'hooks/api/riskProfiles';\nimport { useHistory } from 'react-router-dom';\nimport { queryCache } from 'react-query';\nimport endpoints from 'api/endpoints';\n\nconst CreateRiskProfileContainer: React.FunctionComponent = () => {\n  const { modalData, closeModal } = useModalManager<{\n    paymentProcessingStep: PaymentProcessingStep;\n  }>(Modals.ADD_RISK_PROFILE);\n\n  const { showAlert } = useAlerts();\n  const history = useHistory();\n\n  const handleSuccess = (id: string) => {\n    showAlert('Risk profile created');\n    closeModal();\n    queryCache.invalidateQueries([\n      endpoints.riskProfiles,\n      modalData?.paymentProcessingStep,\n    ]);\n    history.push(`/risk-profiles/${modalData?.paymentProcessingStep}/${id}`);\n  };\n\n  const [createRiskProfile] = useCreateRiskProfile(\n    modalData?.paymentProcessingStep || ('' as PaymentProcessingStep),\n    handleSuccess\n  );\n\n  if (!modalData) {\n    return null;\n  }\n\n  const { paymentProcessingStep } = modalData;\n\n  return (\n    <Modal\n      type=\"success\"\n      title={`Create new risk profile (${paymentProcesingStepTitlesMap[paymentProcessingStep]})`}\n      closeModal={closeModal}\n    >\n      <CreateRiskProfileForm\n        onSubmit={createRiskProfile}\n        onCancel={closeModal}\n        initialValues={{ name: '' }}\n      />\n    </Modal>\n  );\n};\n\nexport default CreateRiskProfileContainer;\n","import React from 'react';\nimport { ModalManagerProvider } from 'contexts/ModalManagerContext';\nimport styled from 'styled-components';\nimport { Modals } from 'types/enums/modals';\nimport RiskProfilesInfoModalContainer from 'features/RiskProfiles/RiskProfilesInfoModalContainer';\nimport { MasterDetailLayout } from 'components/Layout/MasterDetailsLayout';\nimport RiskProfilesMasterContainer from 'features/RiskProfiles/RiskProfilesMasterContainer';\nimport RiskProfilesDetailsContainer from 'features/RiskProfiles/RiskProfilesDetailsContainer';\nimport RiskProfilesInformationsContainer from 'features/RiskProfiles/RiskProfilesInformationsContainer';\nimport CreateRiskProfileContainer from 'features/RiskProfiles/CreateRiskProfileContainer';\nimport { Route, Switch } from 'react-router-dom';\nimport PageHeader from 'components/PageHeader';\n\nconst Container = styled.div`\n  height: calc(100vh - 120px);\n`;\n\nconst RiskProfiles: React.FunctionComponent = () => {\n  return (\n    <ModalManagerProvider>\n      <Container>\n        <PageHeader title=\"Risk profiles\" modalKey={Modals.RISK_PROFILE_INFO} />\n        <MasterDetailLayout>\n          <RiskProfilesMasterContainer />\n          <Switch>\n            <Route\n              path=\"/risk-profiles/:step/:id\"\n              component={RiskProfilesDetailsContainer}\n            />\n            <Route\n              path=\"/risk-profiles\"\n              component={RiskProfilesInformationsContainer}\n            />\n          </Switch>\n        </MasterDetailLayout>\n      </Container>\n      <RiskProfilesInfoModalContainer />\n      <CreateRiskProfileContainer />\n    </ModalManagerProvider>\n  );\n};\n\nexport default RiskProfiles;\n","import React, { useState } from 'react';\nimport { Tooltip } from '@cko/tooltip';\nimport { Placement } from '@popperjs/core';\nimport { Box } from '@cko/primitives';\nimport 'styled-components/macro';\n\ninterface Props {\n  text: string | undefined;\n  enabled: boolean;\n  defaultDirection?: Placement;\n}\n\nconst TooltipButtonWrapper: React.FunctionComponent<Props> = ({\n  text,\n  children,\n  enabled,\n  defaultDirection = 'top',\n}) => {\n  const [show, setShow] = useState(false);\n\n  if (!enabled || !text) return <>{children}</>;\n\n  return (\n    <Tooltip text={text} show={show} defaultDirection={defaultDirection}>\n      <Box\n        css={`\n          button {\n            pointer-events: ${enabled ? 'none' : 'auto'};\n          }\n        `}\n        onMouseEnter={() => setShow(true)}\n        onMouseLeave={() => setShow(false)}\n      >\n        {children}\n      </Box>\n    </Tooltip>\n  );\n};\n\nexport default TooltipButtonWrapper;\n","import { useQuery } from 'react-query';\nimport { RiskProfileResponse, PaymentProcessingStep } from 'types/models';\nimport useGetRequest from 'hooks/api/common/useGetRequest';\nimport endpoints from 'api/endpoints';\nimport { AxiosError } from 'axios';\n\nexport const useRiskProfileData = (\n  paymentProcessingStep: PaymentProcessingStep,\n  id?: string\n) => {\n  const req = useGetRequest<RiskProfileResponse>();\n  return useQuery<RiskProfileResponse, AxiosError<RiskProfileResponse>>(\n    [endpoints.riskProfiles, id],\n    () => req(`${endpoints.riskProfilesStep(paymentProcessingStep)}/${id}`),\n    {\n      enabled: !!id,\n    }\n  );\n};\n","import { useQuery } from 'react-query';\nimport {\n  RiskProfileSummariesResponse,\n  PaymentProcessingStep,\n} from 'types/models';\nimport useGetRequest from 'hooks/api/common/useGetRequest';\nimport endpoints from 'api/endpoints';\nimport { AxiosError } from 'axios';\n\nexport const useRiskProfileSummariesData = (\n  paymentProcessingStep: PaymentProcessingStep\n) => {\n  const req = useGetRequest<RiskProfileSummariesResponse>();\n\n  return useQuery<\n    RiskProfileSummariesResponse,\n    AxiosError<RiskProfileSummariesResponse>\n  >([endpoints.riskProfiles, paymentProcessingStep], () =>\n    req(endpoints.riskProfilesStep(paymentProcessingStep))\n  );\n};\n","import { useAddUpdateMutation } from 'hooks/api/common/useAddUpdateMutation';\nimport endpoints from 'api/endpoints';\n\nexport const useUpdateRiskProfile = () => {\n  return useAddUpdateMutation<any>('put', endpoints.riskProfiles);\n};\n","import endpoints from 'api/endpoints';\nimport { useAddUpdateMutation } from '../common/useAddUpdateMutation';\nimport { PaymentProcessingStep } from 'types/models';\nimport { CreateRiskProfileFormData } from 'forms/CreateRiskProfileForm/CreateRiskProfileForm';\n\nexport const useCreateRiskProfile = (\n  paymentProcessingStep: PaymentProcessingStep,\n  onSuccess?: (id: string) => void\n) => {\n  return useAddUpdateMutation<CreateRiskProfileFormData, { id: string }>(\n    'post',\n    endpoints.riskProfilesStep(paymentProcessingStep),\n    {\n      onSuccess: ({ id }) => {\n        onSuccess && onSuccess(id);\n      },\n    }\n  );\n};\n","import endpoints from 'api/endpoints';\nimport { useDeleteMutation } from '../common/useDeleteMutation';\n\nexport const useDeleteRiskProfile = (onSuccess: () => void) => {\n  return useDeleteMutation(endpoints.riskProfiles, {\n    onSuccess,\n  });\n};\n","import endpoints from 'api/endpoints';\nimport { useAddUpdateMutation } from '../common/useAddUpdateMutation';\nimport { CreateRiskProfileFormData } from 'forms/CreateRiskProfileForm/CreateRiskProfileForm';\nimport { PaymentProcessingStep } from 'types/models';\n\nexport const useEditRiskProfile = (\n  paymentProcessingStep: PaymentProcessingStep,\n  onSuccess: () => void = () => {}\n) => {\n  return useAddUpdateMutation<CreateRiskProfileFormData, { id: string }>(\n    'put',\n    endpoints.riskProfilesStep(paymentProcessingStep),\n    {\n      onSuccess,\n    }\n  );\n};\n","import { ThreeDSVersion } from 'contexts/ThreeDSVersionContext';\nimport {\n  Pre3dsDecisions,\n  PostAuthDecisions,\n  PaymentProcessingStep,\n  PaymentProcessingDecisions,\n} from '../types/models/index';\n\nconst convertDecisionsToActions = (decisionMap: Record<string, string>) => {\n  return Object.entries(decisionMap).map(([value, label]) => {\n    return { value: { type: 'decision', value }, label };\n  });\n};\n\nexport const pre3dsDecisionDescriptionMap: Record<Pre3dsDecisions, string> = {\n  [Pre3dsDecisions.Decline]: `Your transaction won't be processed. It will be sent neither to 3DS nor to Authorisation.`,\n  [Pre3dsDecisions.Challenge]: `Your transaction will be routed via the 3DS workflow which means that will you be covered by the liability shift (on fraudulent grounds only).`,\n  [Pre3dsDecisions.NoPreference]: `Your transaction will be routed via the 3DS workflow which means that will you be covered by the liability shift (on fraudulent grounds only).`,\n  [Pre3dsDecisions.FrictionlessLiability]: `You will be requesting the Issuer to authenticate your transaction without using any challenge, which they may or may not accept.`,\n  [Pre3dsDecisions.TryExemptions]:\n    'Whenever possible, our intelligent 3DS routing engine will select the best PSD2 exemptions to downgrade your transaction.',\n};\n\nconst pre3ds2DecisionDisplayValueMap = {\n  [Pre3dsDecisions.Decline]: 'Decline',\n  [Pre3dsDecisions.Challenge]: 'Force Challenge (liability shift)',\n  [Pre3dsDecisions.NoPreference]: 'No Preference (liability shift)',\n  [Pre3dsDecisions.FrictionlessLiability]: 'Try Frictionless (liability shift)',\n  [Pre3dsDecisions.TryExemptions]: 'Try Exemptions',\n} as const;\n\nconst pre3ds1DecisionDisplayValueMap = {\n  [Pre3dsDecisions.Decline]: 'Decline',\n  [Pre3dsDecisions.Challenge]: '3ds check',\n  [Pre3dsDecisions.NoPreference]: '3ds check',\n  [Pre3dsDecisions.FrictionlessLiability]: '3ds check',\n  [Pre3dsDecisions.TryExemptions]: 'Accept',\n} as const;\n\nexport const getPre3dsDecisionDisplayValueMap = (version: ThreeDSVersion) => {\n  return {\n    [ThreeDSVersion.One]: pre3ds1DecisionDisplayValueMap,\n    [ThreeDSVersion.Two]: pre3ds2DecisionDisplayValueMap,\n  }[version];\n};\n\nexport const postAuthDecisionDisplayValueMap: Record<\n  PostAuthDecisions,\n  string\n> = {\n  [PostAuthDecisions.Capture]: 'Capture',\n  [PostAuthDecisions.Flag]: 'Flag',\n  [PostAuthDecisions.Void]: 'Void',\n};\n\nexport const threeDS1DecisionFilter = (version: ThreeDSVersion | undefined) => (\n  decision: Pre3dsDecisions\n) => {\n  return version === '3DS1'\n    ? ![\n        Pre3dsDecisions.Challenge,\n        Pre3dsDecisions.FrictionlessLiability,\n      ].includes(decision)\n    : true;\n};\n\nexport type DecisionList = {\n  value: string;\n  label: string;\n}[];\n\nexport const getDecisionDisplayValue = (\n  key: PaymentProcessingDecisions,\n  version: ThreeDSVersion\n) => {\n  return (\n    getPre3dsDecisionDisplayValueMap(version)[key as Pre3dsDecisions] ||\n    postAuthDecisionDisplayValueMap[key as PostAuthDecisions] ||\n    key\n  );\n};\n\nexport const getPre3dsDecisionActions = (version: ThreeDSVersion) =>\n  convertDecisionsToActions(getPre3dsDecisionDisplayValueMap(version));\n\nexport const postAuthDecisionDescriptionMap: Record<\n  PostAuthDecisions,\n  string\n> = {\n  [PostAuthDecisions.Capture]: '',\n  [PostAuthDecisions.Flag]:\n    'Coming soon. Transaction will put on hold for manually review. You will be able to access flagged transactions and take decisions in the Payments tab. ',\n  [PostAuthDecisions.Void]: '',\n};\n\nexport const postAuthDecisionActions = convertDecisionsToActions(\n  postAuthDecisionDisplayValueMap\n);\n\ntype PaymentProcessingDecisionsMap = Record<PaymentProcessingDecisions, string>;\n\nexport const getDecisionMap = (\n  step: PaymentProcessingStep,\n  version: ThreeDSVersion\n) => {\n  switch (step) {\n    case PaymentProcessingStep.Pre3ds: {\n      if (version === ThreeDSVersion.One) {\n        return {\n          displayValues: pre3ds1DecisionDisplayValueMap as PaymentProcessingDecisionsMap,\n          descriptions: pre3dsDecisionDescriptionMap as PaymentProcessingDecisionsMap,\n        };\n      }\n      return {\n        displayValues: pre3ds2DecisionDisplayValueMap as PaymentProcessingDecisionsMap,\n        descriptions: pre3dsDecisionDescriptionMap as PaymentProcessingDecisionsMap,\n      };\n    }\n    case PaymentProcessingStep.PostAuth:\n      return {\n        displayValues: postAuthDecisionDisplayValueMap as PaymentProcessingDecisionsMap,\n        descriptions: postAuthDecisionDescriptionMap as PaymentProcessingDecisionsMap,\n      };\n  }\n};\n\nexport const decisionPriorityMap = {\n  [Pre3dsDecisions.Decline]: 1,\n  [Pre3dsDecisions.Challenge]: 2,\n  [Pre3dsDecisions.NoPreference]: 3,\n  [Pre3dsDecisions.FrictionlessLiability]: 4,\n  [Pre3dsDecisions.TryExemptions]: 5,\n  [PostAuthDecisions.Void]: 1,\n  [PostAuthDecisions.Flag]: 2,\n  [PostAuthDecisions.Capture]: 3,\n};\n\nexport const isPre3dsDecision = (decision: Pre3dsDecisions) => {\n  return pre3dsDecisionDescriptionMap[decision] !== undefined;\n};\n\nexport const decisionTypeMap: Record<\n  Pre3dsDecisions | PostAuthDecisions,\n  string\n> = {\n  [Pre3dsDecisions.Decline]: PaymentProcessingStep.Pre3ds,\n  [Pre3dsDecisions.Challenge]: PaymentProcessingStep.Pre3ds,\n  [Pre3dsDecisions.NoPreference]: PaymentProcessingStep.Pre3ds,\n  [Pre3dsDecisions.FrictionlessLiability]: PaymentProcessingStep.Pre3ds,\n  [Pre3dsDecisions.TryExemptions]: PaymentProcessingStep.Pre3ds,\n  [PostAuthDecisions.Void]: PaymentProcessingStep.PostAuth,\n  [PostAuthDecisions.Flag]: PaymentProcessingStep.PostAuth,\n  [PostAuthDecisions.Capture]: PaymentProcessingStep.PostAuth,\n};\n","import React, { useCallback, useMemo, ReactNode } from 'react';\nimport { useField, useFormikContext } from 'formik';\nimport isEqual from 'lodash/isEqual';\nimport {\n  SelectMenu,\n  SelectMenuButton,\n  SelectMenuList,\n  SelectMenuItem,\n  FormLabel,\n  Box,\n} from '@cko/primitives';\n\nimport FieldValidationError from 'components/FieldValidationError';\n\ntype Option<Value> = { label: string; value: Value };\n\ninterface Props<Value = unknown> {\n  options: Option<Value>[];\n  label?: string;\n  name: string;\n  placeholder: string;\n  getItemLabel?: (item: Option<Value>) => string;\n  getItemValue?: (item: Option<Value>) => Value | Option<Value>;\n}\n\nconst FormikSelectMenu = <V extends any = string>({\n  options,\n  label,\n  name,\n  placeholder,\n  getItemLabel = (item) => (item ? item.label : ''),\n  getItemValue = (item) => item?.value ?? item,\n}: Props<V> & { children?: ReactNode }) => {\n  const [, meta, { setValue, setTouched }] = useField(name);\n  const { error: errorMessage } = meta;\n  const { submitCount, values } = useFormikContext<any>();\n  const showError = submitCount > 0 && errorMessage !== undefined;\n\n  const handleOnChange = useCallback(\n    async (item) => {\n      await setValue(getItemValue(item));\n      setTouched(true);\n    },\n    [getItemValue, setTouched, setValue]\n  );\n\n  const selected = useMemo(\n    () => options.find((x) => isEqual(getItemValue(x), values[name])) ?? null,\n    [getItemValue, name, options, values]\n  );\n\n  return (\n    <>\n      {label && <FormLabel>{label}</FormLabel>}\n      <SelectMenu\n        placeholder={placeholder}\n        onChange={handleOnChange}\n        selectedItem={selected}\n        itemToString={getItemLabel}\n      >\n        <SelectMenuButton hasErrors={showError} />\n        <SelectMenuList>\n          {options.map((item, i: number) => (\n            <SelectMenuItem item={item} index={i} key={`formik-select-${i}`} />\n          ))}\n        </SelectMenuList>\n      </SelectMenu>\n      {showError && (\n        <Box mt={2}>\n          <FieldValidationError data-testid={`${name}-error-messsage`}>\n            {errorMessage}\n          </FieldValidationError>\n        </Box>\n      )}\n    </>\n  );\n};\n\nexport default FormikSelectMenu;\n","import styled from 'styled-components';\nimport { UnorderedList as StyledUnorderedList } from '@cko/primitives';\n\nconst UnorderedList = styled(StyledUnorderedList)`\n  list-style: disc;\n`;\n\nexport default UnorderedList;\n","import {\n  createValidator,\n  required,\n  maxLength,\n  expectedCharacters,\n} from 'utils/validator';\nimport { CreateRiskProfileFormData } from './CreateRiskProfileForm';\n\nconst createRiskProfileValidator = createValidator<CreateRiskProfileFormData>({\n  name: [\n    required('Name is required'),\n    maxLength(101, 'Name must be 100 characters or under'),\n    expectedCharacters(\n      /^[0-9A-Za-z -]+$/,\n      'Name can not contain invalid characters'\n    ),\n  ],\n});\n\nexport default createRiskProfileValidator;\n","import React, { useState } from 'react';\nimport { Form, Formik } from 'formik';\nimport TextField from 'components/TextField';\nimport SpacedButtonGroup from 'components/SpacedButtonGroup';\nimport { PrimaryButton, OutlineButton } from '@cko/primitives';\nimport createRiskProfileValidator from './CreateRiskProfileValidator';\nimport InlineAlert from 'components/InlineAlert';\n\ninterface Props {\n  onSubmit: (data: { data: CreateRiskProfileFormData }) => Promise<any>;\n  onCancel: () => void;\n  onSuccess?: (data: CreateRiskProfileFormData) => void;\n  initialValues: CreateRiskProfileFormData;\n  deafultButtonText?: string;\n}\n\nexport interface CreateRiskProfileFormData {\n  name: string;\n}\n\nconst CreateRiskProfileForm: React.FunctionComponent<Props> = ({\n  onSubmit,\n  onCancel,\n  onSuccess = () => {},\n  initialValues,\n  deafultButtonText = 'Create',\n}) => {\n  const [hasSubmissionError, setHasSubmissionError] = useState<string | null>(\n    null\n  );\n\n  return (\n    <Formik\n      initialValues={initialValues}\n      validate={createRiskProfileValidator}\n      validateOnChange={false}\n      onSubmit={async (values, actions) => {\n        try {\n          setHasSubmissionError(null);\n          await onSubmit({ data: values });\n          onSuccess(values);\n        } catch (e) {\n          if (e.response?.status === 409) {\n            setHasSubmissionError(\n              ` A risk profile named \"${values.name}\" already exists`\n            );\n          } else {\n            setHasSubmissionError('Technical error. Please try again later.');\n          }\n        } finally {\n          actions.setSubmitting(false);\n        }\n      }}\n    >\n      {({ isSubmitting, submitCount }) => {\n        return (\n          <Form>\n            <TextField\n              name=\"name\"\n              label=\"Risk profile name\"\n              mb={4}\n              data-testid=\"risk-profile-create-name\"\n              placeholder=\"Name of the risk profile\"\n              submitCount={submitCount}\n            />\n\n            <SpacedButtonGroup>\n              <PrimaryButton\n                variant=\"large\"\n                type=\"submit\"\n                disabled={isSubmitting}\n                data-cy=\"submit\"\n              >\n                {isSubmitting ? 'Submitting' : deafultButtonText}\n              </PrimaryButton>\n              <OutlineButton variant=\"large\" onClick={onCancel}>\n                Cancel\n              </OutlineButton>\n            </SpacedButtonGroup>\n            {hasSubmissionError && (\n              <InlineAlert>{hasSubmissionError}</InlineAlert>\n            )}\n          </Form>\n        );\n      }}\n    </Formik>\n  );\n};\n\nexport default CreateRiskProfileForm;\n","import React from 'react';\nimport { Box } from '@cko/primitives';\nimport { IconActionInfo } from '@cko/icons';\nimport TooltipButtonWrapper from 'components/TooltipButtonWrapper';\n\ninterface Props {\n  text: string;\n  enabled?: boolean;\n}\n\nconst InfoTooltip: React.FunctionComponent<Props> = ({\n  text,\n  enabled = true,\n}) => {\n  return (\n    <Box ml={1} display=\"inline-block\">\n      <TooltipButtonWrapper enabled={enabled} text={text}>\n        <IconActionInfo style={{ verticalAlign: 'bottom' }} />\n      </TooltipButtonWrapper>\n    </Box>\n  );\n};\n\nexport default InfoTooltip;\n","import React from 'react';\nimport { Range, getTrackBackground } from 'react-range';\nimport styled from 'styled-components';\n\nconst CustomTrack = styled.div`\n  height: 8px;\n  width: 100%;\n  border-radius: 4px;\n  align-self: center;\n  position: relative;\n\n  &::before {\n    content: '';\n    content: '';\n    width: 100%;\n    height: 2px;\n    background-color: #dfe7eb;\n    top: 2px;\n    position: absolute;\n    z-index: -1;\n  }\n`;\n\nconst CustomThumb = styled.div<{ value: number; disabled: boolean }>`\n  height: 16px;\n  width: 16px;\n  border-radius: 50%;\n  background-color: #778293;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n\n  ${({ value, disabled }) => {\n    if (value === 0 || value === 100 || disabled) {\n      return `\n      pointer-events: none;\n      background-color: #F2F4F5;\n      border: 1px solid #CFDBE1;\n      `;\n    }\n\n    return ``;\n  }}\n`;\n\nconst ThumbLabel = styled.div<{ index: number }>`\n  position: absolute;\n  color: #1b2f37;\n  font-size: 14px;\n\n  top: ${({ index }) => (index === 0 ? 18 : -18)}px;\n`;\n\ninterface Props {\n  start: number;\n  end?: number;\n  disabled: boolean;\n  onChange: (values: number[]) => void;\n}\n\nconst DecisionSlider: React.FunctionComponent<Props> = ({\n  start,\n  end,\n  disabled,\n  onChange,\n}) => {\n  if (!end) return null;\n\n  return (\n    <Range\n      values={[start, end]}\n      step={1}\n      min={0}\n      disabled={disabled}\n      max={100}\n      onChange={onChange}\n      renderTrack={({ props, children }: any) => (\n        <div\n          data-testid=\"decision-row-slider\"\n          onMouseDown={props.onMouseDown}\n          onTouchStart={props.onTouchStart}\n          style={{\n            ...props.style,\n          }}\n        >\n          <CustomTrack\n            ref={props.ref}\n            style={{\n              background: getTrackBackground({\n                values: [start, end],\n                colors: ['transparent', '#CFDBE1', 'transparent'],\n                min: 0,\n                max: 100,\n              }),\n            }}\n          >\n            {children}\n          </CustomTrack>\n        </div>\n      )}\n      renderThumb={({ props, value, index }) => {\n        return (\n          <CustomThumb\n            {...props}\n            data-testid=\"decision-row-slider-thumb\"\n            disabled={disabled}\n            value={value}\n            style={{\n              ...props.style,\n            }}\n          >\n            <ThumbLabel index={index}>{value}</ThumbLabel>\n          </CustomThumb>\n        );\n      }}\n    />\n  );\n};\n\nexport default DecisionSlider;\n","import React, { useCallback } from 'react';\nimport { TableCell, SwitchButton } from '@cko/primitives';\nimport DecisionSlider from '../DecisionSlider';\nimport {\n  PaymentProcessingStep,\n  PaymentProcessingDecisions,\n} from 'types/models';\nimport usePermissions from 'hooks/usePermissions';\nimport TooltipButtonWrapper from 'components/TooltipButtonWrapper';\nimport InfoTooltip from 'components/InfoTooltip';\nimport { getDecisionMap } from 'utils/decisions';\nimport { UpdateDecisionPayload } from 'types/models';\nimport { ThreeDSVersion } from 'contexts/ThreeDSVersionContext';\n\ninterface Props {\n  decision: PaymentProcessingDecisions;\n  start: number;\n  end?: number;\n  handleUpdateScoringRange: (payload: UpdateDecisionPayload) => void;\n  handleEnableDecision: (payload: PaymentProcessingDecisions) => void;\n  handleDisableDecision: (payload: PaymentProcessingDecisions) => void;\n  enabledCount: number;\n  paymentProcessingStep: PaymentProcessingStep;\n}\n\nconst DecisionRow: React.FunctionComponent<Props> = ({\n  decision,\n  start,\n  end,\n  handleUpdateScoringRange,\n  handleEnableDecision,\n  handleDisableDecision,\n  enabledCount,\n  paymentProcessingStep,\n}) => {\n  const enabled = end !== undefined;\n\n  const decisionMap = getDecisionMap(paymentProcessingStep, ThreeDSVersion.Two);\n\n  const handleSliderChange = useCallback(\n    (values: number[]) => {\n      return handleUpdateScoringRange({ decision, values });\n    },\n    [decision, handleUpdateScoringRange]\n  );\n\n  const { hasPermission } = usePermissions();\n\n  return (\n    <tr>\n      <TableCell>\n        <TooltipButtonWrapper\n          enabled={enabled && enabledCount <= 2}\n          text={'At least two scoring decisions must be enabled'}\n        >\n          <SwitchButton\n            id={decision}\n            data-testid=\"decision-row-switch-button\"\n            checked={enabled}\n            onChange={() =>\n              enabled\n                ? handleDisableDecision(decision)\n                : handleEnableDecision(decision)\n            }\n            disabled={\n              (enabled && enabledCount <= 2) ||\n              !hasPermission('prism:risk-profile:write')\n            }\n          />\n        </TooltipButtonWrapper>\n      </TableCell>\n      <TableCell>\n        {decisionMap.displayValues[decision as PaymentProcessingDecisions]}{' '}\n        {decisionMap.descriptions[decision as PaymentProcessingDecisions] !==\n          '' && (\n          <InfoTooltip\n            text={\n              decisionMap.descriptions[decision as PaymentProcessingDecisions]\n            }\n          />\n        )}\n      </TableCell>\n      <TableCell id={`${decision}_sliders`}>\n        {enabled && (\n          <DecisionSlider\n            disabled={!hasPermission('prism:risk-profile:write')}\n            start={start}\n            end={end}\n            onChange={handleSliderChange}\n          />\n        )}\n      </TableCell>\n    </tr>\n  );\n};\n\nexport default DecisionRow;\n","import React, { useMemo } from 'react';\nimport {\n  Box,\n  Table,\n  TableHead,\n  TableBody,\n  TableRow,\n  TableCell,\n} from '@cko/primitives';\nimport DecisionRow from '../DecisionRow';\nimport {\n  PaymentProcessingStep,\n  PaymentProcessingDecisions,\n  DynamicDecision,\n  UpdateDecisionPayload,\n} from 'types/models';\n\nconst getPreviousEnd = (decisions: DynamicDecision[], i: number): number => {\n  const next = decisions[i - 1];\n\n  if (!next) {\n    return 0;\n  }\n\n  if (next.end) {\n    return next.end + 1;\n  } else {\n    return getPreviousEnd(decisions, i - 1);\n  }\n};\n\ninterface Props {\n  decisions: DynamicDecision[];\n  handleUpdateScoringRange: (payload: UpdateDecisionPayload) => void;\n  handleEnableDecision: (payload: PaymentProcessingDecisions) => void;\n  handleDisableDecision: (payload: PaymentProcessingDecisions) => void;\n  paymentProcessingStep: PaymentProcessingStep;\n}\n\nconst DecisionRangeContainer: React.FunctionComponent<Props> = ({\n  decisions,\n  handleUpdateScoringRange,\n  handleEnableDecision,\n  handleDisableDecision,\n  paymentProcessingStep,\n}) => {\n  const enabledCount = useMemo(() => {\n    return decisions.reduce((count, decision) => {\n      if (decision.end) {\n        return count + 1;\n      }\n\n      return count;\n    }, 0);\n  }, [decisions]);\n\n  return (\n    <>\n      <Box p={3}>\n        <h1>Scoring decisions</h1>\n      </Box>\n      <Box pr=\"10px\" pb={3}>\n        <Table>\n          <TableHead>\n            <TableRow>\n              <TableCell as=\"th\" width=\"10%\"></TableCell>\n              <TableCell as=\"th\" width=\"40%\">\n                Decision\n              </TableCell>\n              <TableCell as=\"th\" width=\"50%\">\n                Range\n              </TableCell>\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {decisions.map(({ end, decision }, index) => {\n              return (\n                <DecisionRow\n                  key={decision}\n                  decision={decision}\n                  start={getPreviousEnd(decisions, index)}\n                  end={end}\n                  handleUpdateScoringRange={handleUpdateScoringRange}\n                  handleEnableDecision={handleEnableDecision}\n                  handleDisableDecision={handleDisableDecision}\n                  enabledCount={enabledCount}\n                  paymentProcessingStep={paymentProcessingStep}\n                />\n              );\n            })}\n          </TableBody>\n        </Table>\n      </Box>\n    </>\n  );\n};\n\nexport default React.memo(DecisionRangeContainer);\n","import { DynamicDecision } from 'types/models';\n\nclass ScoringDecisionNode {\n  public value: DynamicDecision;\n  public next: ScoringDecisionNode | null;\n  public prev: ScoringDecisionNode | null;\n  public nextEnd: ScoringDecisionNode | null;\n  public prevEnd: ScoringDecisionNode | null;\n\n  constructor(value: DynamicDecision) {\n    this.value = value;\n    this.next = null;\n    this.prev = null;\n    this.nextEnd = null;\n    this.prevEnd = null;\n  }\n\n  findPrevEndNode(node = this.prev): ScoringDecisionNode | null {\n    if (node === null) {\n      return null;\n    }\n\n    if (node.value.end) {\n      return node;\n    }\n\n    return this.findPrevEndNode(node.prev as this);\n  }\n\n  findNextEndNode(node = this.next): ScoringDecisionNode | null {\n    if (node === null) {\n      return null;\n    }\n\n    if (node.value.end) {\n      return node;\n    }\n\n    return this.findNextEndNode(node.next as this);\n  }\n\n  pushOverlappingNextNodes(currentNode = this, nextNode = this.nextEnd): void {\n    if (!currentNode || !nextNode) {\n      return;\n    }\n\n    if (nextNode.nextEnd && nextNode.value.end - 2 <= currentNode.value.end) {\n      nextNode.value.end = Math.min(nextNode.value.end + 2, 98);\n    }\n\n    return this.pushOverlappingNextNodes(nextNode as this, nextNode.nextEnd);\n  }\n\n  fixPreviousOverlappingNodes(\n    currentNode = this,\n    prevNode = this.prevEnd\n  ): void {\n    if (!currentNode || !prevNode) {\n      return;\n    }\n\n    const differenceInRange = currentNode.value.end - prevNode.value.end;\n\n    if (currentNode.prev && differenceInRange < 2) {\n      prevNode.value.end = prevNode.value.end - 2;\n    }\n\n    return this.fixPreviousOverlappingNodes(prevNode as this, prevNode.prevEnd);\n  }\n\n  previousNodesTouching() {\n    let prevNode = this.prevEnd;\n    let currentEnd = this.value.end;\n\n    while (prevNode) {\n      const differenceInRange = currentEnd - prevNode.value.end;\n\n      if (\n        (!prevNode.prevEnd && prevNode.value.end > 2) ||\n        differenceInRange > 2\n      ) {\n        return false;\n      }\n\n      currentEnd = prevNode.value.end;\n      prevNode = prevNode.prevEnd;\n    }\n\n    return true;\n  }\n\n  touchingPreviousNode() {\n    if (this.prevEnd === null) {\n      return false;\n    }\n\n    const rangeDifference = this.value.end - this.prevEnd.value.end;\n\n    return rangeDifference <= 2;\n  }\n}\n\nexport default ScoringDecisionNode;\n","import ScoringDecisionNode from './ScoringDecisionNode';\nimport { DynamicDecision, PaymentProcessingDecisions } from 'types/models';\n\nclass ScoringDecisionList {\n  public head: ScoringDecisionNode | null;\n  public endHead: ScoringDecisionNode | null;\n  public endTail: ScoringDecisionNode | null;\n  public tail: ScoringDecisionNode | null;\n\n  constructor() {\n    this.head = null;\n    this.tail = null;\n    this.endHead = null;\n    this.endTail = null;\n  }\n\n  add(value: DynamicDecision) {\n    const hasEnd = value.end !== undefined;\n    const node = new ScoringDecisionNode(value);\n\n    // handle first item\n    if (!this.head) {\n      this.head = node;\n    }\n\n    // handle first item with an end\n    if (!this.endHead && hasEnd) {\n      this.endHead = node;\n    }\n\n    if (this.tail) {\n      this.tail.next = node;\n      node.prev = this.tail;\n\n      if (hasEnd) {\n        const prevEnd = node.findPrevEndNode();\n\n        if (prevEnd) {\n          prevEnd.nextEnd = node;\n        }\n\n        node.prevEnd = prevEnd;\n        this.tail.nextEnd = node;\n      }\n    }\n\n    if (hasEnd) {\n      this.endTail = node;\n    }\n\n    this.tail = node;\n  }\n\n  findByDecision(decision: PaymentProcessingDecisions) {\n    let currentItem = this.head;\n\n    while (currentItem) {\n      if (currentItem.value.decision === decision) {\n        return currentItem;\n      }\n\n      currentItem = currentItem.next;\n    }\n\n    return null;\n  }\n\n  toArray() {\n    let arr = [];\n    let currentItem = this.head;\n\n    while (currentItem) {\n      arr.push(currentItem.value);\n      currentItem = currentItem.next;\n    }\n\n    return arr;\n  }\n\n  toEndArray() {\n    let arr = [];\n    let currentItem = this.endHead;\n\n    while (currentItem) {\n      arr.push(currentItem.value);\n      currentItem = currentItem.nextEnd;\n    }\n\n    return arr;\n  }\n}\n\nexport default ScoringDecisionList;\n","import {\n  RiskProfileResponse,\n  PaymentProcessingDecisions,\n  DynamicDecision,\n  DecisionRangeState,\n} from 'types/models';\nimport ScoringDecisionList from 'utils/ScoringDecisionList';\nimport { PartialBy } from 'types/utilities';\n\nexport type UpdateRangeEndActionPayload = number[];\nexport type AddRangeEndActionPayload = number;\nexport type DeleteRangeEndActionPayload = number;\nexport type LoadDataActionPayload = RiskProfileResponse;\n\nexport type UpdateDecisionPayload = {\n  values: number[];\n  decision: PaymentProcessingDecisions;\n};\n\nexport type UpdateScoredRuleActionPayload = {\n  index: number;\n  score: string;\n};\n\nexport interface UpdateDecision {\n  type: 'UPDATE_DECISION';\n  payload: UpdateDecisionPayload;\n}\n\nexport interface EnableDecision {\n  type: 'ENABLE_DECISION';\n  payload: PaymentProcessingDecisions;\n}\n\nexport interface DisableDecision {\n  type: 'DISABLE_DECISION';\n  payload: PaymentProcessingDecisions;\n}\n\nexport type Action = UpdateDecision | EnableDecision | DisableDecision;\n\nconst decisionRangeReducer = (\n  state: DecisionRangeState,\n  action: Action\n): DecisionRangeState => {\n  const scoringDecisionsLinkedList = new ScoringDecisionList();\n\n  state.decisions.forEach((scoreDecision) => {\n    scoringDecisionsLinkedList.add(scoreDecision as DynamicDecision);\n  });\n\n  switch (action.type) {\n    case 'UPDATE_DECISION': {\n      const { decision, values } = action.payload;\n\n      const [start, end] = values;\n      const decisionNode = scoringDecisionsLinkedList.findByDecision(decision);\n\n      if (!decisionNode) {\n        return state;\n      }\n\n      if (decisionNode.prevEnd === null) {\n        if (decisionNode.nextEnd && end >= decisionNode.nextEnd.value.end - 1) {\n          return state;\n        }\n\n        decisionNode.value.end = end > 0 ? end : 1;\n      } else if (decisionNode.prevEnd && decisionNode.nextEnd) {\n        if (\n          (decisionNode.prevEnd.prevEnd &&\n            start <= decisionNode.prevEnd.prevEnd.value.end + 2) ||\n          (decisionNode.nextEnd && end > decisionNode.nextEnd.value.end - 2) ||\n          start === end\n        ) {\n          return state;\n        }\n\n        decisionNode.prevEnd.value.end = start < 2 ? 1 : start - 1;\n        decisionNode.value.end = end > 98 ? 98 : end;\n      } else {\n        const overlapsWithStartOfNextDecision =\n          decisionNode.prevEnd.prevEnd &&\n          start <= decisionNode.prevEnd.prevEnd.value.end + 2;\n        const overlapsWithFirstDecision =\n          !decisionNode.prevEnd.prevEnd && start < 2;\n\n        const startEndOverlap = start >= 100;\n\n        if (\n          overlapsWithStartOfNextDecision ||\n          overlapsWithFirstDecision ||\n          startEndOverlap\n        ) {\n          return state;\n        }\n\n        decisionNode.prevEnd.value.end = start - 1;\n      }\n\n      return {\n        ...state,\n        decisions: scoringDecisionsLinkedList.toArray(),\n      };\n    }\n\n    case 'ENABLE_DECISION': {\n      const offset = 5;\n\n      const decisionNode = scoringDecisionsLinkedList.findByDecision(\n        action.payload\n      );\n\n      if (decisionNode === null) {\n        return state;\n      }\n\n      const prevEndNode = decisionNode.findPrevEndNode();\n      const nextEndNode = decisionNode.findNextEndNode();\n\n      const setNodes = () => {\n        decisionNode.prevEnd = prevEndNode;\n        decisionNode.prev = prevEndNode;\n        decisionNode.nextEnd = nextEndNode;\n        if (prevEndNode) {\n          prevEndNode.nextEnd = decisionNode;\n        }\n      };\n\n      if (prevEndNode === null) {\n        if (!nextEndNode) {\n          return state;\n        }\n\n        if (nextEndNode.value.end <= offset) {\n          decisionNode.value.end = 1;\n        } else {\n          decisionNode.value.end = offset;\n        }\n\n        nextEndNode.prevEnd = decisionNode;\n        decisionNode.nextEnd = nextEndNode;\n\n        decisionNode.pushOverlappingNextNodes();\n      } else if (nextEndNode === null) {\n        decisionNode.value.end = 100;\n        prevEndNode.value.end = prevEndNode.value.end - 2;\n\n        setNodes();\n\n        decisionNode.fixPreviousOverlappingNodes();\n      } else {\n        if (\n          (prevEndNode.prevEnd && !prevEndNode.touchingPreviousNode()) ||\n          (!prevEndNode.prevEnd && prevEndNode.value.end > 2)\n        ) {\n          decisionNode.value.end = prevEndNode.value.end;\n          prevEndNode.value.end = prevEndNode.value.end - 2;\n\n          setNodes();\n\n          if (nextEndNode) {\n            nextEndNode.prevEnd = decisionNode;\n            nextEndNode.prev = decisionNode;\n          }\n        } else if (!prevEndNode.previousNodesTouching()) {\n          decisionNode.value.end = prevEndNode.value.end;\n          prevEndNode.value.end = decisionNode.value.end - 2;\n\n          setNodes();\n\n          if (nextEndNode) {\n            nextEndNode.prevEnd = decisionNode;\n            nextEndNode.prev = decisionNode;\n          }\n\n          decisionNode.fixPreviousOverlappingNodes();\n        } else {\n          const newEnd = prevEndNode.value.end + 2;\n          decisionNode.value.end = newEnd;\n\n          setNodes();\n\n          if (nextEndNode) {\n            nextEndNode.prevEnd = decisionNode;\n            nextEndNode.prev = decisionNode;\n          }\n\n          if (newEnd > prevEndNode.value.end) {\n            decisionNode.pushOverlappingNextNodes();\n          }\n        }\n      }\n\n      return {\n        ...state,\n        decisions: scoringDecisionsLinkedList.toArray(),\n      };\n    }\n\n    case 'DISABLE_DECISION': {\n      const decisionNode = scoringDecisionsLinkedList.findByDecision(\n        action.payload\n      );\n\n      if (decisionNode === null) {\n        return state;\n      }\n\n      const prevEndNode = decisionNode.findPrevEndNode();\n\n      const nextEndNode = decisionNode.findNextEndNode();\n\n      if (!prevEndNode && nextEndNode) {\n        nextEndNode.prevEnd = null;\n      } else if (!nextEndNode && prevEndNode) {\n        prevEndNode.nextEnd = null;\n        prevEndNode.value.end = decisionNode.value.end;\n      } else {\n        if (prevEndNode) {\n          prevEndNode.nextEnd = nextEndNode;\n          prevEndNode.value.end = decisionNode.value.end;\n        }\n\n        if (nextEndNode) {\n          nextEndNode.prevEnd = prevEndNode;\n        }\n      }\n\n      delete (decisionNode.value as PartialBy<DynamicDecision, 'end'>).end;\n\n      return {\n        ...state,\n        decisions: scoringDecisionsLinkedList.toArray(),\n      };\n    }\n\n    default:\n      return state;\n  }\n};\n\nexport default decisionRangeReducer;\n","import { useMemo, useReducer } from 'react';\nimport { DynamicDecision, PaymentProcessingDecisions } from 'types/models';\nimport ScoringDecisionList from 'utils/ScoringDecisionList';\nimport decisionRangeReducer, {\n  UpdateDecisionPayload,\n} from './decisionRangeReducer';\nimport { decisionPriorityMap } from 'utils/decisions';\n\nconst sortByPriority = (decisions: DynamicDecision[]) =>\n  decisions.sort(\n    (x, y) => decisionPriorityMap[y.decision] - decisionPriorityMap[x.decision]\n  );\n\nconst useDecisionRanges = (\n  scoringDecisions: DynamicDecision[],\n  setHasEdited: (hasEdited: boolean) => void\n) => {\n  const scoringDecisionsLinkedList = useMemo(\n    () => new ScoringDecisionList(),\n    []\n  );\n\n  const initialState = useMemo(() => {\n    scoringDecisions.forEach((scoreDecision) => {\n      scoringDecisionsLinkedList.add(scoreDecision);\n    });\n\n    return {\n      decisions: sortByPriority(scoringDecisions),\n    };\n  }, [scoringDecisions, scoringDecisionsLinkedList]);\n\n  const [state, dispatch] = useReducer(decisionRangeReducer, initialState);\n\n  const actions = useMemo(() => {\n    const actions = {\n      handleDecisionChange: (payload: UpdateDecisionPayload) => {\n        dispatch({\n          type: 'UPDATE_DECISION',\n          payload,\n        });\n        setHasEdited(true);\n      },\n      handleEnableDecision: (payload: PaymentProcessingDecisions) => {\n        dispatch({\n          type: 'ENABLE_DECISION',\n          payload,\n        });\n        setHasEdited(true);\n      },\n      handleDisableDecision: (payload: PaymentProcessingDecisions) => {\n        dispatch({\n          type: 'DISABLE_DECISION',\n          payload,\n        });\n        setHasEdited(true);\n      },\n    };\n\n    return actions;\n  }, [setHasEdited]);\n\n  return {\n    state,\n    actions,\n  };\n};\n\nexport default useDecisionRanges;\n","import React from 'react';\nimport { TextField } from '@cko/primitives';\n\nimport {\n  Table,\n  TableHead,\n  TableBody,\n  TableRow,\n  TableCell,\n} from '@cko/primitives';\nimport { RiskProfileScoredRule } from 'types/models';\n\nimport usePermissions from 'hooks/usePermissions';\n\nimport DeleteButton from 'components/DeleteButton';\n\nexport type HandleScoredRuleUpdate = ({\n  index,\n  score,\n}: {\n  index: number;\n  score: string;\n}) => void;\n\ninterface Props {\n  scoredRules: RiskProfileScoredRule[];\n  handleScoredRuleUpdate: HandleScoredRuleUpdate;\n  handleDeleteRiskProfileRule: (rule: RiskProfileScoredRule) => void;\n}\n\nconst digitsOnly = /^-?\\d*\\.?\\d*$/;\n\nconst RiskProfileScoringRulesTable: React.FunctionComponent<Props> = ({\n  scoredRules,\n  handleScoredRuleUpdate,\n  handleDeleteRiskProfileRule,\n}) => {\n  const { hasPermission } = usePermissions();\n  return (\n    <Table tableLayout=\"fixed\">\n      <TableHead>\n        <TableRow>\n          <TableCell width=\"75%\" as=\"th\">\n            Rule name\n          </TableCell>\n          <TableCell width=\"10%\" as=\"th\">\n            Score\n          </TableCell>\n          <TableCell width=\"15%\" textAlign=\"right\" as=\"th\" />\n        </TableRow>\n      </TableHead>\n      <TableBody>\n        {scoredRules.length > 0 ? (\n          scoredRules.map((scoredRule, i) => (\n            <TableRow\n              key={scoredRule.scoring_rule_id}\n              data-cy=\"risk-profile-scoring-rule\"\n            >\n              <TableCell>{scoredRule.name}</TableCell>\n              <TableCell>\n                <TextField\n                  type=\"text\"\n                  data-testid=\"risk-profile-scoring-rules-table-text-field\"\n                  disabled={!hasPermission('prism:risk-profile:write')}\n                  onChange={(e) => {\n                    const { value } = e.target;\n                    if (digitsOnly.test(value)) {\n                      handleScoredRuleUpdate({\n                        index: i,\n                        score: value,\n                      });\n                    }\n                  }}\n                  onBlur={(e) => {\n                    if (e.target.value === '') {\n                      handleScoredRuleUpdate({\n                        index: i,\n                        score: '0',\n                      });\n                    }\n                  }}\n                  color={Number(scoredRule.score) > 0 ? 'danger' : 'success'}\n                  value={scoredRule.score}\n                />\n              </TableCell>\n              <TableCell textAlign=\"right\">\n                <DeleteButton\n                  onClick={() => handleDeleteRiskProfileRule(scoredRule)}\n                />\n              </TableCell>\n            </TableRow>\n          ))\n        ) : (\n          <TableRow data-cy=\"risk-profile-rules-placeholder\">\n            <TableCell colSpan={3} textAlign=\"center\">\n              No rules assigned to this risk profile\n            </TableCell>\n          </TableRow>\n        )}\n      </TableBody>\n    </Table>\n  );\n};\n\nexport default RiskProfileScoringRulesTable;\n","import {\n  createValidator,\n  required,\n  integer,\n  requiredObject,\n} from 'utils/validator';\n\nexport default createValidator({\n  score: [required('Score is required'), integer('Score must be an integer')],\n  rule: [requiredObject('Rule is required')],\n});\n","import React from 'react';\nimport { Form, Formik } from 'formik';\nimport TextField from 'components/TextField';\nimport { Box, Flex, PrimaryButton, OutlineButton } from '@cko/primitives';\nimport addRiskProfileScoringRuleValidator from './AddRiskProfileScoringRuleValidator';\nimport FormikSelectMenu from 'components/FormikSelectMenu';\nimport { ScoringRuleSummary } from 'types/models';\nimport { AddScoredRuleActionPayload } from 'features/RiskProfiles/useRiskProfileState/riskProfileReducer';\n\ninterface Props {\n  onCancel: () => void;\n  onSubmit: (payload: AddScoredRuleActionPayload) => void;\n  scoringRules: ScoringRuleSummary[];\n}\n\ntype ScoringRuleSummaryWithoutTags = Omit<ScoringRuleSummary, 'tags'>;\n\nconst AddRiskProfileScoringRuleForm: React.FunctionComponent<Props> = ({\n  onCancel,\n  onSubmit,\n  scoringRules,\n}) => {\n  return (\n    <Formik\n      initialValues={{\n        score: '',\n        rule: { id: '', name: '', tags: '', predicate: '' },\n      }}\n      onSubmit={(values) => {\n        const { rule, score } = values;\n\n        const payload = {\n          score,\n          scoring_rule_id: rule.id,\n          name: rule.name,\n        };\n\n        onSubmit(payload);\n      }}\n      validateOnChange\n      validate={addRiskProfileScoringRuleValidator}\n    >\n      {({ submitCount }) => (\n        <Form>\n          <Box mb={3}>\n            <FormikSelectMenu<ScoringRuleSummaryWithoutTags>\n              name=\"rule\"\n              options={scoringRules.map((scoringRule) => {\n                const { tags, ...scoringRuleWithoutTags } = scoringRule;\n\n                return {\n                  label: scoringRuleWithoutTags.name,\n                  value: { ...scoringRuleWithoutTags },\n                };\n              })}\n              label=\"Rule\"\n              placeholder=\"Please select a rule\"\n            />\n          </Box>\n          <TextField\n            label=\"Score\"\n            mb={4}\n            name=\"score\"\n            type=\"number\"\n            submitCount={submitCount}\n          />\n\n          <Flex alignItems=\"center\">\n            <Box>\n              <PrimaryButton data-cy=\"modal-add-rule\" type=\"submit\">\n                Assign rule\n              </PrimaryButton>\n            </Box>\n            <Box pl={3}>\n              <OutlineButton onClick={onCancel}>Cancel</OutlineButton>\n            </Box>\n          </Flex>\n        </Form>\n      )}\n    </Formik>\n  );\n};\n\nexport default AddRiskProfileScoringRuleForm;\n","import React from 'react';\nimport { Modal } from '@cko/primitives';\nimport useModalManager from 'hooks/useModalManager';\nimport { Modals } from 'types/enums/modals';\nimport AddRiskProfilesScoringRuleForm from 'forms/AddRiskProfileScoringRuleForm';\nimport { ScoringRuleSummary } from 'types/models';\nimport { AddScoredRuleActionPayload } from './useRiskProfileState/riskProfileReducer';\n\ninterface Props {\n  addScoringRule: (payload: AddScoredRuleActionPayload) => void;\n  riskProfileName: string;\n}\n\nconst AddRiskProfilesScoringRuleContainer: React.FunctionComponent<Props> = ({\n  addScoringRule,\n  riskProfileName,\n}) => {\n  const { modalData, closeModal } = useModalManager<ScoringRuleSummary[]>(\n    Modals.ADD_RISK_PROFILE_SCORING_RULE\n  );\n\n  const handleSubmit = (payload: AddScoredRuleActionPayload) => {\n    addScoringRule(payload);\n    closeModal();\n  };\n\n  if (!modalData) {\n    return null;\n  }\n\n  return (\n    <Modal\n      type=\"success\"\n      title={`Assign rule to ${riskProfileName}`}\n      closeModal={closeModal}\n    >\n      <AddRiskProfilesScoringRuleForm\n        onCancel={closeModal}\n        onSubmit={handleSubmit}\n        scoringRules={modalData}\n      />\n    </Modal>\n  );\n};\n\nexport default AddRiskProfilesScoringRuleContainer;\n","import React, { useMemo } from 'react';\nimport { Box, Flex, SecondaryButton } from '@cko/primitives';\nimport { IconActionAdd } from '@cko/icons';\nimport { RiskProfileScoredRule, ScoringRuleSummary } from 'types/models';\nimport RiskProfileScoringRulesTable from 'components/RiskProfileScoringRulesTable';\nimport { HandleScoredRuleUpdate } from 'components/RiskProfileScoringRulesTable/RiskProfileScoringRulesTable';\nimport useModalManager from 'hooks/useModalManager';\nimport { Modals } from 'types/enums/modals';\nimport AddRiskProfilesScoringRuleContainer from './AddRiskProfilesScoringRuleContainer';\nimport TooltipButtonWrapper from 'components/TooltipButtonWrapper';\nimport usePermissions from 'hooks/usePermissions';\nimport { AddScoredRuleActionPayload } from './useRiskProfileState/riskProfileReducer';\nimport styled from 'styled-components';\n\ninterface Props {\n  scoredRules: RiskProfileScoredRule[];\n  handleScoredRuleUpdate: HandleScoredRuleUpdate;\n  addScoringRule: (payload: AddScoredRuleActionPayload) => void;\n  handleDeleteRiskProfileRule: (rule: RiskProfileScoredRule) => void;\n  rules: ScoringRuleSummary[];\n  riskProfileName: string;\n}\n\nconst AssignIcon = styled(IconActionAdd)(\n  ({ theme }) => `\nmargin-right: ${theme.space[1]};\n`\n);\n\nconst addScoringRuleTooltipMessage = (\n  rules: ScoringRuleSummary[],\n  filteredRules: ScoringRuleSummary[]\n) => {\n  if (rules.length === 0) {\n    return 'No available rules, please create one';\n  }\n\n  if (filteredRules.length === 0) {\n    return 'All available rules have been attached to this risk profile';\n  }\n\n  return null;\n};\n\nconst RiskProfilesScoringRulesContainer: React.FunctionComponent<Props> = ({\n  scoredRules,\n  handleScoredRuleUpdate,\n  addScoringRule,\n  handleDeleteRiskProfileRule,\n  rules,\n  riskProfileName,\n}) => {\n  const { openModal } = useModalManager<\n    Omit<ScoringRuleSummary, 'risk_profiles'>[]\n  >(Modals.ADD_RISK_PROFILE_SCORING_RULE);\n\n  const filteredRules = useMemo(() => {\n    const selectedIds = scoredRules.map(\n      (scoredRule) => scoredRule.scoring_rule_id\n    );\n\n    return rules\n      .filter((rule) => {\n        return !selectedIds.includes(rule.id);\n      })\n      .map(({ risk_profiles, ...rule }) => rule);\n  }, [rules, scoredRules]);\n\n  const addScoringRuleMessage = addScoringRuleTooltipMessage(\n    rules,\n    filteredRules\n  );\n  const { hasPermission } = usePermissions();\n\n  return (\n    <>\n      <Box mb={2}>\n        <Flex p={3} justifyContent=\"space-between\" alignItems=\"center\">\n          <h1>Scoring rules</h1>\n          <TooltipButtonWrapper\n            enabled={addScoringRuleMessage !== null}\n            text={addScoringRuleMessage || ''}\n          >\n            {hasPermission('prism:risk-profile:write') && (\n              <SecondaryButton\n                disabled={rules.length === 0 || filteredRules.length === 0}\n                style={{\n                  pointerEvents:\n                    addScoringRuleMessage !== null ? 'none' : 'auto',\n                }}\n                onClick={() => {\n                  openModal(filteredRules);\n                }}\n              >\n                <AssignIcon />\n                Assign rule to {riskProfileName}\n              </SecondaryButton>\n            )}\n          </TooltipButtonWrapper>\n        </Flex>\n        <RiskProfileScoringRulesTable\n          scoredRules={scoredRules}\n          handleScoredRuleUpdate={handleScoredRuleUpdate}\n          handleDeleteRiskProfileRule={handleDeleteRiskProfileRule}\n        />\n      </Box>\n      <AddRiskProfilesScoringRuleContainer\n        addScoringRule={addScoringRule}\n        riskProfileName={riskProfileName}\n      />\n    </>\n  );\n};\n\nexport default RiskProfilesScoringRulesContainer;\n","import {\n  RiskProfileResponse,\n  RiskProfileScoredRule,\n  ScoredRuleState,\n} from 'types/models';\n\nexport type UpdateRangeEndActionPayload = number[];\nexport type AddRangeEndActionPayload = number;\nexport type DeleteRangeEndActionPayload = number;\nexport type LoadDataActionPayload = RiskProfileResponse;\n\nexport type UpdateScoredRuleActionPayload = {\n  index: number;\n  score: string;\n};\n\nexport interface UpdateScoredRuleAction {\n  type: 'UPDATE_SCORED_RULE';\n  payload: UpdateScoredRuleActionPayload;\n}\n\nexport type AddScoredRuleActionPayload = {\n  score: string;\n  scoring_rule_id: string;\n  name: string;\n};\n\nexport interface AddScoredRuleAction {\n  type: 'ADD_SCORED_RULE';\n  payload: AddScoredRuleActionPayload;\n}\n\nexport interface RemoveScoredRuleSction {\n  type: 'REMOVE_SCORED_RULE';\n  payload: RiskProfileScoredRule;\n}\n\nexport interface UpdateName {\n  type: 'UPDATE_NAME';\n  payload: string;\n}\n\nexport type Action =\n  | UpdateScoredRuleAction\n  | AddScoredRuleAction\n  | RemoveScoredRuleSction\n  | UpdateName;\n\nconst reducer = (state: ScoredRuleState, action: Action): ScoredRuleState => {\n  switch (action.type) {\n    case 'UPDATE_SCORED_RULE':\n      const { index, score } = action.payload;\n      const scoredRuleToUpdate = state.scored_rules[index];\n\n      return {\n        ...state,\n        scored_rules: state.scored_rules.map((scoredRule) => {\n          if (\n            scoredRuleToUpdate.scoring_rule_id === scoredRule.scoring_rule_id\n          ) {\n            return {\n              ...scoredRuleToUpdate,\n              score,\n            };\n          }\n\n          return scoredRule;\n        }),\n      };\n\n    case 'ADD_SCORED_RULE':\n      return {\n        ...state,\n        scored_rules: [...state.scored_rules, action.payload],\n      };\n\n    case 'REMOVE_SCORED_RULE':\n      return {\n        ...state,\n        scored_rules: state.scored_rules.filter(\n          (scoredRule) =>\n            scoredRule.scoring_rule_id !== action.payload.scoring_rule_id\n        ),\n      };\n\n    case 'UPDATE_NAME': {\n      return { ...state, name: action.payload };\n    }\n\n    default:\n      return state;\n  }\n};\n\nexport default reducer;\n","import { useReducer, useMemo, useState } from 'react';\nimport {\n  DynamicDecision,\n  RiskProfileResponse,\n  ScoredRuleState,\n} from 'types/models';\nimport riskProfileReducer, {\n  UpdateScoredRuleActionPayload,\n  AddScoredRuleActionPayload,\n} from './riskProfileReducer';\nimport useDecisionRanges from 'hooks/useDecisionRanges';\n\nconst useRiskProfileState = (riskProfileData: RiskProfileResponse) => {\n  const [hasEdited, setHasEdited] = useState(false);\n  const initialScoredRuleState: ScoredRuleState = {\n    name: riskProfileData.name,\n    scored_rules: riskProfileData.scored_rules,\n  };\n\n  const [state, dispatch] = useReducer(\n    riskProfileReducer,\n    initialScoredRuleState\n  );\n\n  const {\n    state: decisionRangeState,\n    actions: decisionRangeActions,\n  } = useDecisionRanges(\n    riskProfileData.score_decisions as DynamicDecision[],\n    setHasEdited\n  );\n\n  const actions = useMemo(() => {\n    const actions = {\n      handleSave: () => {\n        setHasEdited(false);\n      },\n      handleScoredRuleChange: (payload: UpdateScoredRuleActionPayload) => {\n        dispatch({\n          type: 'UPDATE_SCORED_RULE',\n          payload,\n        });\n        setHasEdited(true);\n      },\n      handleAddScoredRule: (payload: AddScoredRuleActionPayload) => {\n        dispatch({\n          type: 'ADD_SCORED_RULE',\n          payload,\n        });\n        setHasEdited(true);\n      },\n      handleDeleteRiskProfileRule: (payload: AddScoredRuleActionPayload) => {\n        dispatch({\n          type: 'REMOVE_SCORED_RULE',\n          payload,\n        });\n        setHasEdited(true);\n      },\n      handleUpdateName: (payload: string) => {\n        dispatch({\n          type: 'UPDATE_NAME',\n          payload,\n        });\n      },\n      ...decisionRangeActions,\n    };\n\n    return actions;\n  }, [decisionRangeActions]);\n\n  return {\n    state: {\n      ...state,\n      ...decisionRangeState,\n      hasEdited,\n    },\n    actions,\n  };\n};\n\nexport default useRiskProfileState;\n","import React, { useCallback, useEffect } from 'react';\nimport { Prompt, useLocation } from 'react-router-dom';\nimport { Prompts } from 'types/models';\nimport * as H from 'history';\n\ninterface Props {\n  when: boolean;\n  promptKey: Prompts | ((location: H.Location) => Prompts | boolean);\n  message?: string;\n}\n\nconst SavePrompt: React.FC<Props> = ({\n  when,\n  promptKey,\n  message = 'message',\n}) => {\n  const { pathname } = useLocation();\n  const handleBeforeunload = useCallback(\n    (evt: BeforeUnloadEvent) => {\n      if (when) {\n        evt.preventDefault();\n        evt.returnValue = message;\n      }\n\n      return when ? message : '';\n    },\n    [message, when]\n  );\n\n  useEffect(() => {\n    window.addEventListener('beforeunload', handleBeforeunload);\n    return () => window.removeEventListener('beforeunload', handleBeforeunload);\n  }, [handleBeforeunload]);\n\n  return (\n    <Prompt\n      when={when}\n      message={(params) => {\n        if (params.pathname !== pathname) {\n          if (typeof promptKey === 'function') {\n            return promptKey(params);\n          }\n          return promptKey;\n        }\n        return false;\n      }}\n    />\n  );\n};\n\nexport default SavePrompt;\n"],"sourceRoot":""}